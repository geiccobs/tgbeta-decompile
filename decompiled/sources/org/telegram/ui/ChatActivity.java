package org.telegram.ui;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.animation.ValueAnimator;
import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.Matrix;
import android.graphics.Outline;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Shader;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.SystemClock;
import android.text.Layout;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.text.TextUtils;
import android.text.style.CharacterStyle;
import android.text.style.ForegroundColorSpan;
import android.text.style.URLSpan;
import android.util.Pair;
import android.util.Property;
import android.util.SparseArray;
import android.util.SparseIntArray;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.TextureView;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewOutlineProvider;
import android.view.ViewTreeObserver;
import android.view.accessibility.AccessibilityNodeInfo;
import android.view.animation.DecelerateInterpolator;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.TextView;
import android.widget.Toast;
import androidx.collection.LongSparseArray;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;
import androidx.core.graphics.ColorUtils;
import androidx.core.net.MailTo;
import androidx.core.util.Consumer;
import androidx.exifinterface.media.ExifInterface;
import androidx.recyclerview.widget.ChatListItemAnimator;
import androidx.recyclerview.widget.GridLayoutManagerFixed;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.LinearSmoothScrollerCustom;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewpager.widget.PagerAdapter;
import androidx.viewpager.widget.ViewPager;
import com.google.android.exoplayer2.C;
import com.google.android.exoplayer2.DefaultRenderersFactory;
import com.google.android.exoplayer2.extractor.ts.PsExtractor;
import com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection;
import com.google.android.exoplayer2.ui.AspectRatioFrameLayout;
import com.google.android.exoplayer2.util.MimeTypes;
import com.google.firebase.messaging.Constants;
import com.google.zxing.common.detector.MathUtils;
import com.microsoft.appcenter.ingestion.models.CommonProperties;
import j$.util.Comparator;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.net.URLDecoder;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.telegram.PhoneFormat.PhoneFormat;
import org.telegram.messenger.AccountInstance;
import org.telegram.messenger.AndroidUtilities;
import org.telegram.messenger.ApplicationLoader;
import org.telegram.messenger.BuildVars;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.ChatThemeController;
import org.telegram.messenger.ContactsController;
import org.telegram.messenger.DialogObject;
import org.telegram.messenger.Emoji;
import org.telegram.messenger.EmojiData;
import org.telegram.messenger.FileLoader;
import org.telegram.messenger.FileLog;
import org.telegram.messenger.ForwardingMessagesParams;
import org.telegram.messenger.ImageLocation;
import org.telegram.messenger.ImageReceiver;
import org.telegram.messenger.LocaleController;
import org.telegram.messenger.MediaController;
import org.telegram.messenger.MediaDataController;
import org.telegram.messenger.MessageObject;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.SecretChatHelper;
import org.telegram.messenger.SendMessagesHelper;
import org.telegram.messenger.SharedConfig;
import org.telegram.messenger.UserConfig;
import org.telegram.messenger.UserObject;
import org.telegram.messenger.Utilities;
import org.telegram.messenger.VideoEditedInfo;
import org.telegram.messenger.beta.R;
import org.telegram.messenger.browser.Browser;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.ResultCallback;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC;
import org.telegram.ui.ActionBar.ActionBar;
import org.telegram.ui.ActionBar.ActionBarLayout;
import org.telegram.ui.ActionBar.ActionBarMenu;
import org.telegram.ui.ActionBar.ActionBarMenuItem;
import org.telegram.ui.ActionBar.ActionBarMenuSubItem;
import org.telegram.ui.ActionBar.ActionBarPopupWindow;
import org.telegram.ui.ActionBar.AdjustPanLayoutHelper;
import org.telegram.ui.ActionBar.AlertDialog;
import org.telegram.ui.ActionBar.BackDrawable;
import org.telegram.ui.ActionBar.BaseFragment;
import org.telegram.ui.ActionBar.BottomSheet;
import org.telegram.ui.ActionBar.EmojiThemes;
import org.telegram.ui.ActionBar.SimpleTextView;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.ActionBar.ThemeDescription;
import org.telegram.ui.Adapters.MentionsAdapter;
import org.telegram.ui.Adapters.MessagesSearchAdapter;
import org.telegram.ui.Adapters.StickersAdapter;
import org.telegram.ui.AvatarPreviewer;
import org.telegram.ui.Cells.BotHelpCell;
import org.telegram.ui.Cells.BotSwitchCell;
import org.telegram.ui.Cells.ChatActionCell;
import org.telegram.ui.Cells.ChatLoadingCell;
import org.telegram.ui.Cells.ChatMessageCell;
import org.telegram.ui.Cells.ChatUnreadCell;
import org.telegram.ui.Cells.CheckBoxCell;
import org.telegram.ui.Cells.ContextLinkCell;
import org.telegram.ui.Cells.DialogCell;
import org.telegram.ui.Cells.MentionCell;
import org.telegram.ui.Cells.StickerCell;
import org.telegram.ui.Cells.TextSelectionHelper;
import org.telegram.ui.ChatActivity;
import org.telegram.ui.Components.AlertsCreator;
import org.telegram.ui.Components.AnimatedFileDrawable;
import org.telegram.ui.Components.AnimationProperties;
import org.telegram.ui.Components.AttachBotIntroTopView;
import org.telegram.ui.Components.BackButtonMenu;
import org.telegram.ui.Components.BackupImageView;
import org.telegram.ui.Components.BlurBehindDrawable;
import org.telegram.ui.Components.BluredView;
import org.telegram.ui.Components.BlurredFrameLayout;
import org.telegram.ui.Components.BotCommandsMenuView;
import org.telegram.ui.Components.Bulletin;
import org.telegram.ui.Components.BulletinFactory;
import org.telegram.ui.Components.ChatActivityEnterTopView;
import org.telegram.ui.Components.ChatActivityEnterView;
import org.telegram.ui.Components.ChatAttachAlert;
import org.telegram.ui.Components.ChatAttachAlertDocumentLayout;
import org.telegram.ui.Components.ChatAttachAlertPhotoLayout;
import org.telegram.ui.Components.ChatAvatarContainer;
import org.telegram.ui.Components.ChatBigEmptyView;
import org.telegram.ui.Components.ChatGreetingsView;
import org.telegram.ui.Components.ChatNotificationsPopupWrapper;
import org.telegram.ui.Components.ChatThemeBottomSheet;
import org.telegram.ui.Components.ChecksHintView;
import org.telegram.ui.Components.ClippingImageView;
import org.telegram.ui.Components.CounterView;
import org.telegram.ui.Components.CrossfadeDrawable;
import org.telegram.ui.Components.CubicBezierInterpolator;
import org.telegram.ui.Components.EditTextCaption;
import org.telegram.ui.Components.EmbedBottomSheet;
import org.telegram.ui.Components.EmojiView;
import org.telegram.ui.Components.ExtendedGridLayoutManager;
import org.telegram.ui.Components.FireworksOverlay;
import org.telegram.ui.Components.ForwardingPreviewView;
import org.telegram.ui.Components.FragmentContextView;
import org.telegram.ui.Components.GigagroupConvertAlert;
import org.telegram.ui.Components.HideViewAfterAnimation;
import org.telegram.ui.Components.HintView;
import org.telegram.ui.Components.ImportingAlert;
import org.telegram.ui.Components.InstantCameraView;
import org.telegram.ui.Components.InviteMembersBottomSheet;
import org.telegram.ui.Components.JoinGroupAlert;
import org.telegram.ui.Components.LayoutHelper;
import org.telegram.ui.Components.MentionsContainerView;
import org.telegram.ui.Components.MessageBackgroundDrawable;
import org.telegram.ui.Components.MotionBackgroundDrawable;
import org.telegram.ui.Components.NumberTextView;
import org.telegram.ui.Components.PhonebookShareAlert;
import org.telegram.ui.Components.PinnedLineView;
import org.telegram.ui.Components.PipRoundVideoView;
import org.telegram.ui.Components.PollVotesAlert;
import org.telegram.ui.Components.Premium.PremiumFeatureBottomSheet;
import org.telegram.ui.Components.RLottieDrawable;
import org.telegram.ui.Components.RadialProgressView;
import org.telegram.ui.Components.ReactedHeaderView;
import org.telegram.ui.Components.ReactedUsersListView;
import org.telegram.ui.Components.ReactionTabHolderView;
import org.telegram.ui.Components.Reactions.ReactionsEffectOverlay;
import org.telegram.ui.Components.Reactions.ReactionsLayoutInBubble;
import org.telegram.ui.Components.ReactionsContainerLayout;
import org.telegram.ui.Components.RecyclerAnimationScrollHelper;
import org.telegram.ui.Components.RecyclerListView;
import org.telegram.ui.Components.ReportAlert;
import org.telegram.ui.Components.SearchCounterView;
import org.telegram.ui.Components.ShareAlert;
import org.telegram.ui.Components.SizeNotifierFrameLayout;
import org.telegram.ui.Components.StickersAlert;
import org.telegram.ui.Components.TextSelectionHint;
import org.telegram.ui.Components.TextStyleSpan;
import org.telegram.ui.Components.ThemeEditorView;
import org.telegram.ui.Components.TranscribeButton;
import org.telegram.ui.Components.TranslateAlert;
import org.telegram.ui.Components.TrendingStickersAlert;
import org.telegram.ui.Components.TypefaceSpan;
import org.telegram.ui.Components.URLSpanBotCommand;
import org.telegram.ui.Components.URLSpanMono;
import org.telegram.ui.Components.URLSpanNoUnderline;
import org.telegram.ui.Components.URLSpanReplacement;
import org.telegram.ui.Components.URLSpanUserMention;
import org.telegram.ui.Components.UndoView;
import org.telegram.ui.Components.voip.VoIPHelper;
import org.telegram.ui.ContactAddActivity;
import org.telegram.ui.ContentPreviewViewer;
import org.telegram.ui.Delegates.ChatActivityMemberRequestsDelegate;
import org.telegram.ui.DialogsActivity;
import org.telegram.ui.GroupCreateActivity;
import org.telegram.ui.LocationActivity;
import org.telegram.ui.PhotoAlbumPickerActivity;
import org.telegram.ui.PhotoViewer;
import org.telegram.ui.PollCreateActivity;
/* loaded from: classes4.dex */
public class ChatActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, DialogsActivity.DialogsActivityDelegate, LocationActivity.LocationActivityDelegate, ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate {
    public static final int MODE_PINNED = 2;
    public static final int MODE_SCHEDULED = 1;
    private static final int OPTION_ADD_CONTACT = 15;
    private static final int OPTION_ADD_STICKER_TO_FAVORITES = 20;
    private static final int OPTION_ADD_TO_GIFS = 11;
    private static final int OPTION_ADD_TO_STICKERS_OR_MASKS = 9;
    private static final int OPTION_APPLY_LOCALIZATION_OR_THEME = 5;
    private static final int OPTION_CALL = 17;
    private static final int OPTION_CALL_AGAIN = 18;
    private static final int OPTION_CANCEL_SENDING = 24;
    private static final int OPTION_COPY = 3;
    private static final int OPTION_COPY_LINK = 22;
    private static final int OPTION_COPY_PHONE_NUMBER = 16;
    private static final int OPTION_DELETE = 1;
    private static final int OPTION_DELETE_STICKER_FROM_FAVORITES = 21;
    private static final int OPTION_EDIT = 12;
    private static final int OPTION_EDIT_SCHEDULE_TIME = 102;
    private static final int OPTION_FORWARD = 2;
    private static final int OPTION_HIDE_SPONSORED_MESSAGE = 31;
    private static final int OPTION_PIN = 13;
    private static final int OPTION_RATE_CALL = 19;
    private static final int OPTION_REPLY = 8;
    private static final int OPTION_REPORT_CHAT = 23;
    private static final int OPTION_RETRY = 0;
    private static final int OPTION_SAVE_TO_DOWNLOADS_OR_MUSIC = 10;
    private static final int OPTION_SAVE_TO_GALLERY = 4;
    private static final int OPTION_SAVE_TO_GALLERY2 = 7;
    private static final int OPTION_SEND_NOW = 100;
    private static final int OPTION_SHARE = 6;
    private static final int OPTION_STATISTICS = 28;
    private static final int OPTION_STOP_POLL_OR_QUIZ = 26;
    private static final int OPTION_TRANSCRIBE = 30;
    private static final int OPTION_TRANSLATE = 29;
    private static final int OPTION_UNPIN = 14;
    private static final int OPTION_UNVOTE = 25;
    private static final int OPTION_VIEW_REPLIES_OR_THREAD = 27;
    private static final int add_shortcut = 24;
    private static final int attach_gallery = 1;
    private static final int attach_photo = 0;
    private static final int attach_video = 2;
    private static final int auto_delete_timer = 26;
    private static final int bot_help = 30;
    private static final int bot_settings = 31;
    private static final int call = 32;
    private static final int change_colors = 27;
    private static final int chat_enc_timer = 13;
    private static final int chat_menu_attach = 14;
    private static final int clear_history = 15;
    private static final int copy = 10;
    private static final int delete = 12;
    private static final int delete_chat = 16;
    private static final int edit = 23;
    private static final int forward = 11;
    private static final int id_chat_compose_panel = 1000;
    private static final int mute = 18;
    public static Pattern privateMsgUrlPattern = null;
    public static Pattern publicMsgUrlPattern = null;
    private static final int report = 21;
    private static final int save_to = 25;
    private static final int search = 40;
    private static final int share_contact = 17;
    private static final int star = 22;
    private static final int text_bold = 50;
    private static final int text_italic = 51;
    private static final int text_link = 53;
    private static final int text_mono = 52;
    private static final int text_regular = 54;
    private static final int text_spoiler = 57;
    private static final int text_strike = 55;
    private static final int text_underline = 56;
    private static final int video_call = 33;
    public static Pattern voiceChatUrlPattern;
    private long activityResumeTime;
    private ActionBarMenuSubItem addContactItem;
    private TextView addToContactsButton;
    private boolean addToContactsButtonArchive;
    private TextView alertNameTextView;
    private TextView alertTextView;
    private FrameLayout alertView;
    private AnimatorSet alertViewAnimator;
    private float alertViewEnterProgress;
    private boolean allowContextBotPanel;
    public boolean allowExpandPreviewByClick;
    private boolean allowStickersPanel;
    boolean animateTo;
    private ClippingImageView animatingImageView;
    private Paint aspectPaint;
    private Path aspectPath;
    private AspectRatioFrameLayout aspectRatioFrameLayout;
    private ActionBarMenuItem attachItem;
    private String attachMenuBotStartCommand;
    private String attachMenuBotToOpen;
    private ActionBarMenuItem audioCallIconItem;
    private ChatAvatarContainer avatarContainer;
    private ChatActivity backToPreviousFragment;
    private ChatBigEmptyView bigEmptyView;
    private BluredView blurredView;
    public int blurredViewBottomOffset;
    public int blurredViewTopOffset;
    private MessageObject botButtons;
    private ArrayList<Object> botContextResults;
    private MessageObject botReplyButtons;
    private String botUser;
    private int botsCount;
    private BlurredFrameLayout bottomMessagesActionContainer;
    private FrameLayout bottomOverlay;
    private AnimatorSet bottomOverlayAnimation;
    private BlurredFrameLayout bottomOverlayChat;
    private UnreadCounterTextView bottomOverlayChatText;
    private ImageView bottomOverlayImage;
    private RadialProgressView bottomOverlayProgress;
    private TextView bottomOverlayText;
    private float bottomPanelTranslationY;
    private float bottomPanelTranslationYReverse;
    Bulletin.Delegate bulletinDelegate;
    private int canEditMessagesCount;
    private int canForwardMessagesCount;
    private int canSaveDocumentsCount;
    private int canSaveMusicCount;
    private boolean canShowPagedownButton;
    private Runnable cancelFixedPositionRunnable;
    private int cantDeleteMessagesCount;
    private int cantForwardMessagesCount;
    private int cantSaveMessagesCount;
    private ValueAnimator changeBoundAnimator;
    private ChatActivityDelegate chatActivityDelegate;
    private ChatActivityEnterTopView chatActivityEnterTopView;
    protected ChatActivityEnterView chatActivityEnterView;
    private boolean chatActivityEnterViewAnimateBeforeSending;
    private int chatActivityEnterViewAnimateFromTop;
    private ChatActivityAdapter chatAdapter;
    private ChatAttachAlert chatAttachAlert;
    private int chatEmojiViewPadding;
    private long chatEnterTime;
    protected TLRPC.ChatFull chatInfo;
    private TLRPC.ChatInvite chatInvite;
    private Runnable chatInviteRunnable;
    private long chatInviterId;
    private GridLayoutManagerFixed chatLayoutManager;
    private long chatLeaveTime;
    private ChatListItemAnimator chatListItemAnimator;
    private RecyclerListView chatListView;
    private float chatListViewPaddingTop;
    private float chatListViewPaddingTopOnlyTopViews;
    private int chatListViewPaddingVisibleOffset;
    private int chatMode;
    private ChatNotificationsPopupWrapper chatNotificationsPopupWrapper;
    private RecyclerAnimationScrollHelper chatScrollHelper;
    private ChatThemeBottomSheet chatThemeBottomSheet;
    private boolean chatWasReset;
    private TextView chatWithAdminTextView;
    private Runnable checkPaddingsRunnable;
    private boolean checkTextureViewPosition;
    private ChecksHintView checksHintView;
    private ActionBarMenuSubItem clearHistoryItem;
    private boolean clearingHistory;
    private Dialog closeChatDialog;
    private ImageView closePinned;
    private ImageView closeReportSpam;
    private int commentLoadingGuid;
    private int commentLoadingMessageId;
    private int commentMessagesLoadingGuid;
    private int commentMessagesRequestId;
    private int commentRequestId;
    private int contentPaddingTop;
    private float contentPanTranslation;
    public SizeNotifierFrameLayout contentView;
    private boolean createGroupCall;
    private int createUnreadMessageAfterId;
    private boolean createUnreadMessageAfterIdLoading;
    protected TLRPC.Chat currentChat;
    protected TLRPC.EncryptedChat currentEncryptedChat;
    private boolean currentFloatingDateOnScreen;
    private boolean currentFloatingTopIsNotMessage;
    private String currentPicturePath;
    private int currentPinnedMessageId;
    protected TLRPC.User currentUser;
    private Runnable delayedReadRunnable;
    int dialogFilterId;
    int dialogFolderId;
    private long dialog_id;
    private Long dialog_id_Long;
    private int distanceToPeer;
    private ChatMessageCell drawLaterRoundProgressCell;
    public float drawingChatLisViewYoffset;
    private ChatMessageCell dummyMessageCell;
    private AnimatorSet editButtonAnimation;
    private int editTextEnd;
    private ActionBarMenuItem editTextItem;
    private int editTextStart;
    private MessageObject editingMessageObject;
    private int editingMessageObjectReqId;
    private EmojiAnimationsOverlay emojiAnimationsOverlay;
    private View emojiButtonRed;
    private TextView emptyView;
    private FrameLayout emptyViewContainer;
    private FireworksOverlay fireworksOverlay;
    private boolean firstUnreadSent;
    private int first_unread_id;
    private boolean fixPaddingsInLayout;
    private AnimatorSet floatingDateAnimation;
    private ChatActionCell floatingDateView;
    private float floatingDateViewOffset;
    private boolean forceHistoryEmpty;
    private int forceNextPinnedMessageId;
    private boolean forceScrollToFirst;
    private boolean forceScrollToTop;
    private CharSequence formwardingNameText;
    private TextView forwardButton;
    private AnimatorSet forwardButtonAnimation;
    private HintView forwardHintView;
    private MessageObject forwardingMessage;
    private MessageObject.GroupedMessages forwardingMessageGroup;
    private ForwardingMessagesParams forwardingMessages;
    ForwardingPreviewView forwardingPreviewView;
    private ArrayList<CharSequence> foundUrls;
    private TLRPC.WebPage foundWebPage;
    private FragmentContextView fragmentContextView;
    private FragmentContextView fragmentLocationContextView;
    public boolean fragmentOpened;
    private AnimatorSet fragmentTransition;
    private boolean fromPullingDownTransition;
    private HintView fwdRestrictedBottomHint;
    private HintView fwdRestrictedTopHint;
    private HintView gifHintTextView;
    private boolean globalIgnoreLayout;
    private ChatGreetingsView greetingsViewContainer;
    private ChatObject.Call groupCall;
    private boolean hasAllMentionsLocal;
    private boolean hasBotWebView;
    private boolean hasBotsCommands;
    private boolean hasUnfavedSelected;
    private ActionBarMenuItem headerItem;
    private Runnable hideAlertViewRunnable;
    private boolean hideForwardEndReached;
    private MessageObject hintMessageObject;
    private int hintMessageType;
    private boolean ignoreAttachOnPause;
    private ChatActionCell infoTopView;
    private Animator infoTopViewAnimator;
    private long inlineReturn;
    private InstantCameraView instantCameraView;
    private boolean invalidateChatListViewTopPadding;
    private boolean invalidateMessagesVisiblePart;
    private boolean isComments;
    private boolean isFullyVisible;
    private boolean isPauseOnThemePreview;
    private boolean lastCallCheckFromServer;
    private float lastTouchY;
    private int linkSearchRequestId;
    private boolean livestream;
    private int loadedPinnedMessagesCount;
    private boolean loading;
    private boolean loadingForward;
    private boolean loadingFromOldPosition;
    private boolean loadingPinnedMessagesList;
    private int loadsCount;
    private boolean locationAlertShown;
    private boolean maybeStartTrackingSlidingView;
    private HintView mediaBanTooltip;
    public MentionsContainerView mentionContainer;
    private AnimatorSet mentionListAnimation;
    private FrameLayout mentiondownButton;
    private ValueAnimator mentiondownButtonAnimation;
    private SimpleTextView mentiondownButtonCounter;
    private ImageView mentiondownButtonImage;
    private float mentionsButtonEnterProgress;
    private RecyclerListView.OnItemClickListener mentionsOnItemClickListener;
    private ActionBarMenuSubItem menuDeleteItem;
    private long mergeDialogId;
    private Animator messageEditTextAnimator;
    public MessageEnterTransitionContainer messageEnterTransitionContainer;
    private MessagesSearchAdapter messagesSearchAdapter;
    private RecyclerListView messagesSearchListView;
    private AnimatorSet messagesSearchListViewAnimation;
    private ActionBarMenuSubItem muteItem;
    private View muteItemGap;
    private MessageObject needAnimateToMessage;
    private boolean needSelectFromMessageId;
    private int newMentionsCount;
    private int newUnreadMessageCount;
    private boolean nextScrollForce;
    private int nextScrollForcePinnedMessageId;
    private int nextScrollFromMessageId;
    private int nextScrollLoadIndex;
    private boolean nextScrollSelect;
    private int nextScrollToMessageId;
    private HintView noSoundHintView;
    private Runnable onChatMessagesLoaded;
    public Runnable onThemeChange;
    public boolean openAnimationEnded;
    private long openAnimationStartTime;
    private boolean openImport;
    protected boolean openKeyboardOnAttachMenuClose;
    private boolean openSearchKeyboard;
    private View overlayView;
    private FrameLayout pagedownButton;
    private ValueAnimator pagedownButtonAnimation;
    private CounterView pagedownButtonCounter;
    private float pagedownButtonEnterProgress;
    private ImageView pagedownButtonImage;
    private boolean pagedownButtonShowedByScroll;
    private boolean pausedOnLastMessage;
    private String pendingLinkSearchString;
    private ChatActivityMemberRequestsDelegate pendingRequestsDelegate;
    private Runnable pendingWebPageTimeoutRunnable;
    private int pinBullerinTag;
    private Bulletin pinBulletin;
    private PinchToZoomHelper pinchToZoomHelper;
    private NumberTextView pinnedCounterTextView;
    private int pinnedCounterTextViewX;
    private boolean pinnedEndReached;
    private int pinnedImageCacheType;
    private TLRPC.PhotoSize pinnedImageLocation;
    private TLObject pinnedImageLocationObject;
    private int pinnedImageSize;
    private TLRPC.PhotoSize pinnedImageThumbLocation;
    private PinnedLineView pinnedLineView;
    private AnimatorSet pinnedListAnimator;
    private ImageView pinnedListButton;
    private float pinnedMessageEnterOffset;
    private BlurredFrameLayout pinnedMessageView;
    private AnimatorSet pinnedMessageViewAnimator;
    private RadialProgressView pinnedProgress;
    private boolean pinnedProgressIsShowing;
    private ChatMessageCell pollHintCell;
    private HintView pollHintView;
    private int pollHintX;
    private int pollHintY;
    private boolean postponedScrollIsCanceled;
    private int postponedScrollMessageId;
    private int postponedScrollMinMessageId;
    private int postponedScrollToLastMessageQueryIndex;
    private TLRPC.Document preloadedGreetingsSticker;
    private boolean premiumInvoiceBot;
    private RadialProgressView progressBar;
    private AlertDialog progressDialog;
    private FrameLayout progressView;
    private View progressView2;
    private float pullingBottomOffset;
    private float pullingDownAnimateProgress;
    private ChatActivity pullingDownAnimateToActivity;
    private Animator pullingDownBackAnimator;
    private ChatPullingDownDrawable pullingDownDrawable;
    private float pullingDownOffset;
    private ValueAnimator reactionsMentionButtonAnimation;
    private float reactionsMentionButtonEnterProgress;
    private int reactionsMentionCount;
    private FrameLayout reactionsMentiondownButton;
    private CounterView reactionsMentiondownButtonCounter;
    private ImageView reactionsMentiondownButtonImage;
    private TextView replyButton;
    private AnimatorSet replyButtonAnimation;
    private ImageView replyCloseImageView;
    private ImageView replyIconImageView;
    private int replyImageCacheType;
    private TLRPC.PhotoSize replyImageLocation;
    private TLObject replyImageLocationObject;
    private int replyImageSize;
    private TLRPC.PhotoSize replyImageThumbLocation;
    private BackupImageView replyImageView;
    private View replyLineView;
    private int replyMaxReadId;
    private MessageObject replyMessageHeaderObject;
    private SimpleTextView replyNameTextView;
    private SimpleTextView replyObjectHintTextView;
    private SimpleTextView replyObjectTextView;
    private TLRPC.Chat replyOriginalChat;
    private int replyOriginalMessageId;
    private MessageObject replyingMessageObject;
    private TextView reportSpamButton;
    private AnimatorSet reportSpamViewAnimator;
    private int returnToLoadIndex;
    private int returnToMessageId;
    private AnimatorSet runningAnimation;
    private TLRPC.TL_messages_discussionMessage savedDiscussionMessage;
    private TLRPC.messages_Messages savedHistory;
    private boolean savedNoDiscussion;
    private boolean savedNoHistory;
    private HintView scheduledOrNoSoundHint;
    private AnimatorSet scrimAnimatorSet;
    private Paint scrimPaint;
    public ActionBarPopupWindow scrimPopupWindow;
    private ActionBarMenuSubItem[] scrimPopupWindowItems;
    private int scrimPopupX;
    private int scrimPopupY;
    private View scrimView;
    private ValueAnimator scrimViewAlphaAnimator;
    private String scrimViewReaction;
    private int scrollAnimationIndex;
    private boolean scrollByTouch;
    private int scrollCallbackAnimationIndex;
    private MessageObject scrollToMessage;
    private boolean scrollToThreadMessage;
    private boolean scrollToTopOnResume;
    private boolean scrollToTopUnReadOnResume;
    private boolean scrollToVideo;
    private boolean scrollingChatListView;
    private boolean scrollingFloatingDate;
    private HintView searchAsListHint;
    private boolean searchAsListHintShown;
    private View searchAsListTogglerView;
    private ImageView searchCalendarButton;
    private BlurredFrameLayout searchContainer;
    private SearchCounterView searchCountText;
    private ImageView searchDownButton;
    private ValueAnimator searchExpandAnimator;
    private float searchExpandProgress;
    private ActionBarMenuItem searchIconItem;
    private ActionBarMenuItem searchItem;
    private boolean searchItemVisible;
    private ImageView searchUpButton;
    private ImageView searchUserButton;
    private TLRPC.Chat searchingChatMessages;
    private boolean searchingForUser;
    private TLRPC.User searchingUserMessages;
    private NumberTextView selectedMessagesCountTextView;
    private MessageObject selectedObject;
    private MessageObject.GroupedMessages selectedObjectGroup;
    private MessageObject selectedObjectToEditCaption;
    private TLRPC.TL_channels_sendAsPeers sendAsPeersObj;
    private boolean setPinnedTextTranslationX;
    private boolean showAudioCallAsIcon;
    private boolean showCloseChatDialogLater;
    private boolean showPinBulletin;
    private boolean showScrollToMessageError;
    private boolean showSearchAsIcon;
    private boolean showTapForForwardingOptionsHit;
    private ChatMessageCell slidingView;
    private HintView slowModeHint;
    private boolean sponsoredMessagesAdded;
    private int startFromVideoMessageId;
    private int startLoadFromDate;
    private int startLoadFromMessageId;
    private int startLoadFromMessageIdSaved;
    private String startVideoEdit;
    private boolean startedTrackingSlidingView;
    private StickersAdapter stickersAdapter;
    private RecyclerListView stickersListView;
    private RecyclerListView.OnItemClickListener stickersOnItemClickListener;
    private FrameLayout stickersPanel;
    private ImageView stickersPanelArrow;
    private Runnable tapForForwardingOptionsHitRunnable;
    private TextSelectionHelper.ChatListTextSelectionHelper textSelectionHelper;
    private TextSelectionHint textSelectionHint;
    private boolean textSelectionHintWasShowed;
    public ThemeDelegate themeDelegate;
    private int threadMaxInboxReadId;
    private int threadMaxOutboxReadId;
    private boolean threadMessageAdded;
    private int threadMessageId;
    private MessageObject threadMessageObject;
    private ArrayList<MessageObject> threadMessageObjects;
    private int threadUnreadMessagesCount;
    private View timeItem2;
    private HintView timerHintView;
    private boolean toPullingDownTransition;
    private BlurredFrameLayout topChatPanelView;
    private float topChatPanelViewOffset;
    private UndoView topUndoView;
    private float topViewOffset;
    private int topViewWasVisible;
    private int totalPinnedMessagesCount;
    private int transitionAnimationIndex;
    private UndoView undoView;
    private MessageObject unreadMessageObject;
    private Runnable unregisterFlagSecureNoforwards;
    private Runnable unregisterFlagSecurePasscode;
    private Runnable unselectRunnable;
    Runnable updatePinnedProgressRunnable;
    Runnable updateReactionRunnable;
    private boolean userBlocked;
    protected TLRPC.UserFull userInfo;
    private FrameLayout videoPlayerContainer;
    private TextureView videoTextureView;
    private String voiceChatHash;
    private HintView voiceHintTextView;
    private Runnable waitingForCharaterEnterRunnable;
    private boolean waitingForReplyMessageLoad;
    private boolean waitingForSendingMessageLoad;
    private boolean wasManualScroll;
    private boolean wasPaused;
    private static final int[] allowedNotificationsDuringChatListAnimations = {NotificationCenter.messagesRead, NotificationCenter.threadMessagesRead, NotificationCenter.commentsRead, NotificationCenter.messagesReadEncrypted, NotificationCenter.messagesReadContent, NotificationCenter.didLoadPinnedMessages, NotificationCenter.newDraftReceived, NotificationCenter.updateMentionsCount, NotificationCenter.didUpdateConnectionState, NotificationCenter.updateInterfaces, NotificationCenter.updateDefaultSendAsPeer, NotificationCenter.closeChats, NotificationCenter.chatInfoCantLoad, NotificationCenter.userInfoDidLoad, NotificationCenter.pinnedInfoDidLoad, NotificationCenter.didSetNewWallpapper, NotificationCenter.didApplyNewTheme};
    private static boolean replacingChatActivity = false;
    private ArrayList<ChatMessageCell> chatMessageCellsCache = new ArrayList<>();
    private HashMap<MessageObject, Boolean> alreadyPlayedStickers = new HashMap<>();
    private ArrayList<View> actionModeViews = new ArrayList<>();
    private BackupImageView[] pinnedMessageImageView = new BackupImageView[2];
    private TrackingWidthSimpleTextView[] pinnedNameTextView = new TrackingWidthSimpleTextView[2];
    private SimpleTextView[] pinnedMessageTextView = new SimpleTextView[2];
    private PinnedMessageButton[] pinnedMessageButton = new PinnedMessageButton[2];
    private AnimatorSet[] pinnedNextAnimation = new AnimatorSet[2];
    private boolean pinnedMessageButtonShown = false;
    private int hideDateDelay = 500;
    private int scheduledMessagesCount = -1;
    private int reportType = -1;
    private boolean threadMessageVisible = true;
    private SparseArray<MessageObject> pendingSendMessagesDict = new SparseArray<>();
    private ArrayList<MessageObject> pendingSendMessages = new ArrayList<>();
    public ArrayList<MessageObject> animatingMessageObjects = new ArrayList<>();
    private HashMap<TLRPC.Document, Integer> animatingDocuments = new HashMap<>();
    private int scrollToPositionOnRecreate = -1;
    private int scrollToOffsetOnRecreate = 0;
    private ArrayList<MessageObject> pollsToCheck = new ArrayList<>(10);
    private ArrayList<MessageObject> reactionsToCheck = new ArrayList<>(10);
    private ArrayList<Integer> pinnedMessageIds = new ArrayList<>();
    private HashMap<Integer, MessageObject> pinnedMessageObjects = new HashMap<>();
    private SparseArray<Boolean> loadingPinnedMessages = new SparseArray<>();
    private int[] currentPinnedMessageIndex = new int[1];
    private int lastStableId = 10;
    private boolean allowContextBotPanelSecond = true;
    private int runningAnimationIndex = -1;
    private boolean paused = true;
    boolean firstOpen = true;
    private int lastLoadIndex = 1;
    private SparseArray<MessageObject>[] selectedMessagesIds = {new SparseArray<>(), new SparseArray<>()};
    private SparseArray<MessageObject>[] selectedMessagesCanCopyIds = {new SparseArray<>(), new SparseArray<>()};
    private SparseArray<MessageObject>[] selectedMessagesCanStarIds = {new SparseArray<>(), new SparseArray<>()};
    private ArrayList<Integer> waitingForLoad = new ArrayList<>();
    private boolean needRemovePreviousSameChatActivity = true;
    private int prevSetUnreadCount = Integer.MIN_VALUE;
    private ArrayList<ChatMessageCell> animateSendingViews = new ArrayList<>();
    private SparseArray<MessageObject>[] messagesDict = {new SparseArray<>(), new SparseArray<>()};
    private SparseArray<MessageObject> repliesMessagesDict = new SparseArray<>();
    private SparseArray<ArrayList<Integer>> replyMessageOwners = new SparseArray<>();
    private HashMap<String, ArrayList<MessageObject>> messagesByDays = new HashMap<>();
    protected ArrayList<MessageObject> messages = new ArrayList<>();
    private SparseArray<MessageObject> waitingForReplies = new SparseArray<>();
    private LongSparseArray<ArrayList<MessageObject>> polls = new LongSparseArray<>();
    private LongSparseArray<MessageObject.GroupedMessages> groupedMessagesMap = new LongSparseArray<>();
    private int[] maxMessageId = {Integer.MAX_VALUE, Integer.MAX_VALUE};
    private int[] minMessageId = {Integer.MIN_VALUE, Integer.MIN_VALUE};
    private int[] maxDate = {Integer.MIN_VALUE, Integer.MIN_VALUE};
    private int[] minDate = new int[2];
    private boolean[] endReached = new boolean[2];
    private boolean[] cacheEndReached = new boolean[2];
    private boolean[] forwardEndReached = {true, true};
    private boolean firstLoading = true;
    private int last_message_id = 0;
    private int startLoadFromMessageOffset = Integer.MAX_VALUE;
    private int startFromVideoTimestamp = -1;
    private boolean first = true;
    private int highlightMessageId = Integer.MAX_VALUE;
    private int scrollToMessagePosition = -10000;
    private LongSparseArray<TLRPC.BotInfo> botInfo = new LongSparseArray<>();
    private Runnable destroyTextureViewRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda39
        @Override // java.lang.Runnable
        public final void run() {
            ChatActivity.this.m1869lambda$new$0$orgtelegramuiChatActivity();
        }
    };
    private Paint actionBarBackgroundPaint = new Paint(1);
    private float scrimPaintAlpha = 0.0f;
    private float scrimViewAlpha = 1.0f;
    private int popupAnimationIndex = -1;
    private boolean scrimPopupWindowHideDimOnDismiss = true;
    private Runnable updateDeleteItemRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity.1
        @Override // java.lang.Runnable
        public void run() {
            String ramainingStr;
            if (ChatActivity.this.selectedObject != null && ChatActivity.this.menuDeleteItem != null) {
                int remaining = Math.max(0, ChatActivity.this.selectedObject.messageOwner.ttl_period - (ChatActivity.this.getConnectionsManager().getCurrentTime() - ChatActivity.this.selectedObject.messageOwner.date));
                if (remaining < 86400) {
                    ramainingStr = AndroidUtilities.formatDuration(remaining, false);
                } else {
                    ramainingStr = LocaleController.formatPluralString("Days", Math.round(remaining / 86400.0f), new Object[0]);
                }
                ChatActivity.this.menuDeleteItem.setSubtext(LocaleController.formatString("AutoDeleteIn", R.string.AutoDeleteIn, ramainingStr));
                AndroidUtilities.runOnUIThread(ChatActivity.this.updateDeleteItemRunnable, 1000L);
            }
        }
    };
    private boolean swipeBackEnabled = true;
    private Runnable fragmentTransitionRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity.2
        @Override // java.lang.Runnable
        public void run() {
            if (ChatActivity.this.fragmentTransition != null && !ChatActivity.this.fragmentTransition.isRunning()) {
                ChatActivity.this.fragmentTransition.start();
            }
        }
    };
    private KeyboardHideHelper keyboardHideHelper = new KeyboardHideHelper();
    private final DialogInterface.OnCancelListener postponedScrollCancelListener = new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda110
        @Override // android.content.DialogInterface.OnCancelListener
        public final void onCancel(DialogInterface dialogInterface) {
            ChatActivity.this.m1870lambda$new$1$orgtelegramuiChatActivity(dialogInterface);
        }
    };
    private NotificationCenter.PostponeNotificationCallback postponeNotificationsWhileLoadingCallback = new NotificationCenter.PostponeNotificationCallback() { // from class: org.telegram.ui.ChatActivity.3
        @Override // org.telegram.messenger.NotificationCenter.PostponeNotificationCallback
        public boolean needPostpone(int id, int currentAccount, Object[] args) {
            if (id == NotificationCenter.didReceiveNewMessages) {
                long did = ((Long) args[0]).longValue();
                if (ChatActivity.this.firstLoading && did == ChatActivity.this.dialog_id) {
                    return true;
                }
            }
            return false;
        }
    };
    private int fixedKeyboardHeight = -1;
    boolean pulled = false;
    private PhotoViewer.PhotoViewerProvider photoViewerProvider = new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.4
        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index, boolean needPreview) {
            return ChatActivity.this.getPlaceForPhoto(messageObject, fileLocation, needPreview, false);
        }

        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public boolean validateGroupId(long groupId) {
            MessageObject.GroupedMessages groupedMessages = (MessageObject.GroupedMessages) ChatActivity.this.groupedMessagesMap.get(groupId);
            return groupedMessages != null && groupedMessages.messages.size() > 1;
        }
    };
    private PhotoViewer.PhotoViewerProvider botContextProvider = new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.5
        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index, boolean needPreview) {
            if (index < 0 || index >= ChatActivity.this.botContextResults.size() || ChatActivity.this.mentionContainer == null || ChatActivity.this.mentionContainer.getListView() == null) {
                return null;
            }
            int count = ChatActivity.this.mentionContainer.getListView().getChildCount();
            Object result = ChatActivity.this.botContextResults.get(index);
            for (int a = 0; a < count; a++) {
                ImageReceiver imageReceiver = null;
                View view = ChatActivity.this.mentionContainer.getListView().getChildAt(a);
                if (view instanceof ContextLinkCell) {
                    ContextLinkCell cell = (ContextLinkCell) view;
                    if (cell.getResult() == result) {
                        imageReceiver = cell.getPhotoImage();
                    }
                }
                if (imageReceiver != null) {
                    int[] coords = new int[2];
                    view.getLocationInWindow(coords);
                    PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
                    int i = 0;
                    object.viewX = coords[0];
                    int i2 = coords[1];
                    if (Build.VERSION.SDK_INT < 21) {
                        i = AndroidUtilities.statusBarHeight;
                    }
                    object.viewY = i2 - i;
                    object.parentView = ChatActivity.this.mentionContainer.getListView();
                    object.imageReceiver = imageReceiver;
                    object.thumb = imageReceiver.getBitmapSafe();
                    object.radius = imageReceiver.getRoundRadius();
                    return object;
                }
            }
            return null;
        }

        @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
        public void sendButtonPressed(int index, VideoEditedInfo videoEditedInfo, boolean notify, int scheduleDate, boolean forceDocument) {
            if (index < 0 || index >= ChatActivity.this.botContextResults.size()) {
                return;
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.m1816lambda$createView$45$orgtelegramuiChatActivity((TLRPC.BotInlineResult) chatActivity.botContextResults.get(index), notify, scheduleDate);
        }
    };
    RecyclerListView.OnItemLongClickListenerExtended onItemLongClickListener = new RecyclerListView.OnItemLongClickListenerExtended() { // from class: org.telegram.ui.ChatActivity.6
        @Override // org.telegram.ui.Components.RecyclerListView.OnItemLongClickListenerExtended
        public /* synthetic */ void onLongClickRelease() {
            RecyclerListView.OnItemLongClickListenerExtended.CC.$default$onLongClickRelease(this);
        }

        @Override // org.telegram.ui.Components.RecyclerListView.OnItemLongClickListenerExtended
        public /* synthetic */ void onMove(float f, float f2) {
            RecyclerListView.OnItemLongClickListenerExtended.CC.$default$onMove(this, f, f2);
        }

        @Override // org.telegram.ui.Components.RecyclerListView.OnItemLongClickListenerExtended
        public boolean onItemClick(View view, int position, float x, float y) {
            if (!ChatActivity.this.keyboardHideHelper.disableScrolling() && !ChatActivity.this.textSelectionHelper.isTryingSelect() && !ChatActivity.this.textSelectionHelper.isSelectionMode() && !ChatActivity.this.inPreviewMode) {
                ChatActivity.this.wasManualScroll = true;
                boolean result = true;
                if (!ChatActivity.this.actionBar.isActionModeShowed() && (ChatActivity.this.reportType < 0 || ((view instanceof ChatActionCell) && (((ChatActionCell) view).getMessageObject().messageOwner.action instanceof TLRPC.TL_messageActionSetMessagesTTL)))) {
                    result = ChatActivity.this.createMenu(view, false, true, x, y);
                } else {
                    boolean outside = false;
                    if (view instanceof ChatMessageCell) {
                        outside = true ^ ((ChatMessageCell) view).isInsideBackground(x, y);
                    }
                    ChatActivity.this.processRowSelect(view, outside, x, y);
                }
                if (view instanceof ChatMessageCell) {
                    ChatActivity.this.startMultiselect(position);
                    return true;
                }
                return result;
            }
            return false;
        }
    };
    RecyclerListView.OnItemClickListenerExtended onItemClickListener = new RecyclerListView.OnItemClickListenerExtended() { // from class: org.telegram.ui.ChatActivity.8
        @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListenerExtended
        public void onItemClick(View view, int position, float x, float y) {
            if (!ChatActivity.this.inPreviewMode) {
                ChatActivity.this.wasManualScroll = true;
                if (!(view instanceof ChatActionCell) || !((ChatActionCell) view).getMessageObject().isDateObject) {
                    if (!ChatActivity.this.actionBar.isActionModeShowed() && ChatActivity.this.reportType < 0) {
                        ChatActivity.this.createMenu(view, true, false, x, y);
                        return;
                    }
                    boolean outside = false;
                    if (view instanceof ChatMessageCell) {
                        if (ChatActivity.this.textSelectionHelper.isSelected(((ChatMessageCell) view).getMessageObject())) {
                            return;
                        }
                        outside = true ^ ((ChatMessageCell) view).isInsideBackground(x, y);
                    }
                    ChatActivity.this.processRowSelect(view, outside, x, y);
                    return;
                }
                Bundle bundle = new Bundle();
                int date = ((ChatActionCell) view).getMessageObject().messageOwner.date;
                bundle.putLong("dialog_id", ChatActivity.this.dialog_id);
                bundle.putInt(CommonProperties.TYPE, 0);
                CalendarActivity calendarActivity = new CalendarActivity(bundle, 0, date);
                ChatActivity.this.presentFragment(calendarActivity);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListenerExtended
        public boolean hasDoubleTap(View view, int position) {
            TLRPC.TL_availableReaction reaction = ChatActivity.this.getMediaDataController().getReactionsMap().get(ChatActivity.this.getMediaDataController().getDoubleTapReaction());
            if (reaction != null) {
                boolean available = ChatActivity.this.dialog_id >= 0;
                if (!available && ChatActivity.this.chatInfo != null) {
                    Iterator<String> it = ChatActivity.this.chatInfo.available_reactions.iterator();
                    while (true) {
                        if (!it.hasNext()) {
                            break;
                        }
                        String s = it.next();
                        if (s.equals(reaction.reaction)) {
                            available = true;
                            break;
                        }
                    }
                }
                if (!available || !(view instanceof ChatMessageCell)) {
                    return false;
                }
                ChatMessageCell cell = (ChatMessageCell) view;
                return !cell.getMessageObject().isSending() && !cell.getMessageObject().isEditing() && cell.getMessageObject().type != 16 && !ChatActivity.this.actionBar.isActionModeShowed() && !ChatActivity.this.isSecretChat() && !ChatActivity.this.isInScheduleMode() && !cell.getMessageObject().isSponsored();
            }
            return false;
        }

        @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListenerExtended
        public void onDoubleTap(View view, int position, float x, float y) {
            boolean available;
            if (!(view instanceof ChatMessageCell) || ChatActivity.this.getParentActivity() == null || ChatActivity.this.isSecretChat() || ChatActivity.this.isInScheduleMode() || ChatActivity.this.isInPreviewMode()) {
                return;
            }
            ChatMessageCell cell = (ChatMessageCell) view;
            MessageObject primaryMessage = cell.getPrimaryMessageObject();
            boolean available2 = false;
            ReactionsEffectOverlay.removeCurrent(false);
            TLRPC.TL_availableReaction reaction = ChatActivity.this.getMediaDataController().getReactionsMap().get(ChatActivity.this.getMediaDataController().getDoubleTapReaction());
            if (reaction != null && !cell.getMessageObject().isSponsored()) {
                if (ChatActivity.this.dialog_id >= 0) {
                    available2 = true;
                }
                if (!available2 && ChatActivity.this.chatInfo != null) {
                    Iterator<String> it = ChatActivity.this.chatInfo.available_reactions.iterator();
                    while (it.hasNext()) {
                        String s = it.next();
                        if (s.equals(reaction.reaction)) {
                            available = true;
                            break;
                        }
                    }
                }
                available = available2;
                if (available) {
                    ChatActivity.this.selectReaction(primaryMessage, null, x, y, reaction, true, false);
                }
            }
        }
    };
    private final ChatScrollCallback chatScrollHelperCallback = new ChatScrollCallback();
    private final Runnable showScheduledOrNoSoundRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda40
        @Override // java.lang.Runnable
        public final void run() {
            ChatActivity.this.m1871lambda$new$5$orgtelegramuiChatActivity();
        }
    };

    @Override // org.telegram.ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public /* synthetic */ void startMusicSelectActivity() {
        ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate.CC.$default$startMusicSelectActivity(this);
    }

    static /* synthetic */ float access$12116(ChatActivity x0, float x1) {
        float f = x0.pullingDownOffset + x1;
        x0.pullingDownOffset = f;
        return f;
    }

    static /* synthetic */ int access$24010(ChatActivity x0) {
        int i = x0.newMentionsCount;
        x0.newMentionsCount = i - 1;
        return i;
    }

    static /* synthetic */ int access$26908(ChatActivity x0) {
        int i = x0.scheduledMessagesCount;
        x0.scheduledMessagesCount = i + 1;
        return i;
    }

    static /* synthetic */ int access$26912(ChatActivity x0, int x1) {
        int i = x0.scheduledMessagesCount + x1;
        x0.scheduledMessagesCount = i;
        return i;
    }

    static /* synthetic */ int access$31804(ChatActivity x0) {
        int i = x0.pinBullerinTag + 1;
        x0.pinBullerinTag = i;
        return i;
    }

    /* renamed from: lambda$new$1$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1870lambda$new$1$orgtelegramuiChatActivity(DialogInterface dialog) {
        this.postponedScrollIsCanceled = true;
        this.postponedScrollMessageId = 0;
        this.nextScrollToMessageId = 0;
        this.forceNextPinnedMessageId = 0;
        invalidateMessagesVisiblePart();
        showPinnedProgress(false);
    }

    public void deleteHistory(final int dateSelectedStart, final int dateSelectedEnd, final boolean forAll) {
        this.chatAdapter.frozenMessages.clear();
        for (int i = 0; i < this.messages.size(); i++) {
            MessageObject messageObject = this.messages.get(i);
            if (messageObject.messageOwner.date <= dateSelectedStart || messageObject.messageOwner.date >= dateSelectedEnd) {
                this.chatAdapter.frozenMessages.add(messageObject);
            }
        }
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            recyclerListView.setEmptyView(null);
        }
        if (this.chatAdapter.frozenMessages.isEmpty()) {
            showProgressView(true);
        }
        this.chatAdapter.isFrozen = true;
        this.chatAdapter.notifyDataSetChanged(true);
        getUndoView().showWithAction(this.dialog_id, 81, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda72
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1848lambda$deleteHistory$3$orgtelegramuiChatActivity(dateSelectedStart, dateSelectedEnd, forAll);
            }
        }, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda35
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1849lambda$deleteHistory$4$orgtelegramuiChatActivity();
            }
        });
    }

    /* renamed from: lambda$deleteHistory$3$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1848lambda$deleteHistory$3$orgtelegramuiChatActivity(int dateSelectedStart, int dateSelectedEnd, boolean forAll) {
        getMessagesController().deleteMessagesRange(this.dialog_id, ChatObject.isChannel(this.currentChat) ? this.dialog_id : 0L, dateSelectedStart, dateSelectedEnd, forAll, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda34
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1847lambda$deleteHistory$2$orgtelegramuiChatActivity();
            }
        });
    }

    /* renamed from: lambda$deleteHistory$2$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1847lambda$deleteHistory$2$orgtelegramuiChatActivity() {
        this.chatAdapter.frozenMessages.clear();
        this.chatAdapter.isFrozen = false;
        this.chatAdapter.notifyDataSetChanged(true);
        showProgressView(false);
    }

    /* renamed from: lambda$deleteHistory$4$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1849lambda$deleteHistory$4$orgtelegramuiChatActivity() {
        this.chatAdapter.frozenMessages.clear();
        this.chatAdapter.isFrozen = false;
        this.chatAdapter.notifyDataSetChanged(true);
        showProgressView(false);
    }

    public void showHeaderItem(boolean show) {
        if (show) {
            if (this.chatActivityEnterView.hasText() && TextUtils.isEmpty(this.chatActivityEnterView.getSlowModeTimer())) {
                ActionBarMenuItem actionBarMenuItem = this.attachItem;
                if (actionBarMenuItem != null) {
                    actionBarMenuItem.setVisibility(0);
                }
                ActionBarMenuItem actionBarMenuItem2 = this.headerItem;
                if (actionBarMenuItem2 != null) {
                    actionBarMenuItem2.setVisibility(8);
                    return;
                }
                return;
            }
            ActionBarMenuItem actionBarMenuItem3 = this.attachItem;
            if (actionBarMenuItem3 != null) {
                actionBarMenuItem3.setVisibility(8);
            }
            ActionBarMenuItem actionBarMenuItem4 = this.headerItem;
            if (actionBarMenuItem4 != null) {
                actionBarMenuItem4.setVisibility(0);
                return;
            }
            return;
        }
        ActionBarMenuItem actionBarMenuItem5 = this.attachItem;
        if (actionBarMenuItem5 != null) {
            actionBarMenuItem5.setVisibility(8);
        }
        ActionBarMenuItem actionBarMenuItem6 = this.headerItem;
        if (actionBarMenuItem6 != null) {
            actionBarMenuItem6.setVisibility(8);
        }
    }

    /* loaded from: classes4.dex */
    public interface ChatActivityDelegate {
        void onReport();

        void onUnpin(boolean z, boolean z2);

        void openReplyMessage(int i);

        void openSearch(String str);

        /* renamed from: org.telegram.ui.ChatActivity$ChatActivityDelegate$-CC */
        /* loaded from: classes4.dex */
        public final /* synthetic */ class CC {
            public static void $default$openReplyMessage(ChatActivityDelegate _this, int mid) {
            }

            public static void $default$openSearch(ChatActivityDelegate _this, String text) {
            }

            public static void $default$onUnpin(ChatActivityDelegate _this, boolean all, boolean hide) {
            }

            public static void $default$onReport(ChatActivityDelegate _this) {
            }
        }
    }

    /* loaded from: classes4.dex */
    public class UnreadCounterTextView extends View {
        boolean animatedFromBottom;
        private int circleWidth;
        int counterColor;
        private int currentCounter;
        private String currentCounterString;
        CharSequence lastText;
        private int layoutTextWidth;
        int panelBackgroundColor;
        ValueAnimator replaceAnimator;
        private int rippleColor;
        Drawable selectableBackground;
        int textColor;
        private StaticLayout textLayout;
        private StaticLayout textLayoutOut;
        private int textWidth;
        private TextPaint textPaint = new TextPaint(1);
        private Paint paint = new Paint(1);
        private RectF rect = new RectF();
        private TextPaint layoutPaint = new TextPaint(1);
        float replaceProgress = 1.0f;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public UnreadCounterTextView(Context context) {
            super(context);
            ChatActivity.this = r3;
            this.textPaint.setTextSize(AndroidUtilities.dp(13.0f));
            this.textPaint.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
            this.layoutPaint.setTextSize(AndroidUtilities.dp(15.0f));
            this.layoutPaint.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
        }

        public void setText(CharSequence text, boolean animatedFromBottom) {
            if (this.lastText == text) {
                return;
            }
            this.lastText = text;
            this.animatedFromBottom = animatedFromBottom;
            this.textLayoutOut = this.textLayout;
            this.layoutTextWidth = (int) Math.ceil(this.layoutPaint.measureText(text, 0, text.length()));
            this.textLayout = new StaticLayout(text, this.layoutPaint, this.layoutTextWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);
            setContentDescription(text);
            invalidate();
            if (this.textLayoutOut != null) {
                ValueAnimator valueAnimator = this.replaceAnimator;
                if (valueAnimator != null) {
                    valueAnimator.cancel();
                }
                this.replaceProgress = 0.0f;
                ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
                this.replaceAnimator = ofFloat;
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$UnreadCounterTextView$$ExternalSyntheticLambda0
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                        ChatActivity.UnreadCounterTextView.this.m2028x7d42c31e(valueAnimator2);
                    }
                });
                this.replaceAnimator.setDuration(150L);
                this.replaceAnimator.start();
            }
        }

        /* renamed from: lambda$setText$0$org-telegram-ui-ChatActivity$UnreadCounterTextView */
        public /* synthetic */ void m2028x7d42c31e(ValueAnimator animation) {
            this.replaceProgress = ((Float) animation.getAnimatedValue()).floatValue();
            invalidate();
        }

        public void setText(CharSequence text) {
            this.layoutTextWidth = (int) Math.ceil(this.layoutPaint.measureText(text, 0, text.length()));
            this.textLayout = new StaticLayout(text, this.layoutPaint, this.layoutTextWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);
            setContentDescription(text);
            invalidate();
        }

        @Override // android.view.View
        protected void drawableStateChanged() {
            super.drawableStateChanged();
            Drawable drawable = this.selectableBackground;
            if (drawable != null) {
                drawable.setState(getDrawableState());
            }
        }

        @Override // android.view.View
        public boolean verifyDrawable(Drawable drawable) {
            Drawable drawable2 = this.selectableBackground;
            if (drawable2 != null) {
                return drawable2 == drawable || super.verifyDrawable(drawable);
            }
            return super.verifyDrawable(drawable);
        }

        @Override // android.view.View
        public void jumpDrawablesToCurrentState() {
            super.jumpDrawablesToCurrentState();
            Drawable drawable = this.selectableBackground;
            if (drawable != null) {
                drawable.jumpToCurrentState();
            }
        }

        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent event) {
            StaticLayout staticLayout;
            int contentWidth;
            if (event.getAction() == 0 && (staticLayout = this.textLayout) != null) {
                int lineWidth = (int) Math.ceil(staticLayout.getLineWidth(0));
                if (getMeasuredWidth() != ((View) getParent()).getMeasuredWidth()) {
                    if (ChatActivity.this.botInfo != null) {
                        contentWidth = getMeasuredWidth();
                    } else {
                        int contentWidth2 = this.circleWidth;
                        contentWidth = (contentWidth2 > 0 ? contentWidth2 + AndroidUtilities.dp(8.0f) : 0) + lineWidth + AndroidUtilities.dp(48.0f);
                    }
                } else {
                    contentWidth = getMeasuredWidth() - AndroidUtilities.dp(96.0f);
                }
                int x = (getMeasuredWidth() - contentWidth) / 2;
                this.rect.set(x, (getMeasuredHeight() / 2.0f) - (contentWidth / 2.0f), x + contentWidth, (getMeasuredHeight() / 2.0f) + (contentWidth / 2.0f));
                if (!this.rect.contains(event.getX(), event.getY())) {
                    setPressed(false);
                    return false;
                }
            }
            return super.onTouchEvent(event);
        }

        public void updateCounter() {
            int newCount;
            if (ChatObject.isChannel(ChatActivity.this.currentChat) && !ChatActivity.this.currentChat.megagroup && ChatActivity.this.chatInfo != null && ChatActivity.this.chatInfo.linked_chat_id != 0) {
                TLRPC.Dialog dialog = ChatActivity.this.getMessagesController().dialogs_dict.get(-ChatActivity.this.chatInfo.linked_chat_id);
                if (dialog != null) {
                    newCount = dialog.unread_count;
                } else {
                    newCount = 0;
                }
            } else {
                newCount = 0;
            }
            if (this.currentCounter != newCount) {
                this.currentCounter = newCount;
                if (newCount == 0) {
                    this.currentCounterString = null;
                    this.circleWidth = 0;
                } else {
                    String formatWholeNumber = AndroidUtilities.formatWholeNumber(newCount, 0);
                    this.currentCounterString = formatWholeNumber;
                    this.textWidth = (int) Math.ceil(this.textPaint.measureText(formatWholeNumber));
                    int newWidth = Math.max(AndroidUtilities.dp(20.0f), AndroidUtilities.dp(12.0f) + this.textWidth);
                    if (this.circleWidth != newWidth) {
                        this.circleWidth = newWidth;
                    }
                }
                invalidate();
            }
        }

        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            Layout layout = this.textLayout;
            int color = ChatActivity.this.getThemedColor(isEnabled() ? Theme.key_chat_fieldOverlayText : Theme.key_windowBackgroundWhiteGrayText);
            if (this.textColor != color) {
                TextPaint textPaint = this.layoutPaint;
                this.textColor = color;
                textPaint.setColor(color);
            }
            int color2 = ChatActivity.this.getThemedColor(Theme.key_chat_messagePanelBackground);
            if (this.panelBackgroundColor != color2) {
                TextPaint textPaint2 = this.textPaint;
                this.panelBackgroundColor = color2;
                textPaint2.setColor(color2);
            }
            int color3 = ChatActivity.this.getThemedColor(Theme.key_chat_goDownButtonCounterBackground);
            if (this.counterColor != color3) {
                Paint paint = this.paint;
                this.counterColor = color3;
                paint.setColor(color3);
            }
            if (getParent() != null) {
                int contentWidth = getMeasuredWidth();
                int x = (getMeasuredWidth() - contentWidth) / 2;
                if (this.rippleColor != ChatActivity.this.getThemedColor(Theme.key_chat_fieldOverlayText) || this.selectableBackground == null) {
                    int dp = AndroidUtilities.dp(60.0f);
                    int themedColor = ChatActivity.this.getThemedColor(Theme.key_chat_fieldOverlayText);
                    this.rippleColor = themedColor;
                    Drawable createSimpleSelectorCircleDrawable = Theme.createSimpleSelectorCircleDrawable(dp, 0, ColorUtils.setAlphaComponent(themedColor, 26));
                    this.selectableBackground = createSimpleSelectorCircleDrawable;
                    createSimpleSelectorCircleDrawable.setCallback(this);
                }
                int start = getLeft() + x <= 0 ? x - AndroidUtilities.dp(20.0f) : x;
                int end = x + contentWidth > ((View) getParent()).getMeasuredWidth() ? x + contentWidth + AndroidUtilities.dp(20.0f) : x + contentWidth;
                this.selectableBackground.setBounds(start, (getMeasuredHeight() / 2) - (contentWidth / 2), end, (getMeasuredHeight() / 2) + (contentWidth / 2));
                this.selectableBackground.draw(canvas);
            }
            if (this.textLayout != null) {
                canvas.save();
                if (this.replaceProgress != 1.0f && this.textLayoutOut != null) {
                    int oldAlpha = this.layoutPaint.getAlpha();
                    canvas.save();
                    canvas.translate(((getMeasuredWidth() - this.textLayoutOut.getWidth()) / 2) - (this.circleWidth / 2), (getMeasuredHeight() - this.textLayout.getHeight()) / 2);
                    float f = -1.0f;
                    canvas.translate(0.0f, (this.animatedFromBottom ? -1.0f : 1.0f) * AndroidUtilities.dp(18.0f) * this.replaceProgress);
                    this.layoutPaint.setAlpha((int) (oldAlpha * (1.0f - this.replaceProgress)));
                    this.textLayoutOut.draw(canvas);
                    canvas.restore();
                    canvas.save();
                    canvas.translate(((getMeasuredWidth() - this.layoutTextWidth) / 2) - (this.circleWidth / 2), (getMeasuredHeight() - this.textLayout.getHeight()) / 2);
                    if (this.animatedFromBottom) {
                        f = 1.0f;
                    }
                    canvas.translate(0.0f, f * AndroidUtilities.dp(18.0f) * (1.0f - this.replaceProgress));
                    this.layoutPaint.setAlpha((int) (oldAlpha * this.replaceProgress));
                    this.textLayout.draw(canvas);
                    canvas.restore();
                    this.layoutPaint.setAlpha(oldAlpha);
                } else {
                    canvas.translate(((getMeasuredWidth() - this.layoutTextWidth) / 2) - (this.circleWidth / 2), (getMeasuredHeight() - this.textLayout.getHeight()) / 2);
                    this.textLayout.draw(canvas);
                }
                canvas.restore();
            }
            if (this.currentCounterString != null && layout != null) {
                int lineWidth = (int) Math.ceil(layout.getLineWidth(0));
                int x2 = ((((getMeasuredWidth() - lineWidth) / 2) + lineWidth) - (this.circleWidth / 2)) + AndroidUtilities.dp(6.0f);
                this.rect.set(x2, (getMeasuredHeight() / 2) - AndroidUtilities.dp(10.0f), this.circleWidth + x2, (getMeasuredHeight() / 2) + AndroidUtilities.dp(10.0f));
                canvas.drawRoundRect(this.rect, AndroidUtilities.dp(10.0f), AndroidUtilities.dp(10.0f), this.paint);
                canvas.drawText(this.currentCounterString, this.rect.centerX() - (this.textWidth / 2.0f), this.rect.top + AndroidUtilities.dp(14.5f), this.textPaint);
            }
        }
    }

    public void startMultiselect(int position) {
        int indexOfMessage = position - this.chatAdapter.messagesStartRow;
        if (indexOfMessage < 0 || indexOfMessage >= this.messages.size()) {
            return;
        }
        MessageObject messageObject = this.messages.get(indexOfMessage);
        final boolean unselect = this.selectedMessagesIds[0].get(messageObject.getId(), null) == null && this.selectedMessagesIds[1].get(messageObject.getId(), null) == null;
        final SparseArray<MessageObject> alreadySelectedMessagesIds = new SparseArray<>();
        for (int i = 0; i < this.selectedMessagesIds[0].size(); i++) {
            alreadySelectedMessagesIds.put(this.selectedMessagesIds[0].keyAt(i), this.selectedMessagesIds[0].valueAt(i));
        }
        for (int i2 = 0; i2 < this.selectedMessagesIds[1].size(); i2++) {
            alreadySelectedMessagesIds.put(this.selectedMessagesIds[1].keyAt(i2), this.selectedMessagesIds[1].valueAt(i2));
        }
        this.chatListView.startMultiselect(position, false, new RecyclerListView.onMultiSelectionChanged() { // from class: org.telegram.ui.ChatActivity.7
            boolean limitReached;

            @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
            public void onSelectionChanged(int position2, boolean selected, float x, float y) {
                int i3 = position2 - ChatActivity.this.chatAdapter.messagesStartRow;
                if (unselect) {
                    selected = !selected;
                }
                if (i3 >= 0 && i3 < ChatActivity.this.messages.size()) {
                    MessageObject messageObject2 = ChatActivity.this.messages.get(i3);
                    if (selected && (ChatActivity.this.selectedMessagesIds[0].indexOfKey(messageObject2.getId()) >= 0 || ChatActivity.this.selectedMessagesIds[1].indexOfKey(messageObject2.getId()) >= 0)) {
                        return;
                    }
                    if ((selected || ChatActivity.this.selectedMessagesIds[0].indexOfKey(messageObject2.getId()) >= 0 || ChatActivity.this.selectedMessagesIds[1].indexOfKey(messageObject2.getId()) >= 0) && messageObject2.contentType == 0) {
                        if (selected && ChatActivity.this.selectedMessagesIds[0].size() + ChatActivity.this.selectedMessagesIds[1].size() >= 100) {
                            this.limitReached = true;
                        } else {
                            this.limitReached = false;
                        }
                        RecyclerView.ViewHolder holder = ChatActivity.this.chatListView.findViewHolderForAdapterPosition(position2);
                        if (holder == null || !(holder.itemView instanceof ChatMessageCell)) {
                            ChatActivity.this.addToSelectedMessages(messageObject2, false);
                            ChatActivity.this.updateActionModeTitle();
                            ChatActivity.this.updateVisibleRows();
                            return;
                        }
                        ChatActivity.this.processRowSelect(holder.itemView, false, x, y);
                    }
                }
            }

            @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
            public boolean canSelect(int position2) {
                int i3 = position2 - ChatActivity.this.chatAdapter.messagesStartRow;
                if (i3 >= 0 && i3 < ChatActivity.this.messages.size()) {
                    MessageObject messageObject2 = ChatActivity.this.messages.get(i3);
                    if (messageObject2.contentType == 0) {
                        if (!unselect && alreadySelectedMessagesIds.get(messageObject2.getId(), null) == null) {
                            return true;
                        }
                        return unselect && alreadySelectedMessagesIds.get(messageObject2.getId(), null) != null;
                    }
                    return false;
                }
                return false;
            }

            @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
            public int checkPosition(int position2, boolean selectionTop) {
                MessageObject.GroupedMessages groupedMessages;
                int i3 = position2 - ChatActivity.this.chatAdapter.messagesStartRow;
                if (i3 >= 0 && i3 < ChatActivity.this.messages.size()) {
                    MessageObject messageObject2 = ChatActivity.this.messages.get(i3);
                    if (messageObject2.contentType == 0 && messageObject2.hasValidGroupId() && (groupedMessages = (MessageObject.GroupedMessages) ChatActivity.this.groupedMessagesMap.get(messageObject2.getGroupId())) != null) {
                        MessageObject messageObject1 = groupedMessages.messages.get(selectionTop ? 0 : groupedMessages.messages.size() - 1);
                        return ChatActivity.this.chatAdapter.messagesStartRow + ChatActivity.this.messages.indexOf(messageObject1);
                    }
                }
                return position2;
            }

            @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
            public boolean limitReached() {
                return this.limitReached;
            }

            @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
            public void getPaddings(int[] paddings) {
                paddings[0] = (int) ChatActivity.this.chatListViewPaddingTop;
                paddings[1] = ChatActivity.this.blurredViewBottomOffset;
            }

            @Override // org.telegram.ui.Components.RecyclerListView.onMultiSelectionChanged
            public void scrollBy(int dy) {
                ChatActivity.this.chatListView.scrollBy(0, dy);
            }
        });
    }

    /* renamed from: lambda$new$5$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1871lambda$new$5$orgtelegramuiChatActivity() {
        ChatActivityEnterView chatActivityEnterView;
        View anchor;
        if (getParentActivity() == null || this.fragmentView == null || (chatActivityEnterView = this.chatActivityEnterView) == null || (anchor = chatActivityEnterView.getSendButton()) == null || this.chatActivityEnterView.getEditField().getText().length() < 5) {
            return;
        }
        SharedConfig.increaseScheduledOrNoSuoundHintShowed();
        if (this.scheduledOrNoSoundHint == null) {
            HintView hintView = new HintView(getParentActivity(), 4, this.themeDelegate);
            this.scheduledOrNoSoundHint = hintView;
            hintView.setShowingDuration(DefaultRenderersFactory.DEFAULT_ALLOWED_VIDEO_JOINING_TIME_MS);
            this.scheduledOrNoSoundHint.setAlpha(0.0f);
            this.scheduledOrNoSoundHint.setVisibility(4);
            this.scheduledOrNoSoundHint.setText(LocaleController.getString("ScheduledOrNoSoundHint", R.string.ScheduledOrNoSoundHint));
            this.contentView.addView(this.scheduledOrNoSoundHint, LayoutHelper.createFrame(-2, -2.0f, 51, 10.0f, 0.0f, 10.0f, 0.0f));
        }
        this.scheduledOrNoSoundHint.showForView(anchor, true);
    }

    public ChatActivity(Bundle args) {
        super(args);
    }

    /* JADX WARN: Type inference failed for: r8v14 */
    /* JADX WARN: Type inference failed for: r8v18 */
    /* JADX WARN: Type inference failed for: r8v19 */
    /* JADX WARN: Type inference failed for: r8v20 */
    /* JADX WARN: Type inference failed for: r8v37 */
    /* JADX WARN: Type inference failed for: r8v38 */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean onFragmentCreate() {
        int migrated_to;
        final int encId;
        boolean z;
        String inlineQuery;
        boolean z2;
        TLRPC.Chat chat;
        int encId2;
        String inlineQuery2;
        int N;
        char c;
        String inlineQuery3;
        boolean z3;
        final long chatId = this.arguments.getLong(ChatReactionsEditActivity.KEY_CHAT_ID, 0L);
        final long userId = this.arguments.getLong("user_id", 0L);
        int encId3 = this.arguments.getInt("enc_id", 0);
        this.dialogFolderId = this.arguments.getInt("dialog_folder_id", 0);
        this.dialogFilterId = this.arguments.getInt("dialog_filter_id", 0);
        this.chatMode = this.arguments.getInt("chatMode", 0);
        this.voiceChatHash = this.arguments.getString("voicechat", null);
        this.livestream = !TextUtils.isEmpty(this.arguments.getString("livestream", null));
        this.attachMenuBotToOpen = this.arguments.getString("attach_bot", null);
        this.attachMenuBotStartCommand = this.arguments.getString("attach_bot_start_command", null);
        this.inlineReturn = this.arguments.getLong("inline_return", 0L);
        String inlineQuery4 = this.arguments.getString("inline_query");
        this.premiumInvoiceBot = this.arguments.getBoolean("premium_bot", false);
        this.startLoadFromMessageId = this.arguments.getInt(Constants.MessagePayloadKeys.MSGID_SERVER, 0);
        this.startLoadFromDate = this.arguments.getInt("start_from_date", 0);
        this.startFromVideoTimestamp = this.arguments.getInt("video_timestamp", -1);
        this.threadUnreadMessagesCount = this.arguments.getInt("unread_count", 0);
        if (this.startFromVideoTimestamp >= 0) {
            this.startFromVideoMessageId = this.startLoadFromMessageId;
        }
        this.reportType = this.arguments.getInt("report", -1);
        this.pulled = this.arguments.getBoolean("pulled", false);
        boolean historyPreloaded = this.arguments.getBoolean("historyPreloaded", false);
        int i = this.highlightMessageId;
        if (i != 0 && i != Integer.MAX_VALUE) {
            this.startLoadFromMessageId = i;
        }
        int migrated_to2 = this.arguments.getInt("migrated_to", 0);
        this.scrollToTopOnResume = this.arguments.getBoolean("scrollToTopOnResume", false);
        this.needRemovePreviousSameChatActivity = this.arguments.getBoolean("need_remove_previous_same_chat_activity", true);
        if (chatId != 0) {
            TLRPC.Chat chat2 = getMessagesController().getChat(Long.valueOf(chatId));
            this.currentChat = chat2;
            if (chat2 != null) {
                inlineQuery3 = inlineQuery4;
                encId = encId3;
                migrated_to = migrated_to2;
                z3 = true;
            } else {
                final CountDownLatch countDownLatch = new CountDownLatch(1);
                final MessagesStorage messagesStorage = getMessagesStorage();
                inlineQuery3 = inlineQuery4;
                z3 = true;
                encId = encId3;
                migrated_to = migrated_to2;
                messagesStorage.getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda89
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.m1878lambda$onFragmentCreate$6$orgtelegramuiChatActivity(messagesStorage, chatId, countDownLatch);
                    }
                });
                try {
                    countDownLatch.await();
                } catch (Exception e) {
                    FileLog.e(e);
                }
                if (this.currentChat == null) {
                    return false;
                }
                getMessagesController().putChat(this.currentChat, true);
            }
            this.dialog_id = -chatId;
            if (ChatObject.isChannel(this.currentChat)) {
                getMessagesController().startShortPoll(this.currentChat, this.classGuid, false);
                inlineQuery = inlineQuery3;
                z = z3;
            } else {
                inlineQuery = inlineQuery3;
                z = z3;
            }
        } else {
            encId = encId3;
            migrated_to = migrated_to2;
            z = 1;
            z = 1;
            z = 1;
            z = 1;
            if (userId != 0) {
                TLRPC.User user = getMessagesController().getUser(Long.valueOf(userId));
                this.currentUser = user;
                if (user == null) {
                    final MessagesStorage messagesStorage2 = getMessagesStorage();
                    final CountDownLatch countDownLatch2 = new CountDownLatch(1);
                    messagesStorage2.getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda90
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.this.m1879lambda$onFragmentCreate$7$orgtelegramuiChatActivity(messagesStorage2, userId, countDownLatch2);
                        }
                    });
                    try {
                        countDownLatch2.await();
                    } catch (Exception e2) {
                        FileLog.e(e2);
                    }
                    if (this.currentUser != null) {
                        getMessagesController().putUser(this.currentUser, true);
                    } else {
                        return false;
                    }
                }
                this.dialog_id = userId;
                String string = this.arguments.getString("botUser");
                this.botUser = string;
                inlineQuery = inlineQuery4;
                if (inlineQuery != null) {
                    getMessagesController().sendBotStart(this.currentUser, inlineQuery);
                } else if (this.premiumInvoiceBot && !TextUtils.isEmpty(string)) {
                    getMessagesController().sendBotStart(this.currentUser, this.botUser);
                    this.botUser = null;
                    this.premiumInvoiceBot = false;
                }
            } else {
                inlineQuery = inlineQuery4;
                if (encId != 0) {
                    this.currentEncryptedChat = getMessagesController().getEncryptedChat(Integer.valueOf(encId));
                    final MessagesStorage messagesStorage3 = getMessagesStorage();
                    if (this.currentEncryptedChat == null) {
                        final CountDownLatch countDownLatch3 = new CountDownLatch(1);
                        messagesStorage3.getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda87
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatActivity.this.m1880lambda$onFragmentCreate$8$orgtelegramuiChatActivity(messagesStorage3, encId, countDownLatch3);
                            }
                        });
                        try {
                            countDownLatch3.await();
                        } catch (Exception e3) {
                            FileLog.e(e3);
                        }
                        if (this.currentEncryptedChat != null) {
                            getMessagesController().putEncryptedChat(this.currentEncryptedChat, true);
                        } else {
                            return false;
                        }
                    }
                    TLRPC.User user2 = getMessagesController().getUser(Long.valueOf(this.currentEncryptedChat.user_id));
                    this.currentUser = user2;
                    if (user2 != null) {
                        c = 0;
                    } else {
                        final CountDownLatch countDownLatch4 = new CountDownLatch(1);
                        messagesStorage3.getStorageQueue().postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda91
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatActivity.this.m1881lambda$onFragmentCreate$9$orgtelegramuiChatActivity(messagesStorage3, countDownLatch4);
                            }
                        });
                        try {
                            countDownLatch4.await();
                        } catch (Exception e4) {
                            FileLog.e(e4);
                        }
                        if (this.currentUser != null) {
                            getMessagesController().putUser(this.currentUser, true);
                            c = 0;
                        } else {
                            return false;
                        }
                    }
                    this.dialog_id = DialogObject.makeEncryptedDialogId(encId);
                    int[] iArr = this.maxMessageId;
                    iArr[1] = Integer.MIN_VALUE;
                    iArr[c] = Integer.MIN_VALUE;
                    int[] iArr2 = this.minMessageId;
                    iArr2[1] = Integer.MAX_VALUE;
                    iArr2[c] = Integer.MAX_VALUE;
                } else {
                    return false;
                }
            }
        }
        this.dialog_id_Long = Long.valueOf(this.dialog_id);
        ThemeDelegate themeDelegate = new ThemeDelegate();
        this.themeDelegate = themeDelegate;
        if (themeDelegate.isThemeChangeAvailable()) {
            NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.needSetDayNightTheme);
        }
        if (this.currentUser != null && Build.VERSION.SDK_INT < 23) {
            MediaController.getInstance().startMediaObserver();
        }
        getNotificationCenter().addPostponeNotificationsCallback(this.postponeNotificationsWhileLoadingCallback);
        if (this.chatMode != z) {
            if (this.threadMessageId == 0) {
                getNotificationCenter().addObserver(this, NotificationCenter.screenshotTook);
                getNotificationCenter().addObserver(this, NotificationCenter.encryptedChatUpdated);
                getNotificationCenter().addObserver(this, NotificationCenter.messagesReadEncrypted);
                getNotificationCenter().addObserver(this, NotificationCenter.botKeyboardDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.updateMentionsCount);
                getNotificationCenter().addObserver(this, NotificationCenter.newDraftReceived);
                getNotificationCenter().addObserver(this, NotificationCenter.chatOnlineCountDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.peerSettingsDidLoad);
                getNotificationCenter().addObserver(this, NotificationCenter.didLoadPinnedMessages);
                getNotificationCenter().addObserver(this, NotificationCenter.commentsRead);
                getNotificationCenter().addObserver(this, NotificationCenter.changeRepliesCounter);
                getNotificationCenter().addObserver(this, NotificationCenter.messagesRead);
                getNotificationCenter().addObserver(this, NotificationCenter.didLoadChatInviter);
                getNotificationCenter().addObserver(this, NotificationCenter.groupCallUpdated);
            } else {
                getNotificationCenter().addObserver(this, NotificationCenter.threadMessagesRead);
            }
            getNotificationCenter().addObserver(this, NotificationCenter.removeAllMessagesFromDialog);
            getNotificationCenter().addObserver(this, NotificationCenter.messagesReadContent);
            getNotificationCenter().addObserver(this, NotificationCenter.chatSearchResultsAvailable);
            getNotificationCenter().addObserver(this, NotificationCenter.chatSearchResultsLoading);
            getNotificationCenter().addObserver(this, NotificationCenter.didUpdateMessagesViews);
            getNotificationCenter().addObserver(this, NotificationCenter.didUpdatePollResults);
            if (this.currentEncryptedChat != null) {
                getNotificationCenter().addObserver(this, NotificationCenter.didVerifyMessagesStickers);
            }
        }
        getNotificationCenter().addObserver(this, NotificationCenter.messagesDidLoad);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.emojiLoaded);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.invalidateMotionBackground);
        getNotificationCenter().addObserver(this, NotificationCenter.didUpdateConnectionState);
        getNotificationCenter().addObserver(this, NotificationCenter.updateInterfaces);
        getNotificationCenter().addObserver(this, NotificationCenter.updateDefaultSendAsPeer);
        if (this.chatMode != 2) {
            getNotificationCenter().addObserver(this, NotificationCenter.didReceiveNewMessages);
        }
        if (this.chatMode == 0) {
            getNotificationCenter().addObserver(this, NotificationCenter.didLoadSponsoredMessages);
        }
        getNotificationCenter().addObserver(this, NotificationCenter.didLoadSendAsPeers);
        getNotificationCenter().addObserver(this, NotificationCenter.closeChats);
        getNotificationCenter().addObserver(this, NotificationCenter.messagesDeleted);
        getNotificationCenter().addObserver(this, NotificationCenter.historyCleared);
        getNotificationCenter().addObserver(this, NotificationCenter.messageReceivedByServer);
        getNotificationCenter().addObserver(this, NotificationCenter.messageReceivedByAck);
        getNotificationCenter().addObserver(this, NotificationCenter.messageSendError);
        getNotificationCenter().addObserver(this, NotificationCenter.chatInfoDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.contactsDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingDidReset);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingGoingToStop);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.blockedUsersDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.fileNewChunkAvailable);
        getNotificationCenter().addObserver(this, NotificationCenter.didCreatedNewDeleteTask);
        getNotificationCenter().addObserver(this, NotificationCenter.messagePlayingDidStart);
        getNotificationCenter().addObserver(this, NotificationCenter.updateMessageMedia);
        getNotificationCenter().addObserver(this, NotificationCenter.voiceTranscriptionUpdate);
        getNotificationCenter().addObserver(this, NotificationCenter.replaceMessagesObjects);
        getNotificationCenter().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.replyMessagesDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.didReceivedWebpages);
        getNotificationCenter().addObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
        getNotificationCenter().addObserver(this, NotificationCenter.botInfoDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.chatInfoCantLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.userInfoDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.pinnedInfoDidLoad);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didSetNewWallpapper);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didApplyNewTheme);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.goingToPreviewTheme);
        getNotificationCenter().addObserver(this, NotificationCenter.channelRightsUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.audioRecordTooShort);
        getNotificationCenter().addObserver(this, NotificationCenter.didUpdateReactions);
        getNotificationCenter().addObserver(this, NotificationCenter.videoLoadingStateChanged);
        getNotificationCenter().addObserver(this, NotificationCenter.scheduledMessagesUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.diceStickersDidLoad);
        getNotificationCenter().addObserver(this, NotificationCenter.dialogDeleted);
        getNotificationCenter().addObserver(this, NotificationCenter.chatAvailableReactionsUpdated);
        getNotificationCenter().addObserver(this, NotificationCenter.dialogsUnreadReactionsCounterChanged);
        super.onFragmentCreate();
        if (this.chatMode != 2) {
            if (!this.forceHistoryEmpty) {
                this.loading = z;
            }
        } else {
            ArrayList<MessageObject> messageObjects = new ArrayList<>();
            int a = 0;
            int N2 = this.pinnedMessageIds.size();
            while (a < N2) {
                Integer id = this.pinnedMessageIds.get(a);
                MessageObject object = this.pinnedMessageObjects.get(id);
                if (object == null) {
                    inlineQuery2 = inlineQuery;
                    N = N2;
                } else {
                    inlineQuery2 = inlineQuery;
                    N = N2;
                    MessageObject o = new MessageObject(object.currentAccount, object.messageOwner, z, false);
                    o.replyMessageObject = object.replyMessageObject;
                    o.mediaExists = object.mediaExists;
                    o.attachPathExists = object.attachPathExists;
                    messageObjects.add(o);
                }
                a++;
                N2 = N;
                inlineQuery = inlineQuery2;
            }
            int loadIndex = this.lastLoadIndex;
            this.lastLoadIndex = loadIndex + 1;
            this.waitingForLoad.add(Integer.valueOf(loadIndex));
            NotificationCenter notificationCenter = getNotificationCenter();
            int i2 = NotificationCenter.messagesDidLoad;
            Object[] objArr = new Object[15];
            objArr[0] = Long.valueOf(this.dialog_id);
            objArr[z] = Integer.valueOf(messageObjects.size());
            objArr[2] = messageObjects;
            objArr[3] = false;
            objArr[4] = 0;
            objArr[5] = Integer.valueOf(this.last_message_id);
            objArr[6] = 0;
            objArr[7] = 0;
            objArr[8] = 2;
            objArr[9] = Boolean.valueOf(z);
            objArr[10] = Integer.valueOf(this.classGuid);
            objArr[11] = Integer.valueOf(loadIndex);
            objArr[12] = this.pinnedMessageIds.get(0);
            objArr[13] = 0;
            objArr[14] = 2;
            notificationCenter.postNotificationName(i2, objArr);
        }
        if (isThreadChat()) {
            if (this.highlightMessageId == this.startLoadFromMessageId) {
                this.needSelectFromMessageId = z;
            }
        } else {
            getMessagesController().setLastCreatedDialogId(this.dialog_id, this.chatMode == z, z);
            if (this.chatMode == 0) {
                if (this.currentEncryptedChat == null) {
                    getMediaDataController().loadBotKeyboard(this.dialog_id);
                }
                getMessagesController().loadPeerSettings(this.currentUser, this.currentChat);
                if (this.startLoadFromMessageId == 0) {
                    SharedPreferences sharedPreferences = MessagesController.getNotificationsSettings(this.currentAccount);
                    int messageId = sharedPreferences.getInt("diditem" + this.dialog_id, 0);
                    if (messageId != 0) {
                        this.wasManualScroll = z;
                        this.loadingFromOldPosition = z;
                        this.startLoadFromMessageOffset = sharedPreferences.getInt("diditemo" + this.dialog_id, 0);
                        this.startLoadFromMessageId = messageId;
                    }
                } else {
                    this.showScrollToMessageError = z;
                    this.needSelectFromMessageId = z;
                }
            }
        }
        boolean loadInfo = false;
        if (this.currentChat != null) {
            this.chatInfo = getMessagesController().getChatFull(this.currentChat.id);
            this.groupCall = getMessagesController().getGroupCall(this.currentChat.id, z);
            if (ChatObject.isChannel(this.currentChat) && !getMessagesController().isChannelAdminsLoaded(this.currentChat.id)) {
                getMessagesController().loadChannelAdmins(this.currentChat.id, z);
            }
            fillInviterId(false);
            if (this.chatMode != 2) {
                getMessagesStorage().loadChatInfo(this.currentChat.id, ChatObject.isChannel(this.currentChat), null, true, false, this.startLoadFromMessageId);
            }
            if (this.chatMode == 0 && this.chatInfo != null && ChatObject.isChannel(this.currentChat) && this.chatInfo.migrated_from_chat_id != 0 && !isThreadChat()) {
                this.mergeDialogId = -this.chatInfo.migrated_from_chat_id;
                this.maxMessageId[z] = this.chatInfo.migrated_from_max_id;
            }
            loadInfo = this.chatInfo == null;
            checkGroupCallJoin(false);
        } else if (this.currentUser != null) {
            if (this.chatMode != 2) {
                getMessagesController().loadUserInfo(this.currentUser, z, this.classGuid, this.startLoadFromMessageId);
            }
            loadInfo = this.userInfo == null;
        }
        boolean z4 = this.forceHistoryEmpty;
        if (z4) {
            boolean[] zArr = this.endReached;
            char c2 = z ? 1 : 0;
            char c3 = z ? 1 : 0;
            char c4 = z ? 1 : 0;
            char c5 = z ? 1 : 0;
            char c6 = z ? 1 : 0;
            char c7 = z ? 1 : 0;
            char c8 = z ? 1 : 0;
            char c9 = z ? 1 : 0;
            zArr[c2] = z;
            zArr[0] = z;
            boolean[] zArr2 = this.forwardEndReached;
            zArr2[z] = z;
            zArr2[0] = z;
            this.firstLoading = false;
        }
        if (this.chatMode != 2 && !z4) {
            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
            if (this.startLoadFromDate != 0) {
                MessagesController messagesController = getMessagesController();
                long j = this.dialog_id;
                long j2 = this.mergeDialogId;
                int i3 = this.startLoadFromDate;
                int i4 = this.classGuid;
                int i5 = this.chatMode;
                int i6 = this.threadMessageId;
                int i7 = this.replyMaxReadId;
                int i8 = this.lastLoadIndex;
                this.lastLoadIndex = i8 + 1;
                messagesController.loadMessages(j, j2, false, 30, 0, i3, true, 0, i4, 4, 0, i5, i6, i7, i8);
            } else {
                if (this.startLoadFromMessageId != 0 && (!isThreadChat() || this.startLoadFromMessageId == this.highlightMessageId)) {
                    this.startLoadFromMessageIdSaved = this.startLoadFromMessageId;
                    int migrated_to3 = migrated_to;
                    if (migrated_to3 != 0) {
                        this.mergeDialogId = migrated_to3;
                        MessagesController messagesController2 = getMessagesController();
                        long j3 = this.mergeDialogId;
                        int i9 = this.loadingFromOldPosition ? 50 : (AndroidUtilities.isTablet() || isThreadChat()) ? 30 : 20;
                        int i10 = this.startLoadFromMessageId;
                        int i11 = this.classGuid;
                        int i12 = this.chatMode;
                        int i13 = this.threadMessageId;
                        int i14 = this.replyMaxReadId;
                        int i15 = this.lastLoadIndex;
                        this.lastLoadIndex = i15 + 1;
                        messagesController2.loadMessages(j3, 0L, loadInfo, i9, i10, 0, true, 0, i11, 3, 0, i12, i13, i14, i15);
                    } else {
                        MessagesController messagesController3 = getMessagesController();
                        long j4 = this.dialog_id;
                        long j5 = this.mergeDialogId;
                        int i16 = this.loadingFromOldPosition ? 50 : (AndroidUtilities.isTablet() || isThreadChat()) ? 30 : 20;
                        int i17 = this.startLoadFromMessageId;
                        int i18 = this.classGuid;
                        int i19 = this.chatMode;
                        int i20 = this.threadMessageId;
                        int i21 = this.replyMaxReadId;
                        int i22 = this.lastLoadIndex;
                        this.lastLoadIndex = i22 + 1;
                        messagesController3.loadMessages(j4, j5, loadInfo, i16, i17, 0, true, 0, i18, 3, 0, i19, i20, i21, i22);
                    }
                }
                if (historyPreloaded) {
                    int i23 = this.lastLoadIndex;
                    int i24 = z ? 1 : 0;
                    int i25 = z ? 1 : 0;
                    int i26 = z ? 1 : 0;
                    int i27 = z ? 1 : 0;
                    int i28 = z ? 1 : 0;
                    int i29 = z ? 1 : 0;
                    int i30 = z ? 1 : 0;
                    int i31 = z ? 1 : 0;
                    this.lastLoadIndex = i23 + i24;
                } else {
                    MessagesController messagesController4 = getMessagesController();
                    long j6 = this.dialog_id;
                    long j7 = this.mergeDialogId;
                    int i32 = (AndroidUtilities.isTablet() || isThreadChat()) ? 30 : 20;
                    int i33 = this.startLoadFromMessageId;
                    int i34 = this.classGuid;
                    int i35 = this.chatMode;
                    int i36 = this.threadMessageId;
                    int i37 = this.replyMaxReadId;
                    int i38 = this.lastLoadIndex;
                    this.lastLoadIndex = i38 + 1;
                    messagesController4.loadMessages(j6, j7, loadInfo, i32, i33, 0, true, 0, i34, 2, 0, i35, i36, i37, i38);
                }
            }
        }
        if (this.chatMode == 0 && !isThreadChat()) {
            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
            MessagesController messagesController5 = getMessagesController();
            long j8 = this.dialog_id;
            long j9 = this.mergeDialogId;
            int i39 = this.classGuid;
            int i40 = this.threadMessageId;
            int i41 = this.replyMaxReadId;
            int i42 = this.lastLoadIndex;
            this.lastLoadIndex = i42 + 1;
            messagesController5.loadMessages(j8, j9, false, 1, 0, 0, true, 0, i39, 2, 0, 1, i40, i41, i42);
        }
        if (this.chatMode == 0) {
            if (userId != 0 && this.currentUser.bot) {
                z2 = false;
                getMediaDataController().loadBotInfo(userId, userId, true, this.classGuid);
            } else {
                z2 = false;
                z2 = false;
                if (this.chatInfo instanceof TLRPC.TL_chatFull) {
                    int a2 = 0;
                    while (a2 < this.chatInfo.participants.participants.size()) {
                        TLRPC.ChatParticipant participant = this.chatInfo.participants.participants.get(a2);
                        TLRPC.User user3 = getMessagesController().getUser(Long.valueOf(participant.user_id));
                        if (user3 != null && user3.bot) {
                            encId2 = encId;
                            getMediaDataController().loadBotInfo(user3.id, -this.chatInfo.id, true, this.classGuid);
                        } else {
                            encId2 = encId;
                        }
                        a2++;
                        encId = encId2;
                    }
                }
            }
            if (AndroidUtilities.isTablet()) {
                NotificationCenter notificationCenter2 = getNotificationCenter();
                int i43 = NotificationCenter.openedChatChanged;
                Object[] objArr2 = new Object[2];
                Long valueOf = Long.valueOf(this.dialog_id);
                char c10 = z2 ? 1 : 0;
                char c11 = z2 ? 1 : 0;
                char c12 = z2 ? 1 : 0;
                char c13 = z2 ? 1 : 0;
                char c14 = z2 ? 1 : 0;
                objArr2[c10] = valueOf;
                objArr2[1] = false;
                notificationCenter2.postNotificationName(i43, objArr2);
            }
            TLRPC.User user4 = this.currentUser;
            if (user4 != null && !UserObject.isReplyUser(user4)) {
                this.userBlocked = getMessagesController().blockePeers.indexOfKey(this.currentUser.id) >= 0;
            }
            TLRPC.EncryptedChat encryptedChat = this.currentEncryptedChat;
            if (encryptedChat != null && AndroidUtilities.getMyLayerVersion(encryptedChat.layer) != SecretChatHelper.CURRENT_SECRET_CHAT_LAYER) {
                getSecretChatHelper().sendNotifyLayerMessage(this.currentEncryptedChat, null);
            }
        } else {
            z2 = false;
        }
        TLRPC.ChatFull chatFull = this.chatInfo;
        if (chatFull != null && chatFull.linked_chat_id != 0 && (chat = getMessagesController().getChat(Long.valueOf(this.chatInfo.linked_chat_id))) != null && chat.megagroup) {
            getMessagesController().startShortPoll(chat, this.classGuid, z2);
        }
        TLRPC.ChatInvite chatInvite = this.chatInvite;
        if (chatInvite != null) {
            int timeout = chatInvite.expires - getConnectionsManager().getCurrentTime();
            if (timeout < 0) {
                timeout = 10;
            }
            Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda42
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1877lambda$onFragmentCreate$12$orgtelegramuiChatActivity();
                }
            };
            this.chatInviteRunnable = runnable;
            AndroidUtilities.runOnUIThread(runnable, timeout * 1000);
            return true;
        }
        return true;
    }

    /* renamed from: lambda$onFragmentCreate$6$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1878lambda$onFragmentCreate$6$orgtelegramuiChatActivity(MessagesStorage messagesStorage, long chatId, CountDownLatch countDownLatch) {
        this.currentChat = messagesStorage.getChat(chatId);
        countDownLatch.countDown();
    }

    /* renamed from: lambda$onFragmentCreate$7$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1879lambda$onFragmentCreate$7$orgtelegramuiChatActivity(MessagesStorage messagesStorage, long userId, CountDownLatch countDownLatch) {
        this.currentUser = messagesStorage.getUser(userId);
        countDownLatch.countDown();
    }

    /* renamed from: lambda$onFragmentCreate$8$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1880lambda$onFragmentCreate$8$orgtelegramuiChatActivity(MessagesStorage messagesStorage, int encId, CountDownLatch countDownLatch) {
        this.currentEncryptedChat = messagesStorage.getEncryptedChat(encId);
        countDownLatch.countDown();
    }

    /* renamed from: lambda$onFragmentCreate$9$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1881lambda$onFragmentCreate$9$orgtelegramuiChatActivity(MessagesStorage messagesStorage, CountDownLatch countDownLatch) {
        this.currentUser = messagesStorage.getUser(this.currentEncryptedChat.user_id);
        countDownLatch.countDown();
    }

    /* renamed from: lambda$onFragmentCreate$12$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1877lambda$onFragmentCreate$12$orgtelegramuiChatActivity() {
        this.chatInviteRunnable = null;
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        if (ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup) {
            builder.setMessage(LocaleController.getString("JoinByPeekChannelText", R.string.JoinByPeekChannelText));
            builder.setTitle(LocaleController.getString("JoinByPeekChannelTitle", R.string.JoinByPeekChannelTitle));
        } else {
            builder.setMessage(LocaleController.getString("JoinByPeekGroupText", R.string.JoinByPeekGroupText));
            builder.setTitle(LocaleController.getString("JoinByPeekGroupTitle", R.string.JoinByPeekGroupTitle));
        }
        builder.setPositiveButton(LocaleController.getString("JoinByPeekJoin", R.string.JoinByPeekJoin), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda177
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.m1875lambda$onFragmentCreate$10$orgtelegramuiChatActivity(dialogInterface, i);
            }
        });
        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda178
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.m1876lambda$onFragmentCreate$11$orgtelegramuiChatActivity(dialogInterface, i);
            }
        });
        showDialog(builder.create());
    }

    /* renamed from: lambda$onFragmentCreate$10$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1875lambda$onFragmentCreate$10$orgtelegramuiChatActivity(DialogInterface dialogInterface, int i) {
        UnreadCounterTextView unreadCounterTextView = this.bottomOverlayChatText;
        if (unreadCounterTextView != null) {
            unreadCounterTextView.callOnClick();
        }
    }

    /* renamed from: lambda$onFragmentCreate$11$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1876lambda$onFragmentCreate$11$orgtelegramuiChatActivity(DialogInterface dialogInterface, int i) {
        finishFragment();
    }

    private void fillInviterId(boolean load) {
        TLRPC.Chat chat = this.currentChat;
        if (chat == null || this.chatInfo == null || ChatObject.isNotInChat(chat) || this.currentChat.creator) {
            return;
        }
        if (this.chatInfo.inviterId != 0) {
            this.chatInviterId = this.chatInfo.inviterId;
            return;
        }
        if (this.chatInfo.participants != null) {
            if (this.chatInfo.participants.self_participant != null) {
                this.chatInviterId = this.chatInfo.participants.self_participant.inviter_id;
                return;
            }
            long selfId = getUserConfig().getClientUserId();
            int N = this.chatInfo.participants.participants.size();
            for (int a = 0; a < N; a++) {
                TLRPC.ChatParticipant participant = this.chatInfo.participants.participants.get(a);
                if (participant.user_id == selfId) {
                    this.chatInviterId = participant.inviter_id;
                    return;
                }
            }
        }
        if (load && this.chatInviterId == 0) {
            getMessagesController().checkChatInviter(this.currentChat.id, false);
        }
    }

    private void hideUndoViews() {
        UndoView undoView = this.undoView;
        if (undoView != null) {
            undoView.hide(true, 0);
        }
        Bulletin bulletin = this.pinBulletin;
        if (bulletin != null) {
            bulletin.hide(false, 0L);
        }
        UndoView undoView2 = this.topUndoView;
        if (undoView2 != null) {
            undoView2.hide(true, 0);
        }
    }

    public int getOtherSameChatsDiff() {
        if (this.parentLayout == null || this.parentLayout.fragmentsStack == null) {
            return 0;
        }
        int cur = this.parentLayout.fragmentsStack.indexOf(this);
        if (cur == -1) {
            cur = this.parentLayout.fragmentsStack.size();
        }
        int i = cur;
        int a = 0;
        while (true) {
            if (a >= this.parentLayout.fragmentsStack.size()) {
                break;
            }
            BaseFragment fragment = this.parentLayout.fragmentsStack.get(a);
            if (fragment != this && (fragment instanceof ChatActivity)) {
                ChatActivity chatActivity = (ChatActivity) fragment;
                if (chatActivity.dialog_id == this.dialog_id) {
                    i = a;
                    break;
                }
            }
            a++;
        }
        int a2 = i - cur;
        return a2;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onFragmentDestroy() {
        super.onFragmentDestroy();
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.onDestroy();
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.onDestroy();
        }
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
            this.mentionContainer.getAdapter().onDestroy();
        }
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.dismissInternal();
        }
        getNotificationCenter().onAnimationFinish(this.transitionAnimationIndex);
        getNotificationCenter().onAnimationFinish(this.scrollAnimationIndex);
        getNotificationCenter().onAnimationFinish(this.scrollCallbackAnimationIndex);
        hideUndoViews();
        Runnable runnable = this.chatInviteRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
            this.chatInviteRunnable = null;
        }
        getNotificationCenter().removePostponeNotificationsCallback(this.postponeNotificationsWhileLoadingCallback);
        getMessagesController().setLastCreatedDialogId(this.dialog_id, this.chatMode == 1, false);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesDidLoad);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.emojiLoaded);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.invalidateMotionBackground);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdateConnectionState);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateInterfaces);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateDefaultSendAsPeer);
        getNotificationCenter().removeObserver(this, NotificationCenter.didReceiveNewMessages);
        getNotificationCenter().removeObserver(this, NotificationCenter.closeChats);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesRead);
        getNotificationCenter().removeObserver(this, NotificationCenter.threadMessagesRead);
        getNotificationCenter().removeObserver(this, NotificationCenter.commentsRead);
        getNotificationCenter().removeObserver(this, NotificationCenter.changeRepliesCounter);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesDeleted);
        getNotificationCenter().removeObserver(this, NotificationCenter.historyCleared);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageReceivedByServer);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageReceivedByAck);
        getNotificationCenter().removeObserver(this, NotificationCenter.messageSendError);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatInfoDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadChatInviter);
        getNotificationCenter().removeObserver(this, NotificationCenter.groupCallUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.encryptedChatUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesReadEncrypted);
        getNotificationCenter().removeObserver(this, NotificationCenter.removeAllMessagesFromDialog);
        getNotificationCenter().removeObserver(this, NotificationCenter.contactsDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingDidReset);
        getNotificationCenter().removeObserver(this, NotificationCenter.screenshotTook);
        getNotificationCenter().removeObserver(this, NotificationCenter.blockedUsersDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.fileNewChunkAvailable);
        getNotificationCenter().removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingDidStart);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingGoingToStop);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateMessageMedia);
        getNotificationCenter().removeObserver(this, NotificationCenter.voiceTranscriptionUpdate);
        getNotificationCenter().removeObserver(this, NotificationCenter.replaceMessagesObjects);
        getNotificationCenter().removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.replyMessagesDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.didReceivedWebpages);
        getNotificationCenter().removeObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagesReadContent);
        getNotificationCenter().removeObserver(this, NotificationCenter.botInfoDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.botKeyboardDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatSearchResultsAvailable);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatSearchResultsLoading);
        getNotificationCenter().removeObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdateMessagesViews);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatInfoCantLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadPinnedMessages);
        getNotificationCenter().removeObserver(this, NotificationCenter.peerSettingsDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.newDraftReceived);
        getNotificationCenter().removeObserver(this, NotificationCenter.userInfoDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.pinnedInfoDidLoad);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didSetNewWallpapper);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didApplyNewTheme);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.goingToPreviewTheme);
        getNotificationCenter().removeObserver(this, NotificationCenter.channelRightsUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.updateMentionsCount);
        getNotificationCenter().removeObserver(this, NotificationCenter.audioRecordTooShort);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdatePollResults);
        getNotificationCenter().removeObserver(this, NotificationCenter.didUpdateReactions);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatOnlineCountDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.videoLoadingStateChanged);
        getNotificationCenter().removeObserver(this, NotificationCenter.scheduledMessagesUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.diceStickersDidLoad);
        getNotificationCenter().removeObserver(this, NotificationCenter.dialogDeleted);
        getNotificationCenter().removeObserver(this, NotificationCenter.chatAvailableReactionsUpdated);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadSponsoredMessages);
        getNotificationCenter().removeObserver(this, NotificationCenter.didLoadSendAsPeers);
        getNotificationCenter().removeObserver(this, NotificationCenter.dialogsUnreadReactionsCounterChanged);
        if (this.currentEncryptedChat != null) {
            getNotificationCenter().removeObserver(this, NotificationCenter.didVerifyMessagesStickers);
        }
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.needSetDayNightTheme);
        if (this.chatMode == 0 && AndroidUtilities.isTablet()) {
            getNotificationCenter().postNotificationName(NotificationCenter.openedChatChanged, Long.valueOf(this.dialog_id), true);
        }
        if (this.currentUser != null) {
            MediaController.getInstance().stopMediaObserver();
        }
        Runnable runnable2 = this.unregisterFlagSecureNoforwards;
        if (runnable2 != null) {
            runnable2.run();
            this.unregisterFlagSecureNoforwards = null;
        }
        Runnable runnable3 = this.unregisterFlagSecurePasscode;
        if (runnable3 != null) {
            runnable3.run();
            this.unregisterFlagSecurePasscode = null;
        }
        if (this.currentUser != null) {
            getMessagesController().cancelLoadFullUser(this.currentUser.id);
        }
        AndroidUtilities.removeAdjustResize(getParentActivity(), this.classGuid);
        StickersAdapter stickersAdapter = this.stickersAdapter;
        if (stickersAdapter != null) {
            stickersAdapter.onDestroy();
        }
        ChatAttachAlert chatAttachAlert2 = this.chatAttachAlert;
        if (chatAttachAlert2 != null) {
            chatAttachAlert2.onDestroy();
        }
        AndroidUtilities.unlockOrientation(getParentActivity());
        if (ChatObject.isChannel(this.currentChat)) {
            getMessagesController().startShortPoll(this.currentChat, this.classGuid, true);
            TLRPC.ChatFull chatFull = this.chatInfo;
            if (chatFull != null && chatFull.linked_chat_id != 0) {
                TLRPC.Chat chat = getMessagesController().getChat(Long.valueOf(this.chatInfo.linked_chat_id));
                getMessagesController().startShortPoll(chat, this.classGuid, true);
            }
        }
        TextSelectionHelper.ChatListTextSelectionHelper chatListTextSelectionHelper = this.textSelectionHelper;
        if (chatListTextSelectionHelper != null) {
            chatListTextSelectionHelper.clear();
        }
        ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
        if (chatListItemAnimator != null) {
            chatListItemAnimator.onDestroy();
        }
        PinchToZoomHelper pinchToZoomHelper = this.pinchToZoomHelper;
        if (pinchToZoomHelper != null) {
            pinchToZoomHelper.clear();
        }
        this.chatThemeBottomSheet = null;
        ActionBarLayout parentLayout = getParentLayout();
        if (parentLayout != null && parentLayout.fragmentsStack != null) {
            BackButtonMenu.clearPulledDialogs(this, parentLayout.fragmentsStack.indexOf(this) - (!replacingChatActivity ? 1 : 0));
        }
        replacingChatActivity = false;
    }

    /* JADX WARN: Removed duplicated region for block: B:303:0x0bef  */
    /* JADX WARN: Removed duplicated region for block: B:307:0x0c05  */
    /* JADX WARN: Removed duplicated region for block: B:321:0x0c90  */
    /* JADX WARN: Removed duplicated region for block: B:324:0x0dce  */
    /* JADX WARN: Removed duplicated region for block: B:327:0x0df8  */
    /* JADX WARN: Removed duplicated region for block: B:344:0x1116  */
    /* JADX WARN: Removed duplicated region for block: B:347:0x1191  */
    /* JADX WARN: Removed duplicated region for block: B:350:0x1242  */
    /* JADX WARN: Removed duplicated region for block: B:353:0x129a  */
    /* JADX WARN: Removed duplicated region for block: B:361:0x1493  */
    /* JADX WARN: Removed duplicated region for block: B:362:0x1495  */
    /* JADX WARN: Removed duplicated region for block: B:365:0x14ad  */
    /* JADX WARN: Removed duplicated region for block: B:366:0x14b0  */
    /* JADX WARN: Removed duplicated region for block: B:369:0x150a  */
    /* JADX WARN: Removed duplicated region for block: B:370:0x1529  */
    /* JADX WARN: Removed duplicated region for block: B:373:0x15dc  */
    /* JADX WARN: Removed duplicated region for block: B:374:0x15fb  */
    /* JADX WARN: Removed duplicated region for block: B:377:0x1718  */
    /* JADX WARN: Removed duplicated region for block: B:378:0x1739  */
    /* JADX WARN: Removed duplicated region for block: B:381:0x1823  */
    /* JADX WARN: Removed duplicated region for block: B:384:0x1975  */
    /* JADX WARN: Removed duplicated region for block: B:393:0x19b7  */
    /* JADX WARN: Removed duplicated region for block: B:401:0x1a86  */
    /* JADX WARN: Removed duplicated region for block: B:405:0x1bb6  */
    /* JADX WARN: Removed duplicated region for block: B:415:0x1d03  */
    /* JADX WARN: Removed duplicated region for block: B:425:0x204f  */
    /* JADX WARN: Removed duplicated region for block: B:428:0x2226  */
    /* JADX WARN: Removed duplicated region for block: B:447:0x22de  */
    /* JADX WARN: Removed duplicated region for block: B:449:0x22ee  */
    /* JADX WARN: Removed duplicated region for block: B:452:0x2342  */
    /* JADX WARN: Removed duplicated region for block: B:455:0x235f  */
    /* JADX WARN: Removed duplicated region for block: B:462:0x2387  */
    /* JADX WARN: Removed duplicated region for block: B:465:0x2392  */
    /* JADX WARN: Removed duplicated region for block: B:466:0x23a2  */
    /* JADX WARN: Removed duplicated region for block: B:469:0x2406  */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public android.view.View createView(final android.content.Context r54) {
        /*
            Method dump skipped, instructions count: 9233
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.createView(android.content.Context):android.view.View");
    }

    /* renamed from: org.telegram.ui.ChatActivity$10 */
    /* loaded from: classes4.dex */
    public class AnonymousClass10 extends ActionBar.ActionBarMenuOnItemClick {
        final /* synthetic */ Context val$context;

        AnonymousClass10(Context context) {
            ChatActivity.this = this$0;
            this.val$context = context;
        }

        @Override // org.telegram.ui.ActionBar.ActionBar.ActionBarMenuOnItemClick
        public void onItemClick(final int id) {
            if (id == -1) {
                if (ChatActivity.this.actionBar.isActionModeShowed()) {
                    ChatActivity.this.clearSelectionMode();
                    return;
                } else if (!ChatActivity.this.checkRecordLocked(true)) {
                    ChatActivity.this.finishFragment();
                    return;
                } else {
                    return;
                }
            }
            boolean z = false;
            if (id == 10) {
                String str = "";
                long previousUid = 0;
                for (int a = 1; a >= 0; a--) {
                    ArrayList<Integer> ids = new ArrayList<>();
                    for (int b = 0; b < ChatActivity.this.selectedMessagesCanCopyIds[a].size(); b++) {
                        ids.add(Integer.valueOf(ChatActivity.this.selectedMessagesCanCopyIds[a].keyAt(b)));
                    }
                    if (ChatActivity.this.currentEncryptedChat == null) {
                        Collections.sort(ids);
                    } else {
                        Collections.sort(ids, Collections.reverseOrder());
                    }
                    for (int b2 = 0; b2 < ids.size(); b2++) {
                        Integer messageId = ids.get(b2);
                        MessageObject messageObject = (MessageObject) ChatActivity.this.selectedMessagesCanCopyIds[a].get(messageId.intValue());
                        if (str.length() != 0) {
                            str = str + "\n\n";
                        }
                        StringBuilder sb = new StringBuilder();
                        sb.append(str);
                        sb.append(ChatActivity.this.getMessageContent(messageObject, previousUid, ids.size() != 1 && (ChatActivity.this.currentUser == null || !ChatActivity.this.currentUser.self)));
                        str = sb.toString();
                        previousUid = messageObject.getFromChatId();
                    }
                }
                if (str.length() != 0) {
                    AndroidUtilities.addToClipboard(str);
                    ChatActivity.this.undoView.showWithAction(0L, 58, (Runnable) null);
                }
                ChatActivity.this.clearSelectionMode();
            } else if (id == 12) {
                if (ChatActivity.this.getParentActivity() != null) {
                    ChatActivity.this.createDeleteMessagesAlert(null, null);
                }
            } else if (id == 11) {
                ChatActivity.this.openForward(true);
            } else if (id == 25) {
                ArrayList<MessageObject> messageObjects = new ArrayList<>();
                for (int a2 = 1; a2 >= 0; a2--) {
                    for (int b3 = 0; b3 < ChatActivity.this.selectedMessagesIds[a2].size(); b3++) {
                        messageObjects.add((MessageObject) ChatActivity.this.selectedMessagesIds[a2].valueAt(b3));
                    }
                    ChatActivity.this.selectedMessagesIds[a2].clear();
                    ChatActivity.this.selectedMessagesCanCopyIds[a2].clear();
                    ChatActivity.this.selectedMessagesCanStarIds[a2].clear();
                }
                if (ChatActivity.this.canSaveMusicCount > 0) {
                    z = true;
                }
                final boolean isMusic = z;
                ChatActivity.this.hideActionMode();
                ChatActivity.this.updatePinnedMessageView(true);
                ChatActivity.this.updateVisibleRows();
                MediaController.saveFilesFromMessages(ChatActivity.this.getParentActivity(), ChatActivity.this.getAccountInstance(), messageObjects, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$10$$ExternalSyntheticLambda2
                    @Override // org.telegram.messenger.MessagesStorage.IntCallback
                    public final void run(int i) {
                        ChatActivity.AnonymousClass10.this.m1984lambda$onItemClick$0$orgtelegramuiChatActivity$10(isMusic, i);
                    }
                });
            } else if (id == 13) {
                if (ChatActivity.this.getParentActivity() == null) {
                    return;
                }
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.showDialog(AlertsCreator.createTTLAlert(chatActivity.getParentActivity(), ChatActivity.this.currentEncryptedChat, ChatActivity.this.themeDelegate).create());
            } else if (id == 15 || id == 16 || id == 26) {
                if (ChatActivity.this.getParentActivity() == null) {
                    return;
                }
                final boolean canDeleteHistory = ChatActivity.this.chatInfo != null && ChatActivity.this.chatInfo.can_delete_channel;
                if (id == 26 || (id == 15 && ChatActivity.this.currentEncryptedChat == null && ((ChatActivity.this.currentUser != null && !UserObject.isUserSelf(ChatActivity.this.currentUser) && !UserObject.isDeleted(ChatActivity.this.currentUser)) || (ChatActivity.this.chatInfo != null && ChatActivity.this.chatInfo.can_delete_channel)))) {
                    ChatActivity chatActivity2 = ChatActivity.this;
                    AlertsCreator.createClearDaysDialogAlert(chatActivity2, -1, chatActivity2.currentUser, ChatActivity.this.currentChat, canDeleteHistory, new AnonymousClass1(canDeleteHistory), ChatActivity.this.getResourceProvider());
                    return;
                }
                ChatActivity chatActivity3 = ChatActivity.this;
                AlertsCreator.createClearOrDeleteDialogAlert(chatActivity3, id == 15, chatActivity3.currentChat, ChatActivity.this.currentUser, ChatActivity.this.currentEncryptedChat != null, true, canDeleteHistory, new MessagesStorage.BooleanCallback() { // from class: org.telegram.ui.ChatActivity$10$$ExternalSyntheticLambda1
                    @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
                    public final void run(boolean z2) {
                        ChatActivity.AnonymousClass10.this.m1985lambda$onItemClick$1$orgtelegramuiChatActivity$10(id, canDeleteHistory, z2);
                    }
                }, ChatActivity.this.themeDelegate);
            } else if (id == 17) {
                if (ChatActivity.this.currentUser != null && ChatActivity.this.getParentActivity() != null) {
                    if (ChatActivity.this.addToContactsButton.getTag() != null) {
                        ChatActivity chatActivity4 = ChatActivity.this;
                        chatActivity4.shareMyContact(((Integer) chatActivity4.addToContactsButton.getTag()).intValue(), null);
                        return;
                    }
                    Bundle args = new Bundle();
                    args.putLong("user_id", ChatActivity.this.currentUser.id);
                    args.putBoolean("addContact", true);
                    ChatActivity.this.presentFragment(new ContactAddActivity(args));
                }
            } else if (id == 18) {
                ChatActivity.this.toggleMute(false);
            } else if (id == 24) {
                try {
                    ChatActivity.this.getMediaDataController().installShortcut(ChatActivity.this.currentUser.id);
                } catch (Exception e) {
                    FileLog.e(e);
                }
            } else if (id == 21) {
                Activity parentActivity = ChatActivity.this.getParentActivity();
                long j = ChatActivity.this.dialog_id;
                ChatActivity chatActivity5 = ChatActivity.this;
                AlertsCreator.createReportAlert(parentActivity, j, 0, chatActivity5, chatActivity5.themeDelegate, null);
            } else if (id == 22) {
                for (int a3 = 0; a3 < 2; a3++) {
                    for (int b4 = 0; b4 < ChatActivity.this.selectedMessagesCanStarIds[a3].size(); b4++) {
                        MessageObject msg = (MessageObject) ChatActivity.this.selectedMessagesCanStarIds[a3].valueAt(b4);
                        ChatActivity.this.getMediaDataController().addRecentSticker(2, msg, msg.getDocument(), (int) (System.currentTimeMillis() / 1000), !ChatActivity.this.hasUnfavedSelected);
                    }
                }
                ChatActivity.this.clearSelectionMode();
            } else if (id == 23) {
                MessageObject messageObject2 = null;
                for (int a4 = 1; a4 >= 0; a4--) {
                    if (messageObject2 == null && ChatActivity.this.selectedMessagesIds[a4].size() == 1) {
                        ArrayList<Integer> ids2 = new ArrayList<>();
                        for (int b5 = 0; b5 < ChatActivity.this.selectedMessagesIds[a4].size(); b5++) {
                            ids2.add(Integer.valueOf(ChatActivity.this.selectedMessagesIds[a4].keyAt(b5)));
                        }
                        messageObject2 = (MessageObject) ChatActivity.this.messagesDict[a4].get(ids2.get(0).intValue());
                    }
                    ChatActivity.this.selectedMessagesIds[a4].clear();
                    ChatActivity.this.selectedMessagesCanCopyIds[a4].clear();
                    ChatActivity.this.selectedMessagesCanStarIds[a4].clear();
                }
                ChatActivity.this.startEditingMessageObject(messageObject2);
                ChatActivity.this.hideActionMode();
                ChatActivity.this.updatePinnedMessageView(true);
                ChatActivity.this.updateVisibleRows();
            } else if (id == 14) {
                ActionBarMenuSubItem attach = new ActionBarMenuSubItem(this.val$context, false, true, true, ChatActivity.this.getResourceProvider());
                attach.setTextAndIcon(LocaleController.getString("AttachMenu", R.string.AttachMenu), R.drawable.input_attach);
                attach.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$10$$ExternalSyntheticLambda0
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ChatActivity.AnonymousClass10.this.m1986lambda$onItemClick$2$orgtelegramuiChatActivity$10(view);
                    }
                });
                ChatActivity.this.headerItem.toggleSubMenu(attach, ChatActivity.this.attachItem);
            } else if (id == 30) {
                ChatActivity.this.getSendMessagesHelper().sendMessage("/help", ChatActivity.this.dialog_id, null, null, null, false, null, null, null, true, 0, null);
            } else if (id == 31) {
                ChatActivity.this.getSendMessagesHelper().sendMessage("/settings", ChatActivity.this.dialog_id, null, null, null, false, null, null, null, true, 0, null);
            } else if (id == 40) {
                ChatActivity.this.openSearchWithText(null);
            } else if (id == 32 || id == 33) {
                if (ChatActivity.this.currentUser != null && ChatActivity.this.getParentActivity() != null) {
                    VoIPHelper.startCall(ChatActivity.this.currentUser, id == 33, ChatActivity.this.userInfo != null && ChatActivity.this.userInfo.video_calls_available, ChatActivity.this.getParentActivity(), ChatActivity.this.getMessagesController().getUserFull(ChatActivity.this.currentUser.id), ChatActivity.this.getAccountInstance());
                }
            } else if (id == 50) {
                if (ChatActivity.this.chatActivityEnterView != null) {
                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedBold();
                }
            } else if (id == 51) {
                if (ChatActivity.this.chatActivityEnterView != null) {
                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedItalic();
                }
            } else if (id == 57) {
                if (ChatActivity.this.chatActivityEnterView != null) {
                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedSpoiler();
                }
            } else if (id == 52) {
                if (ChatActivity.this.chatActivityEnterView != null) {
                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedMono();
                }
            } else if (id == 55) {
                if (ChatActivity.this.chatActivityEnterView != null) {
                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedStrike();
                }
            } else if (id == 56) {
                if (ChatActivity.this.chatActivityEnterView != null) {
                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedUnderline();
                }
            } else if (id == 53) {
                if (ChatActivity.this.chatActivityEnterView != null) {
                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedUrl();
                }
            } else if (id == 54) {
                if (ChatActivity.this.chatActivityEnterView != null) {
                    ChatActivity.this.chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                    ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedRegular();
                }
            } else if (id == 27) {
                ChatActivity.this.showChatThemeBottomSheet();
            }
        }

        /* renamed from: lambda$onItemClick$0$org-telegram-ui-ChatActivity$10 */
        public /* synthetic */ void m1984lambda$onItemClick$0$orgtelegramuiChatActivity$10(boolean isMusic, int count) {
            if (count <= 0 || ChatActivity.this.getParentActivity() == null) {
                return;
            }
            BulletinFactory.of(ChatActivity.this).createDownloadBulletin(isMusic ? BulletinFactory.FileType.AUDIOS : BulletinFactory.FileType.UNKNOWNS, count, ChatActivity.this.themeDelegate).show();
        }

        /* renamed from: org.telegram.ui.ChatActivity$10$1 */
        /* loaded from: classes4.dex */
        public class AnonymousClass1 implements MessagesStorage.BooleanCallback {
            final /* synthetic */ boolean val$canDeleteHistory;

            AnonymousClass1(boolean z) {
                AnonymousClass10.this = this$1;
                this.val$canDeleteHistory = z;
            }

            @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
            public void run(boolean revoke) {
                if (revoke && (ChatActivity.this.currentUser != null || this.val$canDeleteHistory)) {
                    MessagesStorage messagesStorage = ChatActivity.this.getMessagesStorage();
                    long j = ChatActivity.this.dialog_id;
                    final boolean z = this.val$canDeleteHistory;
                    messagesStorage.getMessagesCount(j, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$10$1$$ExternalSyntheticLambda1
                        @Override // org.telegram.messenger.MessagesStorage.IntCallback
                        public final void run(int i) {
                            ChatActivity.AnonymousClass10.AnonymousClass1.this.m1988lambda$run$1$orgtelegramuiChatActivity$10$1(z, i);
                        }
                    });
                    return;
                }
                ChatActivity.this.performHistoryClear(revoke, this.val$canDeleteHistory);
            }

            /* renamed from: lambda$run$1$org-telegram-ui-ChatActivity$10$1 */
            public /* synthetic */ void m1988lambda$run$1$orgtelegramuiChatActivity$10$1(final boolean canDeleteHistory, int count) {
                if (count >= 50) {
                    AlertsCreator.createClearOrDeleteDialogAlert(ChatActivity.this, true, false, true, ChatActivity.this.currentChat, ChatActivity.this.currentUser, false, false, canDeleteHistory, new MessagesStorage.BooleanCallback() { // from class: org.telegram.ui.ChatActivity$10$1$$ExternalSyntheticLambda0
                        @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
                        public final void run(boolean z) {
                            ChatActivity.AnonymousClass10.AnonymousClass1.this.m1987lambda$run$0$orgtelegramuiChatActivity$10$1(canDeleteHistory, z);
                        }
                    }, ChatActivity.this.themeDelegate);
                } else {
                    ChatActivity.this.performHistoryClear(true, canDeleteHistory);
                }
            }

            /* renamed from: lambda$run$0$org-telegram-ui-ChatActivity$10$1 */
            public /* synthetic */ void m1987lambda$run$0$orgtelegramuiChatActivity$10$1(boolean canDeleteHistory, boolean param) {
                ChatActivity.this.performHistoryClear(true, canDeleteHistory);
            }
        }

        /* renamed from: lambda$onItemClick$1$org-telegram-ui-ChatActivity$10 */
        public /* synthetic */ void m1985lambda$onItemClick$1$orgtelegramuiChatActivity$10(int id, boolean canDeleteHistory, boolean param) {
            if (id == 15 && ChatObject.isChannel(ChatActivity.this.currentChat) && (!ChatActivity.this.currentChat.megagroup || !TextUtils.isEmpty(ChatActivity.this.currentChat.username))) {
                ChatActivity.this.getMessagesController().deleteDialog(ChatActivity.this.dialog_id, 2, param);
            } else if (id != 15) {
                ChatActivity.this.getNotificationCenter().removeObserver(ChatActivity.this, NotificationCenter.closeChats);
                ChatActivity.this.getNotificationCenter().postNotificationName(NotificationCenter.closeChats, new Object[0]);
                ChatActivity.this.finishFragment();
                ChatActivity.this.getNotificationCenter().postNotificationName(NotificationCenter.needDeleteDialog, Long.valueOf(ChatActivity.this.dialog_id), ChatActivity.this.currentUser, ChatActivity.this.currentChat, Boolean.valueOf(param));
            } else {
                ChatActivity.this.performHistoryClear(param, canDeleteHistory);
            }
        }

        /* renamed from: lambda$onItemClick$2$org-telegram-ui-ChatActivity$10 */
        public /* synthetic */ void m1986lambda$onItemClick$2$orgtelegramuiChatActivity$10(View view) {
            ChatActivity.this.headerItem.closeSubMenu();
            if (ChatActivity.this.chatAttachAlert != null) {
                ChatActivity.this.chatAttachAlert.setEditingMessageObject(null);
            }
            ChatActivity.this.openAttachMenu();
        }
    }

    /* renamed from: lambda$createView$14$org-telegram-ui-ChatActivity */
    public /* synthetic */ boolean m1787lambda$createView$14$orgtelegramuiChatActivity(View backButton, View e) {
        ActionBarPopupWindow show = BackButtonMenu.show(this, backButton, this.dialog_id, this.themeDelegate);
        this.scrimPopupWindow = show;
        if (show == null) {
            return false;
        }
        show.setOnDismissListener(new PopupWindow.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda10
            @Override // android.widget.PopupWindow.OnDismissListener
            public final void onDismiss() {
                ChatActivity.this.m1786lambda$createView$13$orgtelegramuiChatActivity();
            }
        });
        this.chatListView.stopScroll();
        this.chatLayoutManager.setCanScrollVertically(false);
        dimBehindView(backButton, 0.3f);
        hideHints(false);
        UndoView undoView = this.topUndoView;
        if (undoView != null) {
            undoView.hide(true, 1);
        }
        UndoView undoView2 = this.undoView;
        if (undoView2 != null) {
            undoView2.hide(true, 1);
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.getEditField().setAllowDrawCursor(false);
        }
        return true;
    }

    /* renamed from: lambda$createView$13$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1786lambda$createView$13$orgtelegramuiChatActivity() {
        this.scrimPopupWindow = null;
        this.menuDeleteItem = null;
        this.scrimPopupWindowItems = null;
        this.chatLayoutManager.setCanScrollVertically(true);
        if (this.scrimPopupWindowHideDimOnDismiss) {
            dimBehindView(false);
        } else {
            this.scrimPopupWindowHideDimOnDismiss = true;
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.getEditField().setAllowDrawCursor(true);
        }
    }

    /* renamed from: lambda$createView$15$org-telegram-ui-ChatActivity */
    public /* synthetic */ boolean m1788lambda$createView$15$orgtelegramuiChatActivity(View view, MotionEvent motionEvent) {
        ChatThemeBottomSheet chatThemeBottomSheet = this.chatThemeBottomSheet;
        if (chatThemeBottomSheet != null) {
            chatThemeBottomSheet.close();
            return true;
        }
        return false;
    }

    /* renamed from: lambda$createView$16$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1789lambda$createView$16$orgtelegramuiChatActivity(int date, View v) {
        jumpToDate(date);
    }

    /* renamed from: lambda$createView$20$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1793lambda$createView$20$orgtelegramuiChatActivity(final TLObject response, TLRPC.TL_error error) {
        if (response instanceof TLRPC.messages_Messages) {
            List<TLRPC.Message> l = ((TLRPC.messages_Messages) response).messages;
            if (!l.isEmpty()) {
                TLRPC.TL_messages_getHistory gh2 = new TLRPC.TL_messages_getHistory();
                gh2.peer = getMessagesController().getInputPeer(this.dialog_id);
                gh2.offset_date = this.startLoadFromDate + 86400;
                gh2.limit = 1;
                getConnectionsManager().sendRequest(gh2, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda139
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        ChatActivity.this.m1792lambda$createView$19$orgtelegramuiChatActivity(response, tLObject, tL_error);
                    }
                });
                return;
            }
            this.actionBar.setSubtitle(LocaleController.getString("NoMessagesForThisDay", R.string.NoMessagesForThisDay));
        }
    }

    /* renamed from: lambda$createView$19$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1792lambda$createView$19$orgtelegramuiChatActivity(TLObject response, TLObject response1, TLRPC.TL_error error1) {
        int count;
        if (response1 instanceof TLRPC.messages_Messages) {
            List<TLRPC.Message> l2 = ((TLRPC.messages_Messages) response1).messages;
            if (!l2.isEmpty()) {
                count = ((TLRPC.messages_Messages) response).offset_id_offset - ((TLRPC.messages_Messages) response1).offset_id_offset;
            } else {
                count = ((TLRPC.messages_Messages) response).offset_id_offset;
            }
            final int count2 = count;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda67
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1791lambda$createView$18$orgtelegramuiChatActivity(count2);
                }
            });
        }
    }

    /* renamed from: lambda$createView$18$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1791lambda$createView$18$orgtelegramuiChatActivity(final int finalCount) {
        if (finalCount != 0) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda65
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1790lambda$createView$17$orgtelegramuiChatActivity(finalCount);
                }
            });
        } else {
            this.actionBar.setSubtitle(LocaleController.getString("NoMessagesForThisDay", R.string.NoMessagesForThisDay));
        }
    }

    /* renamed from: lambda$createView$17$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1790lambda$createView$17$orgtelegramuiChatActivity(int finalCount) {
        this.actionBar.setSubtitle(LocaleController.formatPluralString("messages", finalCount, new Object[0]));
    }

    /* renamed from: org.telegram.ui.ChatActivity$11 */
    /* loaded from: classes4.dex */
    public class AnonymousClass11 extends ActionBarMenuItem.ActionBarMenuItemSearchListener {
        boolean searchWas;

        AnonymousClass11() {
            ChatActivity.this = this$0;
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public boolean canCollapseSearch() {
            if (ChatActivity.this.messagesSearchListView.getTag() != null) {
                ChatActivity.this.showMessagesSearchListView(false);
                return false;
            }
            return true;
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onSearchCollapse() {
            ChatActivity.this.searchCalendarButton.setVisibility(0);
            if (ChatActivity.this.searchUserButton != null) {
                ChatActivity.this.searchUserButton.setVisibility(0);
            }
            if (ChatActivity.this.searchingForUser) {
                ChatActivity.this.mentionContainer.getAdapter().searchUsernameOrHashtag(null, 0, null, false, true);
                ChatActivity.this.searchingForUser = false;
            }
            ChatActivity.this.mentionContainer.setReversed(false);
            ChatActivity.this.mentionContainer.getAdapter().setSearchingMentions(false);
            ChatActivity.this.searchingUserMessages = null;
            ChatActivity.this.searchingChatMessages = null;
            ChatActivity.this.searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
            ChatActivity.this.searchItem.setSearchFieldCaption(null);
            AndroidUtilities.updateViewVisibilityAnimated(ChatActivity.this.avatarContainer, true, 0.95f, true);
            if (ChatActivity.this.editTextItem != null && ChatActivity.this.editTextItem.getTag() != null) {
                if (ChatActivity.this.headerItem != null) {
                    ChatActivity.this.headerItem.setVisibility(8);
                }
                if (ChatActivity.this.editTextItem != null) {
                    ChatActivity.this.editTextItem.setVisibility(0);
                }
                if (ChatActivity.this.attachItem != null) {
                    ChatActivity.this.attachItem.setVisibility(8);
                }
                if (ChatActivity.this.searchIconItem != null && ChatActivity.this.showSearchAsIcon) {
                    ChatActivity.this.searchIconItem.setVisibility(8);
                }
                if (ChatActivity.this.audioCallIconItem != null && ChatActivity.this.showAudioCallAsIcon) {
                    ChatActivity.this.audioCallIconItem.setVisibility(8);
                }
            } else if (!ChatActivity.this.chatActivityEnterView.hasText() || !TextUtils.isEmpty(ChatActivity.this.chatActivityEnterView.getSlowModeTimer()) || (ChatActivity.this.currentChat != null && !ChatObject.canSendMessages(ChatActivity.this.currentChat))) {
                if (ChatActivity.this.headerItem != null) {
                    ChatActivity.this.headerItem.setVisibility(0);
                }
                if (ChatActivity.this.audioCallIconItem != null && ChatActivity.this.showAudioCallAsIcon) {
                    ChatActivity.this.audioCallIconItem.setVisibility(0);
                }
                if (ChatActivity.this.searchIconItem != null && ChatActivity.this.showSearchAsIcon) {
                    ChatActivity.this.searchIconItem.setVisibility(0);
                }
                if (ChatActivity.this.editTextItem != null) {
                    ChatActivity.this.editTextItem.setVisibility(8);
                }
                if (ChatActivity.this.attachItem != null) {
                    ChatActivity.this.attachItem.setVisibility(8);
                }
            } else {
                if (ChatActivity.this.headerItem != null) {
                    ChatActivity.this.headerItem.setVisibility(8);
                }
                if (ChatActivity.this.editTextItem != null) {
                    ChatActivity.this.editTextItem.setVisibility(8);
                }
                if (ChatActivity.this.attachItem != null) {
                    ChatActivity.this.attachItem.setVisibility(0);
                }
                if (ChatActivity.this.searchIconItem != null && ChatActivity.this.showSearchAsIcon) {
                    ChatActivity.this.searchIconItem.setVisibility(8);
                }
                if (ChatActivity.this.audioCallIconItem != null && ChatActivity.this.showAudioCallAsIcon) {
                    ChatActivity.this.audioCallIconItem.setVisibility(8);
                }
            }
            if ((ChatActivity.this.threadMessageId == 0 && !UserObject.isReplyUser(ChatActivity.this.currentUser)) || (ChatActivity.this.threadMessageObject != null && ChatActivity.this.threadMessageObject.getRepliesCount() == 0)) {
                ChatActivity.this.searchItem.setVisibility(8);
            }
            ChatActivity.this.searchItemVisible = false;
            ChatActivity.this.getMediaDataController().clearFoundMessageObjects();
            if (ChatActivity.this.messagesSearchAdapter != null) {
                ChatActivity.this.messagesSearchAdapter.notifyDataSetChanged();
            }
            ChatActivity.this.removeSelectedMessageHighlight();
            ChatActivity.this.updateBottomOverlay();
            ChatActivity.this.updatePinnedMessageView(true);
            ChatActivity.this.updateVisibleRows();
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onSearchExpand() {
            if (ChatActivity.this.threadMessageId != 0 || UserObject.isReplyUser(ChatActivity.this.currentUser)) {
                ChatActivity.this.openSearchWithText(null);
            }
            if (!ChatActivity.this.openSearchKeyboard) {
                return;
            }
            ChatActivity.this.saveKeyboardPositionBeforeTransition();
            AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ChatActivity.this.classGuid);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$11$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.AnonymousClass11.this.m1990lambda$onSearchExpand$0$orgtelegramuiChatActivity$11();
                }
            }, 500L);
        }

        /* renamed from: lambda$onSearchExpand$0$org-telegram-ui-ChatActivity$11 */
        public /* synthetic */ void m1990lambda$onSearchExpand$0$orgtelegramuiChatActivity$11() {
            this.searchWas = false;
            ChatActivity.this.searchItem.getSearchField().requestFocus();
            AndroidUtilities.showKeyboard(ChatActivity.this.searchItem.getSearchField());
            ChatActivity.this.removeKeyboardPositionBeforeTransition();
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onSearchPressed(EditText editText) {
            this.searchWas = true;
            ChatActivity.this.updateSearchButtons(0, 0, -1);
            ChatActivity.this.getMediaDataController().searchMessagesInChat(editText.getText().toString(), ChatActivity.this.dialog_id, ChatActivity.this.mergeDialogId, ChatActivity.this.classGuid, 0, ChatActivity.this.threadMessageId, ChatActivity.this.searchingUserMessages, ChatActivity.this.searchingChatMessages);
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onTextChanged(EditText editText) {
            ChatActivity.this.showMessagesSearchListView(false);
            if (!ChatActivity.this.searchingForUser) {
                if (ChatActivity.this.searchingUserMessages == null && ChatActivity.this.searchingChatMessages == null && ChatActivity.this.searchUserButton != null && TextUtils.equals(editText.getText(), LocaleController.getString("SearchFrom", R.string.SearchFrom))) {
                    ChatActivity.this.searchUserButton.callOnClick();
                    return;
                }
                return;
            }
            MentionsAdapter adapter = ChatActivity.this.mentionContainer.getAdapter();
            adapter.searchUsernameOrHashtag("@" + editText.getText().toString(), 0, ChatActivity.this.messages, true, true);
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public void onCaptionCleared() {
            if (ChatActivity.this.searchingUserMessages != null || ChatActivity.this.searchingChatMessages != null) {
                ChatActivity.this.searchUserButton.callOnClick();
                return;
            }
            if (ChatActivity.this.searchingForUser) {
                ChatActivity.this.mentionContainer.getAdapter().searchUsernameOrHashtag(null, 0, null, false, true);
                ChatActivity.this.searchingForUser = false;
                ChatActivity.this.searchItem.setSearchFieldText("", true);
            }
            ChatActivity.this.searchItem.setSearchFieldHint(LocaleController.getString("Search", R.string.Search));
            ChatActivity.this.searchCalendarButton.setVisibility(0);
            ChatActivity.this.searchUserButton.setVisibility(0);
            ChatActivity.this.searchingUserMessages = null;
            ChatActivity.this.searchingChatMessages = null;
        }

        @Override // org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener
        public boolean forceShowClear() {
            return ChatActivity.this.searchingForUser;
        }
    }

    /* renamed from: lambda$createView$22$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1795lambda$createView$22$orgtelegramuiChatActivity(View view) {
        boolean muted = MessagesController.getInstance(this.currentAccount).isDialogMuted(this.dialog_id);
        if (muted) {
            updateTitleIcons(true);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda29
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1794lambda$createView$21$orgtelegramuiChatActivity();
                }
            }, 150L);
            this.headerItem.toggleSubMenu();
            BulletinFactory.createMuteBulletin(this, false, this.themeDelegate).show();
            return;
        }
        this.muteItem.openSwipeBack();
    }

    /* renamed from: lambda$createView$21$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1794lambda$createView$21$orgtelegramuiChatActivity() {
        toggleMute(true);
    }

    public static /* synthetic */ boolean lambda$createView$23(View v, MotionEvent event) {
        return true;
    }

    /* renamed from: org.telegram.ui.ChatActivity$13 */
    /* loaded from: classes4.dex */
    public class AnonymousClass13 extends SizeNotifierFrameLayout {
        int backgroundColor;
        Paint backgroundPaint;
        int lastHeight;
        int lastWidth;
        private long pressTime;
        final /* synthetic */ Context val$context;
        private float x;
        private float y;
        int inputFieldHeight = 0;
        ArrayList<ChatMessageCell> drawTimeAfter = new ArrayList<>();
        ArrayList<ChatMessageCell> drawNamesAfter = new ArrayList<>();
        ArrayList<ChatMessageCell> drawCaptionAfter = new ArrayList<>();

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass13(Context context, ActionBarLayout layout, Context context2) {
            super(context, layout);
            ChatActivity.this = this$0;
            this.val$context = context2;
            this.adjustPanLayoutHelper = new AdjustPanLayoutHelper(this) { // from class: org.telegram.ui.ChatActivity.13.1
                /* JADX INFO: Access modifiers changed from: protected */
                @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
                public void onTransitionStart(boolean keyboardVisible, int contentHeight) {
                    ChatActivity.this.wasManualScroll = true;
                    if (ChatActivity.this.chatActivityEnterView != null) {
                        ChatActivity.this.chatActivityEnterView.onAdjustPanTransitionStart(keyboardVisible, contentHeight);
                    }
                    if (ChatActivity.this.mentionContainer != null) {
                        ChatActivity.this.mentionContainer.onPanTransitionStart();
                    }
                }

                /* JADX INFO: Access modifiers changed from: protected */
                @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
                public void onTransitionEnd() {
                    if (ChatActivity.this.chatActivityEnterView != null) {
                        ChatActivity.this.chatActivityEnterView.onAdjustPanTransitionEnd();
                    }
                    if (ChatActivity.this.mentionContainer != null) {
                        ChatActivity.this.mentionContainer.onPanTransitionEnd();
                    }
                }

                /* JADX INFO: Access modifiers changed from: protected */
                @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
                public void onPanTranslationUpdate(float y, float progress, boolean keyboardVisible) {
                    if (ChatActivity.this.getParentLayout() == null || !ChatActivity.this.getParentLayout().isPreviewOpenAnimationInProgress()) {
                        ChatActivity.this.contentPanTranslation = y;
                        if (ChatActivity.this.chatAttachAlert == null || !ChatActivity.this.chatAttachAlert.isShowing()) {
                            ChatActivity.this.actionBar.setTranslationY(y);
                            ChatActivity.this.emptyViewContainer.setTranslationY(y / 2.0f);
                            ChatActivity.this.progressView.setTranslationY(y / 2.0f);
                            ChatActivity.this.contentView.setBackgroundTranslation((int) y);
                            ChatActivity.this.instantCameraView.onPanTranslationUpdate(y);
                            if (ChatActivity.this.blurredView != null) {
                                ChatActivity.this.blurredView.drawable.onPanTranslationUpdate(y);
                            }
                            ChatActivity.this.setFragmentPanTranslationOffset((int) y);
                            ChatActivity.this.invalidateChatListViewTopPadding();
                            ChatActivity.this.invalidateMessagesVisiblePart();
                        } else {
                            AnonymousClass13.this.setNonNoveTranslation(y);
                        }
                        ChatActivity.this.chatListView.invalidate();
                        ChatActivity.this.updateBulletinLayout();
                        if (ChatActivity.this.chatActivityEnterView != null) {
                            ChatActivity.this.chatActivityEnterView.onAdjustPanTransitionUpdate(y, progress, keyboardVisible);
                        }
                        if (ChatActivity.this.mentionContainer != null) {
                            ChatActivity.this.mentionContainer.onPanTransitionUpdate(y);
                        }
                    }
                }

                @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
                protected boolean heightAnimationEnabled() {
                    ActionBarLayout actionBarLayout = ChatActivity.this.getParentLayout();
                    if (ChatActivity.this.inPreviewMode || ChatActivity.this.inBubbleMode || AndroidUtilities.isInMultiwindow || actionBarLayout == null || ChatActivity.this.fixedKeyboardHeight > 0 || System.currentTimeMillis() - ChatActivity.this.activityResumeTime < 250) {
                        return false;
                    }
                    if ((ChatActivity.this == actionBarLayout.getLastFragment() && actionBarLayout.isTransitionAnimationInProgress()) || actionBarLayout.isPreviewOpenAnimationInProgress() || ChatActivity.this.isPaused || !ChatActivity.this.openAnimationEnded || (ChatActivity.this.chatAttachAlert != null && ChatActivity.this.chatAttachAlert.isShowing())) {
                        return false;
                    }
                    return ChatActivity.this.chatActivityEnterView == null || ChatActivity.this.chatActivityEnterView.getTrendingStickersAlert() == null || !ChatActivity.this.chatActivityEnterView.getTrendingStickersAlert().isShowing();
                }

                @Override // org.telegram.ui.ActionBar.AdjustPanLayoutHelper
                protected int startOffset() {
                    int keyboardSize = AnonymousClass13.this.getKeyboardHeight();
                    if (keyboardSize <= AndroidUtilities.dp(20.0f) && ChatActivity.this.chatActivityEnterView.isPopupShowing()) {
                        return ChatActivity.this.chatActivityEnterView.getEmojiPadding();
                    }
                    return 0;
                }
            };
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        public void drawList(Canvas blurCanvas, boolean top) {
            float cilpTop = (ChatActivity.this.chatListViewPaddingTop - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f);
            for (int i = 0; i < ChatActivity.this.chatListView.getChildCount(); i++) {
                View child = ChatActivity.this.chatListView.getChildAt(i);
                if ((!top || child.getY() <= AndroidUtilities.dp(40.0f) + cilpTop) && (top || child.getY() + child.getMeasuredHeight() >= AndroidUtilities.dp(203.0f))) {
                    blurCanvas.save();
                    if (top) {
                        blurCanvas.translate(ChatActivity.this.chatListView.getX() + child.getX(), (ChatActivity.this.chatListView.getY() + child.getY()) - ChatActivity.this.contentPanTranslation);
                    } else {
                        blurCanvas.translate(ChatActivity.this.chatListView.getX() + child.getX(), ChatActivity.this.chatListView.getTop() + child.getY());
                    }
                    if (child instanceof ChatMessageCell) {
                        ChatMessageCell cell = (ChatMessageCell) child;
                        if (cell.drawBackgroundInParent()) {
                            cell.drawBackgroundInternal(blurCanvas, true);
                        }
                        child.draw(blurCanvas);
                        if (cell.hasOutboundsContent()) {
                            ((ChatMessageCell) child).drawOutboundsContent(blurCanvas);
                        }
                    } else {
                        child.draw(blurCanvas);
                    }
                    blurCanvas.restore();
                }
            }
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected int getScrollOffset() {
            return ChatActivity.this.chatListView.computeVerticalScrollOffset();
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected float getBottomOffset() {
            return ChatActivity.this.chatListView.getBottom();
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected float getListTranslationY() {
            return ChatActivity.this.chatListView.getTranslationY();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
        public void onAttachedToWindow() {
            super.onAttachedToWindow();
            this.adjustPanLayoutHelper.onAttach();
            ChatActivity.this.chatActivityEnterView.setAdjustPanLayoutHelper(this.adjustPanLayoutHelper);
            MessageObject messageObject = MediaController.getInstance().getPlayingMessageObject();
            if (messageObject != null && ((messageObject.isRoundVideo() || messageObject.isVideo()) && messageObject.eventId == 0 && messageObject.getDialogId() == ChatActivity.this.dialog_id)) {
                MediaController.getInstance().setTextureView(ChatActivity.this.createTextureView(false), ChatActivity.this.aspectRatioFrameLayout, ChatActivity.this.videoPlayerContainer, true);
            }
            if (ChatActivity.this.pullingDownDrawable != null) {
                ChatActivity.this.pullingDownDrawable.onAttach();
            }
            ChatActivity.this.emojiAnimationsOverlay.onAttachedToWindow();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
        public void onDetachedFromWindow() {
            super.onDetachedFromWindow();
            this.adjustPanLayoutHelper.onDetach();
            if (ChatActivity.this.pullingDownDrawable != null) {
                ChatActivity.this.pullingDownDrawable.onDetach();
                ChatActivity.this.pullingDownDrawable = null;
            }
            ChatActivity.this.emojiAnimationsOverlay.onDetachedFromWindow();
            AndroidUtilities.runOnUIThread(ChatActivity$13$$ExternalSyntheticLambda1.INSTANCE);
        }

        @Override // android.view.ViewGroup, android.view.View
        public boolean dispatchTouchEvent(MotionEvent ev) {
            float expandY;
            if (AndroidUtilities.isInMultiwindow || ChatActivity.this.isInBubbleMode()) {
                expandY = ChatActivity.this.chatActivityEnterView.getEmojiView() != null ? ChatActivity.this.chatActivityEnterView.getEmojiView().getY() : ChatActivity.this.chatActivityEnterView.getY();
            } else {
                expandY = ChatActivity.this.chatActivityEnterView.getY();
            }
            if (ChatActivity.this.scrimView != null || (ChatActivity.this.chatActivityEnterView != null && ChatActivity.this.chatActivityEnterView.isStickersExpanded() && ev.getY() < expandY)) {
                return false;
            }
            ChatActivity.this.keyboardHideHelper.onTouch(this.adjustPanLayoutHelper, this, ChatActivity.this.chatListView, ChatActivity.this.chatActivityEnterView, ChatActivity.this, ev);
            ChatActivity.this.lastTouchY = ev.getY();
            TextSelectionHelper.TextSelectionOverlay selectionOverlay = ChatActivity.this.textSelectionHelper.getOverlayView(this.val$context);
            ev.offsetLocation(-selectionOverlay.getX(), -selectionOverlay.getY());
            if (ChatActivity.this.textSelectionHelper.isSelectionMode() && ChatActivity.this.textSelectionHelper.getOverlayView(this.val$context).onTouchEvent(ev)) {
                return true;
            }
            ev.offsetLocation(selectionOverlay.getX(), selectionOverlay.getY());
            if (selectionOverlay.checkOnTap(ev)) {
                ev.setAction(3);
            }
            if (ev.getAction() != 0 || !ChatActivity.this.textSelectionHelper.isSelectionMode() || (ev.getY() >= ChatActivity.this.chatListView.getTop() && ev.getY() <= ChatActivity.this.chatListView.getBottom())) {
                if (ChatActivity.this.pinchToZoomHelper.isInOverlayMode()) {
                    return ChatActivity.this.pinchToZoomHelper.onTouchEvent(ev);
                }
                if (AvatarPreviewer.hasVisibleInstance()) {
                    AvatarPreviewer.getInstance().onTouchEvent(ev);
                    return true;
                }
                boolean r = false;
                if (ChatActivity.this.isInPreviewMode() && ChatActivity.this.allowExpandPreviewByClick) {
                    if (ev.getAction() == 0) {
                        boolean pressedOnPageDownButtons = false;
                        int[] off = new int[2];
                        getLocationInWindow(off);
                        int[] pos = new int[2];
                        if (ChatActivity.this.pagedownButton != null) {
                            ChatActivity.this.pagedownButton.getLocationInWindow(pos);
                            AndroidUtilities.rectTmp2.set(pos[0] - off[0], pos[1] - off[1], (pos[0] - off[0]) + ChatActivity.this.pagedownButton.getMeasuredWidth(), (pos[1] - off[1]) + ChatActivity.this.pagedownButton.getMeasuredHeight());
                            if (AndroidUtilities.rectTmp2.contains((int) ev.getX(), (int) ev.getY())) {
                                pressedOnPageDownButtons = true;
                            }
                        }
                        if (!pressedOnPageDownButtons && ChatActivity.this.mentiondownButton != null) {
                            ChatActivity.this.mentiondownButton.getLocationInWindow(pos);
                            AndroidUtilities.rectTmp2.set(pos[0] - off[0], pos[1] - off[1], (pos[0] - off[0]) + ChatActivity.this.mentiondownButton.getMeasuredWidth(), (pos[1] - off[1]) + ChatActivity.this.mentiondownButton.getMeasuredHeight());
                            if (AndroidUtilities.rectTmp2.contains((int) ev.getX(), (int) ev.getY())) {
                                pressedOnPageDownButtons = true;
                            }
                        }
                        if (!pressedOnPageDownButtons) {
                            this.x = ev.getX();
                            this.y = ev.getY();
                            this.pressTime = SystemClock.elapsedRealtime();
                            r = true;
                        } else {
                            this.pressTime = -1L;
                        }
                    } else if (ev.getAction() == 1) {
                        if (MathUtils.distance(this.x, this.y, ev.getX(), ev.getY()) < AndroidUtilities.dp(6.0f) && SystemClock.elapsedRealtime() - this.pressTime <= ViewConfiguration.getTapTimeout()) {
                            ChatActivity.this.parentLayout.expandPreviewFragment();
                            ev.setAction(3);
                        }
                        this.pressTime = -1L;
                    } else if (ev.getAction() == 3) {
                        this.pressTime = -1L;
                    }
                }
                return super.dispatchTouchEvent(ev) || r;
            }
            ev.offsetLocation(-selectionOverlay.getX(), -selectionOverlay.getY());
            if (!ChatActivity.this.textSelectionHelper.getOverlayView(this.val$context).onTouchEvent(ev)) {
                return true;
            }
            ev.offsetLocation(selectionOverlay.getX(), selectionOverlay.getY());
            return super.dispatchTouchEvent(ev);
        }

        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            if (getTag(BlurBehindDrawable.TAG_DRAWING_AS_BACKGROUND) != null) {
                return;
            }
            if (getTag(BlurBehindDrawable.TAG_DRAWING_AS_BACKGROUND) == null) {
                if (!ChatActivity.this.instantCameraView.blurFullyDrawing()) {
                    if (ChatActivity.this.blurredView != null && ChatActivity.this.blurredView.fullyDrawing() && ChatActivity.this.blurredView.getTag() != null) {
                        return;
                    }
                } else {
                    return;
                }
            }
            super.onDraw(canvas);
        }

        /* JADX WARN: Removed duplicated region for block: B:111:0x023a  */
        /* JADX WARN: Removed duplicated region for block: B:140:0x0339  */
        /* JADX WARN: Removed duplicated region for block: B:93:0x0168  */
        @Override // android.view.ViewGroup
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        protected boolean drawChild(android.graphics.Canvas r12, android.view.View r13, long r14) {
            /*
                Method dump skipped, instructions count: 869
                To view this dump add '--comments-level debug' option
            */
            throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.AnonymousClass13.drawChild(android.graphics.Canvas, android.view.View, long):boolean");
        }

        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        protected boolean isActionBarVisible() {
            return ChatActivity.this.actionBar.getVisibility() == 0;
        }

        private void drawChildElement(Canvas canvas, float listTop, ChatMessageCell cell, int type) {
            canvas.save();
            float canvasOffsetX = ChatActivity.this.chatListView.getLeft() + cell.getLeft();
            float canvasOffsetY = ChatActivity.this.chatListView.getY() + cell.getY();
            float alpha = cell.shouldDrawAlphaLayer() ? cell.getAlpha() : 1.0f;
            canvas.clipRect(ChatActivity.this.chatListView.getLeft(), listTop, ChatActivity.this.chatListView.getRight(), (ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListView.getMeasuredHeight()) - ChatActivity.this.blurredViewBottomOffset);
            canvas.translate(canvasOffsetX, canvasOffsetY);
            boolean z = true;
            cell.setInvalidatesParent(true);
            if (type == 0) {
                cell.drawTime(canvas, alpha, true);
            } else if (type == 1) {
                cell.drawNamesLayout(canvas, alpha);
            } else {
                if (cell.getCurrentPosition() == null || (cell.getCurrentPosition().flags & 1) != 0) {
                    z = false;
                }
                cell.drawCaptionLayout(canvas, z, alpha);
            }
            cell.setInvalidatesParent(false);
            canvas.restore();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.view.ViewGroup, android.view.View
        public void dispatchDraw(Canvas canvas) {
            int bottom;
            int top;
            MessageObject.GroupedMessages scrimGroup;
            float listTop;
            ChatMessageCell cell;
            MessageObject.GroupedMessages group;
            MessageObject.GroupedMessagePosition position;
            float listTop2;
            MessageObject.GroupedMessages scrimGroup2;
            int num;
            int num2;
            View child;
            ChatMessageCell cell2;
            MessageObject.GroupedMessagePosition position2;
            float viewClipRight;
            float viewClipTop;
            float viewClipLeft;
            float viewClipBottom;
            float viewClipBottom2;
            View child2;
            View child3;
            float t;
            MessageObject.GroupedMessagePosition position3;
            ChatActivity.this.chatActivityEnterView.checkAnimation();
            ChatActivity.this.updateChatListViewTopPadding();
            if (ChatActivity.this.invalidateMessagesVisiblePart || (ChatActivity.this.chatListItemAnimator != null && ChatActivity.this.chatListItemAnimator.isRunning())) {
                ChatActivity.this.invalidateMessagesVisiblePart = false;
                ChatActivity.this.updateMessagesVisiblePart(false);
            }
            ChatActivity.this.updateTextureViewPosition(false);
            ChatActivity.this.updatePagedownButtonsPosition();
            super.dispatchDraw(canvas);
            float f = 0.0f;
            boolean z = true;
            if (ChatActivity.this.fragmentContextView != null && ChatActivity.this.fragmentContextView.isCallStyle()) {
                float alpha = (ChatActivity.this.blurredView == null || ChatActivity.this.blurredView.getVisibility() != 0) ? 1.0f : 1.0f - ChatActivity.this.blurredView.getAlpha();
                if (alpha > 0.0f) {
                    if (alpha != 1.0f) {
                        canvas.saveLayerAlpha(ChatActivity.this.fragmentContextView.getX(), ChatActivity.this.fragmentContextView.getY() - AndroidUtilities.dp(30.0f), ChatActivity.this.fragmentContextView.getMeasuredWidth() + ChatActivity.this.fragmentContextView.getX(), ChatActivity.this.fragmentContextView.getMeasuredHeight() + ChatActivity.this.fragmentContextView.getY(), (int) (alpha * 255.0f), 31);
                    } else {
                        canvas.save();
                    }
                    canvas.translate(ChatActivity.this.fragmentContextView.getX(), ChatActivity.this.fragmentContextView.getY());
                    ChatActivity.this.fragmentContextView.setDrawOverlay(true);
                    ChatActivity.this.fragmentContextView.draw(canvas);
                    ChatActivity.this.fragmentContextView.setDrawOverlay(false);
                    canvas.restore();
                }
            }
            if (ChatActivity.this.chatActivityEnterView != null && ChatActivity.this.chatActivityEnterView.panelAnimationInProgress() && ChatActivity.this.chatActivityEnterView.getEmojiPadding() < ChatActivity.this.bottomPanelTranslationY) {
                int color = ChatActivity.this.getThemedColor(Theme.key_chat_emojiPanelBackground);
                if (this.backgroundPaint == null) {
                    this.backgroundPaint = new Paint();
                }
                if (this.backgroundColor != color) {
                    Paint paint = this.backgroundPaint;
                    this.backgroundColor = color;
                    paint.setColor(color);
                }
                int offset = ((int) (ChatActivity.this.bottomPanelTranslationY - ChatActivity.this.chatActivityEnterView.getEmojiPadding())) + 3;
                canvas.drawRect(0.0f, getMeasuredHeight() - offset, getMeasuredWidth(), getMeasuredHeight(), this.backgroundPaint);
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.setFragmentPanTranslationOffset(chatActivity.chatActivityEnterView.getEmojiPadding());
            }
            int N = ChatActivity.this.animateSendingViews.size();
            for (int a = 0; a < N; a++) {
                ChatMessageCell cell3 = (ChatMessageCell) ChatActivity.this.animateSendingViews.get(a);
                MessageObject.SendAnimationData data = cell3.getMessageObject().sendAnimationData;
                if (data != null) {
                    canvas.save();
                    ImageReceiver imageReceiver = cell3.getPhotoImage();
                    canvas.translate(data.currentX, data.currentY);
                    canvas.scale(data.currentScale, data.currentScale);
                    canvas.translate(-imageReceiver.getCenterX(), -imageReceiver.getCenterY());
                    cell3.setTimeAlpha(data.timeAlpha);
                    ((ChatMessageCell) ChatActivity.this.animateSendingViews.get(a)).draw(canvas);
                    canvas.restore();
                }
            }
            if (ChatActivity.this.scrimViewReaction == null || ChatActivity.this.scrimView == null) {
                ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * (ChatActivity.this.scrimView != null ? ChatActivity.this.scrimViewAlpha : 1.0f)));
                canvas.drawRect(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
            }
            if (ChatActivity.this.scrimView != null) {
                if (ChatActivity.this.scrimView == ChatActivity.this.reactionsMentiondownButton || ChatActivity.this.scrimView == ChatActivity.this.mentiondownButton) {
                    if (ChatActivity.this.scrimViewAlpha < 1.0f) {
                        ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * (1.0f - ChatActivity.this.scrimViewAlpha)));
                        canvas.drawRect(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
                    }
                } else if (!(ChatActivity.this.scrimView instanceof ImageView)) {
                    float listTop3 = ((ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListViewPaddingTop) - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f);
                    if (ChatActivity.this.scrimView instanceof ChatMessageCell) {
                        scrimGroup = ((ChatMessageCell) ChatActivity.this.scrimView).getCurrentMessagesGroup();
                    } else {
                        scrimGroup = null;
                    }
                    int count = ChatActivity.this.chatListView.getChildCount();
                    boolean groupedBackgroundWasDraw = false;
                    int num3 = 0;
                    while (num3 < count) {
                        View child4 = ChatActivity.this.chatListView.getChildAt(num3);
                        if (child4 instanceof ChatMessageCell) {
                            ChatMessageCell cell4 = (ChatMessageCell) child4;
                            cell = cell4;
                            group = cell4.getCurrentMessagesGroup();
                            position = cell4.getCurrentPosition();
                        } else {
                            cell = null;
                            group = null;
                            position = null;
                        }
                        if ((child4 != ChatActivity.this.scrimView && (scrimGroup == null || scrimGroup != group)) || child4.getAlpha() == f) {
                            num2 = num3;
                            num = count;
                            scrimGroup2 = scrimGroup;
                            listTop2 = listTop3;
                        } else {
                            if (groupedBackgroundWasDraw || cell == null || scrimGroup == null || scrimGroup.transitionParams.cell == null) {
                                position2 = position;
                                cell2 = cell;
                                child = child4;
                                num2 = num3;
                                num = count;
                                scrimGroup2 = scrimGroup;
                                listTop2 = listTop3;
                            } else {
                                float x = scrimGroup.transitionParams.cell.getNonAnimationTranslationX(z);
                                float l = scrimGroup.transitionParams.offsetLeft + scrimGroup.transitionParams.left + x;
                                float t2 = scrimGroup.transitionParams.top + scrimGroup.transitionParams.offsetTop;
                                float r = scrimGroup.transitionParams.right + x + scrimGroup.transitionParams.offsetRight;
                                float b = scrimGroup.transitionParams.bottom + scrimGroup.transitionParams.offsetBottom;
                                if (!scrimGroup.transitionParams.backgroundChangeBounds) {
                                    t2 += scrimGroup.transitionParams.cell.getTranslationY();
                                    b += scrimGroup.transitionParams.cell.getTranslationY();
                                }
                                if (t2 < (ChatActivity.this.chatListViewPaddingTop - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(20.0f)) {
                                    t = (ChatActivity.this.chatListViewPaddingTop - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(20.0f);
                                } else {
                                    t = t2;
                                }
                                if (b > ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.dp(20.0f)) {
                                    b = ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.dp(20.0f);
                                }
                                int a2 = 0;
                                boolean selected = true;
                                int N2 = scrimGroup.messages.size();
                                while (true) {
                                    if (a2 >= N2) {
                                        position3 = position;
                                        break;
                                    }
                                    int N3 = N2;
                                    MessageObject object = scrimGroup.messages.get(a2);
                                    position3 = position;
                                    MessageObject.GroupedMessages group2 = group;
                                    SparseArray sparseArray = ChatActivity.this.selectedMessagesIds[object.getDialogId() == ChatActivity.this.dialog_id ? (char) 0 : (char) 1];
                                    int index = object.getId();
                                    if (sparseArray.indexOfKey(index) >= 0) {
                                        a2++;
                                        N2 = N3;
                                        group = group2;
                                        position = position3;
                                    } else {
                                        selected = false;
                                        break;
                                    }
                                }
                                canvas.save();
                                canvas.clipRect(0.0f, (ChatActivity.this.mentionContainer != null ? ChatActivity.this.mentionContainer.clipTop() : 0.0f) + listTop3, getMeasuredWidth(), ((ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListView.getMeasuredHeight()) - ChatActivity.this.blurredViewBottomOffset) - (ChatActivity.this.mentionContainer != null ? ChatActivity.this.mentionContainer.clipBottom() : 0.0f));
                                canvas.translate(0.0f, ChatActivity.this.chatListView.getY());
                                int num4 = (int) r;
                                int num5 = num3;
                                int num6 = (int) b;
                                position2 = position3;
                                cell2 = cell;
                                child = child4;
                                num2 = num5;
                                num = count;
                                scrimGroup2 = scrimGroup;
                                listTop2 = listTop3;
                                scrimGroup.transitionParams.cell.drawBackground(canvas, (int) l, (int) t, num4, num6, scrimGroup.transitionParams.pinnedTop, scrimGroup.transitionParams.pinnedBotton, selected, ChatActivity.this.contentView.getKeyboardHeight());
                                canvas.restore();
                                groupedBackgroundWasDraw = true;
                            }
                            if (cell2 != null && cell2.getPhotoImage().isAnimationRunning()) {
                                invalidate();
                            }
                            float viewClipLeft2 = ChatActivity.this.chatListView.getLeft();
                            float viewClipTop2 = listTop2;
                            float viewClipRight2 = ChatActivity.this.chatListView.getRight();
                            float viewClipBottom3 = (ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListView.getMeasuredHeight()) - ChatActivity.this.blurredViewBottomOffset;
                            if (ChatActivity.this.mentionContainer != null) {
                                viewClipTop2 += ChatActivity.this.mentionContainer.clipTop();
                                viewClipBottom3 -= ChatActivity.this.mentionContainer.clipBottom();
                            }
                            if (cell2 == null || !cell2.getTransitionParams().animateBackgroundBoundsInner) {
                                viewClipLeft = Math.max(viewClipLeft2, ChatActivity.this.chatListView.getLeft() + child.getX());
                                viewClipTop = Math.max(viewClipTop2, ChatActivity.this.chatListView.getTop() + child.getY());
                                viewClipRight = Math.min(viewClipRight2, ChatActivity.this.chatListView.getLeft() + child.getX() + child.getMeasuredWidth());
                                viewClipBottom = Math.min(viewClipBottom3, ChatActivity.this.chatListView.getY() + child.getY() + child.getMeasuredHeight());
                            } else {
                                viewClipLeft = viewClipLeft2;
                                viewClipTop = viewClipTop2;
                                viewClipRight = viewClipRight2;
                                viewClipBottom = viewClipBottom3;
                            }
                            if (viewClipTop >= viewClipBottom) {
                                viewClipBottom2 = viewClipBottom;
                                child2 = child;
                            } else {
                                if (child.getAlpha() != 1.0f) {
                                    viewClipBottom2 = viewClipBottom;
                                    canvas.saveLayerAlpha(viewClipLeft, viewClipTop, viewClipRight, viewClipBottom, (int) (child.getAlpha() * 255.0f), 31);
                                } else {
                                    viewClipBottom2 = viewClipBottom;
                                    canvas.save();
                                }
                                if (cell2 != null) {
                                    cell2.setInvalidatesParent(true);
                                    cell2.setScrimReaction(ChatActivity.this.scrimViewReaction);
                                }
                                canvas.clipRect(viewClipLeft, viewClipTop, viewClipRight, viewClipBottom2);
                                canvas.translate(ChatActivity.this.chatListView.getLeft() + child.getX(), ChatActivity.this.chatListView.getY() + child.getY());
                                if (cell2 != null && scrimGroup2 == null && cell2.drawBackgroundInParent()) {
                                    cell2.drawBackgroundInternal(canvas, true);
                                }
                                child2 = child;
                                child2.draw(canvas);
                                if (cell2 != null && cell2.hasOutboundsContent()) {
                                    cell2.drawOutboundsContent(canvas);
                                }
                                canvas.restore();
                                if (cell2 != null) {
                                    cell2.setInvalidatesParent(false);
                                    cell2.setScrimReaction(null);
                                }
                            }
                            if (position2 != null || (cell2 != null && cell2.getTransitionParams().animateBackgroundBoundsInner)) {
                                if (position2 == null || position2.last || (position2.minX == 0 && position2.minY == 0)) {
                                    if (position2 == null || position2.last) {
                                        this.drawTimeAfter.add(cell2);
                                    }
                                    if (position2 == null || (position2.minX == 0 && position2.minY == 0 && cell2.hasNameLayout())) {
                                        this.drawNamesAfter.add(cell2);
                                    }
                                }
                                if (position2 == null || (position2.flags & 8) != 0) {
                                    this.drawCaptionAfter.add(cell2);
                                }
                            }
                            if (ChatActivity.this.scrimViewReaction != null && cell2 != null) {
                                ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * ChatActivity.this.scrimViewAlpha));
                                canvas.drawRect(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
                                if (viewClipTop < viewClipBottom2) {
                                    float alpha2 = child2.getAlpha() * ChatActivity.this.scrimViewAlpha;
                                    if (alpha2 < 1.0f) {
                                        child3 = child2;
                                        canvas.saveLayerAlpha(viewClipLeft, viewClipTop, viewClipRight, viewClipBottom2, (int) (alpha2 * 255.0f), 31);
                                    } else {
                                        child3 = child2;
                                        canvas.save();
                                    }
                                    canvas.clipRect(viewClipLeft, viewClipTop, viewClipRight, viewClipBottom2);
                                    canvas.translate(ChatActivity.this.chatListView.getLeft() + child3.getX(), ChatActivity.this.chatListView.getY() + child3.getY());
                                    cell2.drawScrimReaction(canvas, ChatActivity.this.scrimViewReaction);
                                    canvas.restore();
                                }
                            }
                        }
                        num3 = num2 + 1;
                        count = num;
                        scrimGroup = scrimGroup2;
                        listTop3 = listTop2;
                        f = 0.0f;
                        z = true;
                    }
                    float listTop4 = listTop3;
                    int size = this.drawTimeAfter.size();
                    if (size <= 0) {
                        listTop = listTop4;
                    } else {
                        for (int a3 = 0; a3 < size; a3++) {
                            drawChildElement(canvas, listTop4, this.drawTimeAfter.get(a3), 0);
                        }
                        listTop = listTop4;
                        this.drawTimeAfter.clear();
                    }
                    int size2 = this.drawNamesAfter.size();
                    if (size2 > 0) {
                        for (int a4 = 0; a4 < size2; a4++) {
                            drawChildElement(canvas, listTop, this.drawNamesAfter.get(a4), 1);
                        }
                        this.drawNamesAfter.clear();
                    }
                    int size3 = this.drawCaptionAfter.size();
                    if (size3 > 0) {
                        for (int a5 = 0; a5 < size3; a5++) {
                            ChatMessageCell cell5 = this.drawCaptionAfter.get(a5);
                            if (cell5.getCurrentPosition() != null || cell5.getTransitionParams().animateBackgroundBoundsInner) {
                                drawChildElement(canvas, listTop, cell5, 2);
                            }
                        }
                        this.drawCaptionAfter.clear();
                    }
                } else {
                    int c = canvas.save();
                    if (ChatActivity.this.scrimViewAlpha < 1.0f) {
                        canvas.saveLayerAlpha(ChatActivity.this.scrimView.getLeft(), ChatActivity.this.scrimView.getTop(), ChatActivity.this.scrimView.getRight(), ChatActivity.this.scrimView.getBottom(), (int) (ChatActivity.this.scrimViewAlpha * 255.0f), 31);
                    }
                    canvas.translate(ChatActivity.this.scrimView.getLeft(), ChatActivity.this.scrimView.getTop());
                    if (ChatActivity.this.scrimView == ChatActivity.this.actionBar.getBackButton()) {
                        int r2 = Math.max(ChatActivity.this.scrimView.getMeasuredWidth(), ChatActivity.this.scrimView.getMeasuredHeight()) / 2;
                        canvas.drawCircle(r2, r2, r2 * 0.7f, ChatActivity.this.actionBarBackgroundPaint);
                    }
                    ChatActivity.this.scrimView.draw(canvas);
                    canvas.restoreToCount(c);
                    if (ChatActivity.this.scrimViewAlpha < 1.0f) {
                        ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * (1.0f - ChatActivity.this.scrimViewAlpha)));
                        canvas.drawRect(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
                    }
                }
                if (ChatActivity.this.scrimViewReaction == null && ChatActivity.this.scrimViewAlpha < 1.0f) {
                    ChatActivity.this.scrimPaint.setAlpha((int) (ChatActivity.this.scrimPaintAlpha * 255.0f * (1.0f - ChatActivity.this.scrimViewAlpha)));
                    canvas.drawRect(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), ChatActivity.this.scrimPaint);
                }
            }
            if (ChatActivity.this.scrimView != null || ChatActivity.this.messageEnterTransitionContainer.isRunning()) {
                if (ChatActivity.this.mentionContainer == null || ChatActivity.this.mentionContainer.getVisibility() != 0) {
                    if (ChatActivity.this.pagedownButton != null && ChatActivity.this.pagedownButton.getTag() != null) {
                        super.drawChild(canvas, ChatActivity.this.pagedownButton, SystemClock.uptimeMillis());
                    }
                    if (ChatActivity.this.mentiondownButton != null && ChatActivity.this.mentiondownButton.getTag() != null) {
                        super.drawChild(canvas, ChatActivity.this.mentiondownButton, SystemClock.uptimeMillis());
                    }
                    if (ChatActivity.this.reactionsMentiondownButton != null && ChatActivity.this.reactionsMentiondownButton.getTag() != null) {
                        super.drawChild(canvas, ChatActivity.this.reactionsMentiondownButton, SystemClock.uptimeMillis());
                    }
                }
                if (ChatActivity.this.floatingDateView != null && ChatActivity.this.floatingDateView.getTag() != null) {
                    super.drawChild(canvas, ChatActivity.this.floatingDateView, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.fireworksOverlay != null) {
                    super.drawChild(canvas, ChatActivity.this.fireworksOverlay, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.gifHintTextView != null) {
                    super.drawChild(canvas, ChatActivity.this.gifHintTextView, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.undoView != null && ChatActivity.this.undoView.getVisibility() == 0) {
                    super.drawChild(canvas, ChatActivity.this.undoView, SystemClock.uptimeMillis());
                }
                if (ChatActivity.this.topUndoView != null && ChatActivity.this.undoView.getVisibility() == 0) {
                    super.drawChild(canvas, ChatActivity.this.topUndoView, SystemClock.uptimeMillis());
                }
            }
            if (ChatActivity.this.fixedKeyboardHeight > 0 && this.keyboardHeight < AndroidUtilities.dp(20.0f)) {
                int color2 = ChatActivity.this.getThemedColor(Theme.key_windowBackgroundWhite);
                if (this.backgroundPaint == null) {
                    this.backgroundPaint = new Paint();
                }
                if (this.backgroundColor != color2) {
                    Paint paint2 = this.backgroundPaint;
                    this.backgroundColor = color2;
                    paint2.setColor(color2);
                }
                canvas.drawRect(0.0f, getMeasuredHeight() - ChatActivity.this.fixedKeyboardHeight, getMeasuredWidth(), getMeasuredHeight(), this.backgroundPaint);
            }
            if (ChatActivity.this.pullingDownDrawable != null && ChatActivity.this.pullingDownDrawable.needDrawBottomPanel()) {
                if (ChatActivity.this.chatActivityEnterView == null || ChatActivity.this.chatActivityEnterView.getVisibility() != 0) {
                    top = ChatActivity.this.bottomOverlayChat.getTop() + AndroidUtilities.dp2(2.0f);
                    bottom = ChatActivity.this.bottomOverlayChat.getBottom();
                } else {
                    top = ChatActivity.this.chatActivityEnterView.getTop() + AndroidUtilities.dp2(2.0f);
                    bottom = ChatActivity.this.chatActivityEnterView.getBottom();
                }
                ChatActivity.this.pullingDownDrawable.drawBottomPanel(canvas, top - ((int) ((ChatActivity.this.pullingDownAnimateToActivity == null ? 0.0f : ChatActivity.this.pullingDownAnimateToActivity.pullingBottomOffset) * ChatActivity.this.pullingDownAnimateProgress)), bottom, getMeasuredWidth());
            }
            if (ChatActivity.this.pullingDownAnimateToActivity != null) {
                canvas.saveLayerAlpha(0.0f, 0.0f, getMeasuredWidth(), getMeasuredHeight(), (int) (ChatActivity.this.pullingDownAnimateProgress * 255.0f), 31);
                ChatActivity.this.pullingDownAnimateToActivity.fragmentView.draw(canvas);
                canvas.restore();
            }
            ChatActivity.this.emojiAnimationsOverlay.draw(canvas);
        }

        @Override // android.widget.FrameLayout, android.view.View
        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
            int keyboardSize;
            boolean waitingChatListItemAnimator;
            int listViewTopHeight;
            int i;
            View child;
            int height;
            int maxHeight;
            int h;
            int p;
            ChatActivity chatActivity;
            int widthSize = View.MeasureSpec.getSize(widthMeasureSpec);
            int heightSize = View.MeasureSpec.getSize(heightMeasureSpec);
            if (this.lastWidth != widthSize) {
                ChatActivity.this.globalIgnoreLayout = true;
                this.lastWidth = widthMeasureSpec;
                if (ChatActivity.this.inPreviewMode || ChatActivity.this.currentUser == null || !ChatActivity.this.currentUser.self) {
                    ChatActivity.this.showSearchAsIcon = false;
                } else {
                    SimpleTextView textView = ChatActivity.this.avatarContainer.getTitleTextView();
                    int textWidth = (int) textView.getPaint().measureText(textView.getText(), 0, textView.getText().length());
                    if (widthSize - AndroidUtilities.dp(152.0f) <= AndroidUtilities.dp(10.0f) + textWidth) {
                        ChatActivity.this.showSearchAsIcon = false;
                    } else {
                        ChatActivity.this.showSearchAsIcon = !chatActivity.showAudioCallAsIcon;
                    }
                }
                if (ChatActivity.this.showSearchAsIcon || ChatActivity.this.showAudioCallAsIcon) {
                    if (ChatActivity.this.avatarContainer != null && ChatActivity.this.avatarContainer.getLayoutParams() != null) {
                        ((ViewGroup.MarginLayoutParams) ChatActivity.this.avatarContainer.getLayoutParams()).rightMargin = AndroidUtilities.dp(96.0f);
                    }
                } else if (ChatActivity.this.avatarContainer != null && ChatActivity.this.avatarContainer.getLayoutParams() != null) {
                    ((ViewGroup.MarginLayoutParams) ChatActivity.this.avatarContainer.getLayoutParams()).rightMargin = AndroidUtilities.dp(40.0f);
                }
                if (ChatActivity.this.showSearchAsIcon) {
                    if (!ChatActivity.this.actionBar.isSearchFieldVisible() && ChatActivity.this.searchIconItem != null) {
                        ChatActivity.this.searchIconItem.setVisibility(0);
                    }
                    if (ChatActivity.this.headerItem != null) {
                        ChatActivity.this.headerItem.hideSubItem(40);
                    }
                } else {
                    if (ChatActivity.this.headerItem != null) {
                        ChatActivity.this.headerItem.showSubItem(40);
                    }
                    if (ChatActivity.this.searchIconItem != null) {
                        ChatActivity.this.searchIconItem.setVisibility(8);
                    }
                }
                if (!ChatActivity.this.actionBar.isSearchFieldVisible() && ChatActivity.this.audioCallIconItem != null) {
                    ChatActivity.this.audioCallIconItem.setVisibility((!ChatActivity.this.showAudioCallAsIcon || ChatActivity.this.showSearchAsIcon) ? 8 : 0);
                }
                if (ChatActivity.this.headerItem != null) {
                    TLRPC.UserFull userInfo = ChatActivity.this.getCurrentUserInfo();
                    if (ChatActivity.this.showAudioCallAsIcon) {
                        ChatActivity.this.headerItem.hideSubItem(32);
                    } else if (userInfo != null && userInfo.phone_calls_available) {
                        ChatActivity.this.headerItem.showSubItem(32, true);
                    }
                }
                ChatActivity.this.globalIgnoreLayout = false;
            }
            setMeasuredDimension(widthSize, heightSize);
            int heightSize2 = heightSize - getPaddingTop();
            measureChildWithMargins(ChatActivity.this.actionBar, widthMeasureSpec, 0, heightMeasureSpec, 0);
            int actionBarHeight = ChatActivity.this.actionBar.getMeasuredHeight();
            if (ChatActivity.this.actionBar.getVisibility() == 0) {
                heightSize2 -= actionBarHeight;
            }
            int keyboardHeightOld = this.keyboardHeight + ChatActivity.this.chatEmojiViewPadding;
            boolean keyboardVisibleOld = this.keyboardHeight + ChatActivity.this.chatEmojiViewPadding >= AndroidUtilities.dp(20.0f);
            if (this.lastHeight != heightSize) {
                measureKeyboardHeight();
            }
            int keyboardSize2 = getKeyboardHeight();
            if (ChatActivity.this.fixedKeyboardHeight > 0 && keyboardSize2 <= AndroidUtilities.dp(20.0f)) {
                ChatActivity chatActivity2 = ChatActivity.this;
                chatActivity2.chatEmojiViewPadding = chatActivity2.fixedKeyboardHeight;
            } else if (keyboardSize2 > AndroidUtilities.dp(20.0f)) {
                ChatActivity.this.chatEmojiViewPadding = 0;
            } else {
                ChatActivity chatActivity3 = ChatActivity.this;
                chatActivity3.chatEmojiViewPadding = chatActivity3.chatActivityEnterView.isPopupShowing() ? ChatActivity.this.chatActivityEnterView.getEmojiPadding() : 0;
            }
            setEmojiKeyboardHeight(ChatActivity.this.chatEmojiViewPadding);
            boolean keyboardVisible = this.keyboardHeight + ChatActivity.this.chatEmojiViewPadding >= AndroidUtilities.dp(20.0f);
            boolean waitingChatListItemAnimator2 = false;
            if (MediaController.getInstance().getPlayingMessageObject() == null || !MediaController.getInstance().getPlayingMessageObject().isRoundVideo() || keyboardVisibleOld == keyboardVisible) {
                waitingChatListItemAnimator = false;
                keyboardSize = keyboardSize2;
            } else {
                int i2 = 0;
                while (true) {
                    if (i2 >= ChatActivity.this.chatListView.getChildCount()) {
                        waitingChatListItemAnimator = waitingChatListItemAnimator2;
                        keyboardSize = keyboardSize2;
                        break;
                    }
                    View child2 = ChatActivity.this.chatListView.getChildAt(i2);
                    if (child2 instanceof ChatMessageCell) {
                        ChatMessageCell cell = (ChatMessageCell) child2;
                        MessageObject messageObject = cell.getMessageObject();
                        if (messageObject.isRoundVideo() && MediaController.getInstance().isPlayingMessage(messageObject) && (p = ChatActivity.this.chatListView.getChildAdapterPosition(child2)) >= 0) {
                            keyboardSize = keyboardSize2;
                            ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(p, (int) (((((ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.chatListViewPaddingTop) - ChatActivity.this.blurredViewBottomOffset) + ((this.keyboardHeight + ChatActivity.this.chatEmojiViewPadding) - keyboardHeightOld)) - (keyboardVisible ? AndroidUtilities.roundMessageSize : AndroidUtilities.roundPlayingMessageSize)) / 2.0f), false);
                            ChatActivity.this.chatAdapter.notifyItemChanged(p);
                            this.adjustPanLayoutHelper.delayAnimation();
                            waitingChatListItemAnimator = true;
                        }
                    }
                    i2++;
                    waitingChatListItemAnimator2 = waitingChatListItemAnimator2;
                    keyboardSize2 = keyboardSize2;
                }
            }
            if (!waitingChatListItemAnimator) {
                ChatActivity.this.chatActivityEnterView.runEmojiPanelAnimation();
            }
            int childCount = getChildCount();
            int keyboardSize3 = keyboardSize;
            measureChildWithMargins(ChatActivity.this.chatActivityEnterView, widthMeasureSpec, 0, heightMeasureSpec, 0);
            if (ChatActivity.this.inPreviewMode) {
                this.inputFieldHeight = 0;
                listViewTopHeight = 0;
            } else {
                this.inputFieldHeight = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                listViewTopHeight = AndroidUtilities.dp(49.0f);
            }
            ChatActivity.this.blurredViewTopOffset = 0;
            ChatActivity.this.blurredViewBottomOffset = 0;
            if (SharedConfig.chatBlurEnabled()) {
                ChatActivity.this.blurredViewTopOffset = actionBarHeight;
                ChatActivity.this.blurredViewBottomOffset = AndroidUtilities.dp(203.0f);
            }
            int i3 = 0;
            while (i3 < childCount) {
                View child3 = getChildAt(i3);
                if (child3 == null || child3.getVisibility() == 8 || child3 == ChatActivity.this.chatActivityEnterView) {
                    i = i3;
                } else if (child3 == ChatActivity.this.actionBar) {
                    i = i3;
                } else if (child3 != this.backgroundView) {
                    if (child3 != ChatActivity.this.blurredView) {
                        if (child3 != ChatActivity.this.chatListView) {
                            i = i3;
                            if (child3 != ChatActivity.this.progressView) {
                                if (child3 != ChatActivity.this.instantCameraView) {
                                    if (child3 == ChatActivity.this.overlayView) {
                                        child = child3;
                                    } else if (child3 != ChatActivity.this.emptyViewContainer) {
                                        if (child3 != ChatActivity.this.messagesSearchListView) {
                                            if (ChatActivity.this.chatActivityEnterView.isPopupView(child3)) {
                                                if (ChatActivity.this.inBubbleMode) {
                                                    child3.measure(View.MeasureSpec.makeMeasureSpec(widthSize, C.BUFFER_FLAG_ENCRYPTED), View.MeasureSpec.makeMeasureSpec((heightSize2 - this.inputFieldHeight) + actionBarHeight + getPaddingTop(), C.BUFFER_FLAG_ENCRYPTED));
                                                } else if (!AndroidUtilities.isInMultiwindow) {
                                                    child3.measure(View.MeasureSpec.makeMeasureSpec(widthSize, C.BUFFER_FLAG_ENCRYPTED), View.MeasureSpec.makeMeasureSpec(child3.getLayoutParams().height, C.BUFFER_FLAG_ENCRYPTED));
                                                } else if (AndroidUtilities.isTablet()) {
                                                    child3.measure(View.MeasureSpec.makeMeasureSpec(widthSize, C.BUFFER_FLAG_ENCRYPTED), View.MeasureSpec.makeMeasureSpec(Math.min(AndroidUtilities.dp(320.0f), (((heightSize2 - this.inputFieldHeight) + actionBarHeight) - AndroidUtilities.statusBarHeight) + getPaddingTop()), C.BUFFER_FLAG_ENCRYPTED));
                                                } else {
                                                    child3.measure(View.MeasureSpec.makeMeasureSpec(widthSize, C.BUFFER_FLAG_ENCRYPTED), View.MeasureSpec.makeMeasureSpec((((heightSize2 - this.inputFieldHeight) + actionBarHeight) - AndroidUtilities.statusBarHeight) + getPaddingTop(), C.BUFFER_FLAG_ENCRYPTED));
                                                }
                                            } else if (child3 != ChatActivity.this.mentionContainer) {
                                                if (child3 != ChatActivity.this.textSelectionHelper.getOverlayView(this.val$context)) {
                                                    if (child3 == ChatActivity.this.forwardingPreviewView) {
                                                        int contentWidthSpec = View.MeasureSpec.makeMeasureSpec(widthSize, C.BUFFER_FLAG_ENCRYPTED);
                                                        int h2 = heightSize - AndroidUtilities.statusBarHeight;
                                                        if (keyboardSize3 > AndroidUtilities.dp(20.0f) && getLayoutParams().height < 0) {
                                                            h2 += keyboardSize3;
                                                        }
                                                        int contentHeightSpec = View.MeasureSpec.makeMeasureSpec(h2, C.BUFFER_FLAG_ENCRYPTED);
                                                        child3.measure(contentWidthSpec, contentHeightSpec);
                                                    } else {
                                                        measureChildWithMargins(child3, widthMeasureSpec, 0, heightMeasureSpec, 0);
                                                    }
                                                } else {
                                                    int contentWidthSpec2 = View.MeasureSpec.makeMeasureSpec(widthSize, C.BUFFER_FLAG_ENCRYPTED);
                                                    int h3 = ChatActivity.this.blurredViewTopOffset + heightSize2;
                                                    if (keyboardSize3 <= AndroidUtilities.dp(20.0f) || getLayoutParams().height >= 0) {
                                                        ChatActivity.this.textSelectionHelper.setKeyboardSize(0);
                                                    } else {
                                                        h3 += keyboardSize3;
                                                        ChatActivity.this.textSelectionHelper.setKeyboardSize(keyboardSize3);
                                                    }
                                                    child3.measure(contentWidthSpec2, View.MeasureSpec.makeMeasureSpec(h3, C.BUFFER_FLAG_ENCRYPTED));
                                                }
                                            } else {
                                                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) ChatActivity.this.mentionContainer.getLayoutParams();
                                                if (ChatActivity.this.mentionContainer.getAdapter().isBannedInline()) {
                                                    child3.measure(View.MeasureSpec.makeMeasureSpec(widthSize, C.BUFFER_FLAG_ENCRYPTED), View.MeasureSpec.makeMeasureSpec(heightSize2, Integer.MIN_VALUE));
                                                } else {
                                                    ChatActivity.this.mentionContainer.setIgnoreLayout(true);
                                                    LinearLayoutManager layoutManager = ChatActivity.this.mentionContainer.getCurrentLayoutManager();
                                                    if (!(layoutManager instanceof ExtendedGridLayoutManager)) {
                                                        int size = ChatActivity.this.mentionContainer.getAdapter().getLastItemCount();
                                                        int maxHeight2 = 0;
                                                        if (!ChatActivity.this.mentionContainer.getAdapter().isBotContext()) {
                                                            maxHeight = 0 + (size * 36);
                                                        } else {
                                                            if (ChatActivity.this.mentionContainer.getAdapter().getBotContextSwitch() != null) {
                                                                maxHeight2 = 0 + 36;
                                                                size--;
                                                            }
                                                            maxHeight = maxHeight2 + (size * 68);
                                                        }
                                                        height = (maxHeight != 0 ? AndroidUtilities.dp(2.0f) : 0) + (heightSize2 - ChatActivity.this.chatActivityEnterView.getMeasuredHeight());
                                                    } else {
                                                        int maxHeight3 = ((ExtendedGridLayoutManager) layoutManager).getRowsCount(widthSize) * 102;
                                                        if (ChatActivity.this.mentionContainer.getAdapter().isBotContext() && ChatActivity.this.mentionContainer.getAdapter().getBotContextSwitch() != null) {
                                                            maxHeight3 += 34;
                                                        }
                                                        height = (heightSize2 - ChatActivity.this.chatActivityEnterView.getMeasuredHeight()) + (maxHeight3 != 0 ? AndroidUtilities.dp(2.0f) : 0);
                                                        Math.max(0, height - AndroidUtilities.dp(Math.min(maxHeight3, 122.399994f)));
                                                    }
                                                    layoutParams.height = height;
                                                    layoutParams.topMargin = 0;
                                                    ChatActivity.this.mentionContainer.setIgnoreLayout(false);
                                                    child3.measure(View.MeasureSpec.makeMeasureSpec(widthSize, C.BUFFER_FLAG_ENCRYPTED), View.MeasureSpec.makeMeasureSpec(layoutParams.height, C.BUFFER_FLAG_ENCRYPTED));
                                                }
                                                ChatActivity.this.mentionContainer.setTranslationY(ChatActivity.this.chatActivityEnterView.getAnimatedTop());
                                            }
                                        } else {
                                            int contentWidthSpec3 = View.MeasureSpec.makeMeasureSpec(widthSize, C.BUFFER_FLAG_ENCRYPTED);
                                            int contentHeightSpec2 = View.MeasureSpec.makeMeasureSpec((heightSize - actionBarHeight) - AndroidUtilities.dp(48.0f), C.BUFFER_FLAG_ENCRYPTED);
                                            child3.measure(contentWidthSpec3, contentHeightSpec2);
                                        }
                                    } else {
                                        int contentWidthSpec4 = View.MeasureSpec.makeMeasureSpec(widthSize, C.BUFFER_FLAG_ENCRYPTED);
                                        int contentHeightSpec3 = View.MeasureSpec.makeMeasureSpec(heightSize2, C.BUFFER_FLAG_ENCRYPTED);
                                        child3.measure(contentWidthSpec4, contentHeightSpec3);
                                    }
                                } else {
                                    child = child3;
                                }
                                int contentWidthSpec5 = View.MeasureSpec.makeMeasureSpec(widthSize, C.BUFFER_FLAG_ENCRYPTED);
                                int contentHeightSpec4 = View.MeasureSpec.makeMeasureSpec(((heightSize - this.inputFieldHeight) - ChatActivity.this.chatEmojiViewPadding) + AndroidUtilities.dp(3.0f), C.BUFFER_FLAG_ENCRYPTED);
                                child.measure(contentWidthSpec5, contentHeightSpec4);
                            } else {
                                int contentWidthSpec6 = View.MeasureSpec.makeMeasureSpec(widthSize, C.BUFFER_FLAG_ENCRYPTED);
                                int contentHeightSpec5 = View.MeasureSpec.makeMeasureSpec(Math.max(AndroidUtilities.dp(10.0f), ((heightSize2 - this.inputFieldHeight) - ((!ChatActivity.this.inPreviewMode || Build.VERSION.SDK_INT < 21) ? 0 : AndroidUtilities.statusBarHeight)) + AndroidUtilities.dp((ChatActivity.this.chatActivityEnterView.isTopViewVisible() ? 48 : 0) + 2)), C.BUFFER_FLAG_ENCRYPTED);
                                child3.measure(contentWidthSpec6, contentHeightSpec5);
                            }
                        } else {
                            int contentWidthSpec7 = View.MeasureSpec.makeMeasureSpec(widthSize, C.BUFFER_FLAG_ENCRYPTED);
                            int h4 = ((heightSize2 - listViewTopHeight) - ((!ChatActivity.this.inPreviewMode || Build.VERSION.SDK_INT < 21) ? 0 : AndroidUtilities.statusBarHeight)) + ChatActivity.this.blurredViewTopOffset + ChatActivity.this.blurredViewBottomOffset;
                            if (keyboardSize3 > AndroidUtilities.dp(20.0f) && getLayoutParams().height < 0) {
                                h = h4 + keyboardSize3;
                            } else {
                                h = h4;
                            }
                            i = i3;
                            int i4 = AndroidUtilities.dp(10.0f);
                            int contentHeightSpec6 = View.MeasureSpec.makeMeasureSpec(Math.max(i4, h), C.BUFFER_FLAG_ENCRYPTED);
                            child3.measure(contentWidthSpec7, contentHeightSpec6);
                        }
                    } else {
                        int h5 = heightSize;
                        if (keyboardSize3 > AndroidUtilities.dp(20.0f) && getLayoutParams().height < 0) {
                            h5 += keyboardSize3;
                        }
                        int contentWidthSpec8 = View.MeasureSpec.makeMeasureSpec(widthSize, C.BUFFER_FLAG_ENCRYPTED);
                        int contentHeightSpec7 = View.MeasureSpec.makeMeasureSpec(h5, C.BUFFER_FLAG_ENCRYPTED);
                        child3.measure(contentWidthSpec8, contentHeightSpec7);
                        i = i3;
                    }
                } else {
                    int contentWidthSpec9 = View.MeasureSpec.makeMeasureSpec(widthSize, C.BUFFER_FLAG_ENCRYPTED);
                    int contentHeightSpec8 = View.MeasureSpec.makeMeasureSpec(heightSize, C.BUFFER_FLAG_ENCRYPTED);
                    child3.measure(contentWidthSpec9, contentHeightSpec8);
                    i = i3;
                }
                i3 = i + 1;
            }
            if (ChatActivity.this.fixPaddingsInLayout) {
                ChatActivity.this.globalIgnoreLayout = true;
                ChatActivity.this.invalidateChatListViewTopPadding();
                ChatActivity.this.invalidateMessagesVisiblePart();
                ChatActivity.this.fixPaddingsInLayout = false;
                ChatActivity.this.chatListView.measure(View.MeasureSpec.makeMeasureSpec(ChatActivity.this.chatListView.getMeasuredWidth(), C.BUFFER_FLAG_ENCRYPTED), View.MeasureSpec.makeMeasureSpec(ChatActivity.this.chatListView.getMeasuredHeight(), C.BUFFER_FLAG_ENCRYPTED));
                ChatActivity.this.globalIgnoreLayout = false;
            }
            if (ChatActivity.this.scrollToPositionOnRecreate != -1) {
                final int scrollTo = ChatActivity.this.scrollToPositionOnRecreate;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$13$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.AnonymousClass13.this.m1994lambda$onMeasure$1$orgtelegramuiChatActivity$13(scrollTo);
                    }
                });
                ChatActivity.this.scrollToPositionOnRecreate = -1;
            }
            ChatActivity.this.updateBulletinLayout();
            this.lastHeight = heightSize;
        }

        /* renamed from: lambda$onMeasure$1$org-telegram-ui-ChatActivity$13 */
        public /* synthetic */ void m1994lambda$onMeasure$1$orgtelegramuiChatActivity$13(int scrollTo) {
            ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(scrollTo, ChatActivity.this.scrollToOffsetOnRecreate);
        }

        @Override // android.view.View, android.view.ViewParent
        public void requestLayout() {
            if (ChatActivity.this.globalIgnoreLayout) {
                return;
            }
            super.requestLayout();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout, android.widget.FrameLayout, android.view.ViewGroup, android.view.View
        public void onLayout(boolean changed, int l, int t, int r, int b) {
            int paddingBottom;
            int childLeft;
            int childTop;
            int count = getChildCount();
            int keyboardSize = getKeyboardHeight();
            if (ChatActivity.this.fixedKeyboardHeight > 0 && keyboardSize <= AndroidUtilities.dp(20.0f)) {
                paddingBottom = ChatActivity.this.fixedKeyboardHeight;
            } else {
                paddingBottom = (keyboardSize > AndroidUtilities.dp(20.0f) || AndroidUtilities.isInMultiwindow || ChatActivity.this.inBubbleMode) ? 0 : ChatActivity.this.chatActivityEnterView.getEmojiPadding();
            }
            if (!SharedConfig.smoothKeyboard) {
                setBottomClip(paddingBottom);
            }
            for (int i = 0; i < count; i++) {
                View child = getChildAt(i);
                if (child != null && child.getVisibility() != 8) {
                    FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) child.getLayoutParams();
                    int width = child.getMeasuredWidth();
                    int height = child.getMeasuredHeight();
                    int gravity = lp.gravity;
                    if (gravity == -1) {
                        gravity = 51;
                    }
                    int absoluteGravity = gravity & 7;
                    int verticalGravity = gravity & 112;
                    switch (absoluteGravity & 7) {
                        case 1:
                            childLeft = ((((r - l) - width) / 2) + lp.leftMargin) - lp.rightMargin;
                            break;
                        case 5:
                            childLeft = (r - width) - lp.rightMargin;
                            break;
                        default:
                            childLeft = lp.leftMargin;
                            break;
                    }
                    switch (verticalGravity) {
                        case 16:
                            childTop = (((((b - paddingBottom) - t) - height) / 2) + lp.topMargin) - lp.bottomMargin;
                            break;
                        case 48:
                            int childTop2 = lp.topMargin + getPaddingTop();
                            if (child != ChatActivity.this.actionBar && ChatActivity.this.actionBar.getVisibility() == 0) {
                                childTop2 += ChatActivity.this.actionBar.getMeasuredHeight();
                                if (ChatActivity.this.inPreviewMode && Build.VERSION.SDK_INT >= 21) {
                                    childTop = childTop2 + AndroidUtilities.statusBarHeight;
                                    break;
                                }
                            }
                            childTop = childTop2;
                            break;
                        case UndoView.ACTION_EMAIL_COPIED /* 80 */:
                            childTop = (((b - paddingBottom) - t) - height) - lp.bottomMargin;
                            break;
                        default:
                            childTop = lp.topMargin;
                            break;
                    }
                    if (child != ChatActivity.this.blurredView && child != this.backgroundView) {
                        if (!(child instanceof HintView) && !(child instanceof ChecksHintView)) {
                            if (child != ChatActivity.this.mentionContainer) {
                                if (child != ChatActivity.this.pagedownButton && child != ChatActivity.this.mentiondownButton) {
                                    if (child != ChatActivity.this.reactionsMentiondownButton) {
                                        if (child == ChatActivity.this.emptyViewContainer) {
                                            childTop -= (this.inputFieldHeight / 2) - (ChatActivity.this.actionBar.getVisibility() == 0 ? ChatActivity.this.actionBar.getMeasuredHeight() / 2 : 0);
                                        } else if (!ChatActivity.this.chatActivityEnterView.isPopupView(child)) {
                                            if (child != ChatActivity.this.gifHintTextView && child != ChatActivity.this.voiceHintTextView) {
                                                if (child != ChatActivity.this.mediaBanTooltip) {
                                                    if (child != ChatActivity.this.chatListView && child != ChatActivity.this.floatingDateView && child != ChatActivity.this.infoTopView) {
                                                        if (child != ChatActivity.this.progressView) {
                                                            if (child == ChatActivity.this.actionBar) {
                                                                if (ChatActivity.this.inPreviewMode && Build.VERSION.SDK_INT >= 21) {
                                                                    childTop += AndroidUtilities.statusBarHeight;
                                                                }
                                                                childTop -= getPaddingTop();
                                                            } else if (child != ChatActivity.this.videoPlayerContainer) {
                                                                if (child != ChatActivity.this.instantCameraView && child != ChatActivity.this.overlayView && child != ChatActivity.this.animatingImageView) {
                                                                    if (child == ChatActivity.this.textSelectionHelper.getOverlayView(this.val$context)) {
                                                                        int childTop3 = childTop - paddingBottom;
                                                                        if (keyboardSize > AndroidUtilities.dp(20.0f) && getLayoutParams().height < 0) {
                                                                            childTop3 -= keyboardSize;
                                                                        }
                                                                        childTop = childTop3 - ChatActivity.this.blurredViewTopOffset;
                                                                    } else if (ChatActivity.this.chatActivityEnterView != null && child == ChatActivity.this.chatActivityEnterView.botCommandsMenuContainer) {
                                                                        childTop -= this.inputFieldHeight;
                                                                    } else if (child == ChatActivity.this.forwardingPreviewView) {
                                                                        childTop = AndroidUtilities.statusBarHeight;
                                                                    }
                                                                } else {
                                                                    childTop = 0;
                                                                }
                                                            } else {
                                                                childTop = ChatActivity.this.actionBar.getMeasuredHeight() - paddingBottom;
                                                                if (keyboardSize > AndroidUtilities.dp(20.0f) && getLayoutParams().height < 0) {
                                                                    childTop -= keyboardSize;
                                                                }
                                                            }
                                                        } else if (ChatActivity.this.chatActivityEnterView.isTopViewVisible()) {
                                                            childTop -= AndroidUtilities.dp(48.0f);
                                                        }
                                                    } else {
                                                        int childTop4 = childTop - ChatActivity.this.blurredViewTopOffset;
                                                        if (!ChatActivity.this.inPreviewMode) {
                                                            childTop4 -= this.inputFieldHeight - AndroidUtilities.dp(51.0f);
                                                        }
                                                        childTop = childTop4 - paddingBottom;
                                                        if (keyboardSize > AndroidUtilities.dp(20.0f) && getLayoutParams().height < 0) {
                                                            childTop -= keyboardSize;
                                                        }
                                                    }
                                                }
                                            }
                                            childTop -= this.inputFieldHeight;
                                        } else {
                                            childTop = (AndroidUtilities.isInMultiwindow || ChatActivity.this.inBubbleMode) ? (ChatActivity.this.chatActivityEnterView.getTop() - child.getMeasuredHeight()) + AndroidUtilities.dp(1.0f) : ChatActivity.this.chatActivityEnterView.getBottom();
                                        }
                                    }
                                }
                                if (!ChatActivity.this.inPreviewMode) {
                                    childTop -= ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                                }
                            } else {
                                childTop -= ChatActivity.this.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(2.0f);
                                ChatActivity.this.mentionContainer.setTranslationY(ChatActivity.this.chatActivityEnterView.getAnimatedTop());
                            }
                            child.layout(childLeft, childTop, childLeft + width, childTop + height);
                        }
                        childTop = 0;
                        child.layout(childLeft, childTop, childLeft + width, childTop + height);
                    }
                    childTop = 0;
                    child.layout(childLeft, childTop, childLeft + width, childTop + height);
                }
            }
            ChatActivity.this.invalidateChatListViewTopPadding();
            ChatActivity.this.invalidateMessagesVisiblePart();
            ChatActivity.this.updateTextureViewPosition(false);
            if (!ChatActivity.this.scrollingChatListView) {
                ChatActivity.this.checkAutoDownloadMessages(false);
            }
            notifyHeightChanged();
        }

        public void setNonNoveTranslation(float y) {
            ChatActivity.this.contentView.setTranslationY(y);
            ChatActivity.this.actionBar.setTranslationY(0.0f);
            ChatActivity.this.emptyViewContainer.setTranslationY(0.0f);
            ChatActivity.this.progressView.setTranslationY(0.0f);
            ChatActivity.this.contentPanTranslation = 0.0f;
            ChatActivity.this.contentView.setBackgroundTranslation(0);
            ChatActivity.this.instantCameraView.onPanTranslationUpdate(0.0f);
            if (ChatActivity.this.blurredView != null) {
                ChatActivity.this.blurredView.drawable.onPanTranslationUpdate(0.0f);
            }
            ChatActivity.this.setFragmentPanTranslationOffset(0);
            ChatActivity.this.invalidateChatListViewTopPadding();
        }

        @Override // android.view.View
        public void setPadding(int left, int top, int right, int bottom) {
            ChatActivity.this.contentPaddingTop = top;
            ChatActivity.this.invalidateChatListViewTopPadding();
            ChatActivity.this.invalidateMessagesVisiblePart();
        }

        @Override // android.view.ViewGroup, android.view.View
        public boolean dispatchKeyEvent(KeyEvent event) {
            if (event.getKeyCode() == 4 && event.getAction() == 1 && ChatActivity.this.forwardingPreviewView != null && ChatActivity.this.forwardingPreviewView.isShowing()) {
                ChatActivity.this.forwardingPreviewView.dismiss(true);
                return true;
            }
            return super.dispatchKeyEvent(event);
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.SizeNotifierFrameLayout
        public Drawable getNewDrawable() {
            Drawable drawable = ChatActivity.this.themeDelegate.getWallpaperDrawable();
            return drawable != null ? drawable : super.getNewDrawable();
        }
    }

    public static /* synthetic */ boolean lambda$createView$24(View v, MotionEvent event) {
        return true;
    }

    /* renamed from: lambda$createView$25$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1796lambda$createView$25$orgtelegramuiChatActivity(TLRPC.Document sticker) {
        this.animatingDocuments.put(sticker, 0);
        SendMessagesHelper.getInstance(this.currentAccount).sendSticker(sticker, null, this.dialog_id, null, null, null, null, true, 0);
    }

    /* renamed from: lambda$createView$26$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1797lambda$createView$26$orgtelegramuiChatActivity(TLRPC.Document sticker) {
        this.animatingDocuments.put(sticker, 0);
        SendMessagesHelper.getInstance(this.currentAccount).sendSticker(sticker, null, this.dialog_id, null, null, null, null, true, 0);
    }

    /* renamed from: org.telegram.ui.ChatActivity$14 */
    /* loaded from: classes4.dex */
    public class AnonymousClass14 extends RecyclerListView {
        private float endTrackingX;
        private boolean ignoreLayout;
        private long lastReplyButtonAnimationTime;
        private long lastTrackingAnimationTime;
        private int lastWidth;
        private float replyButtonProgress;
        private boolean slideAnimationInProgress;
        private int startedTrackingPointerId;
        private int startedTrackingX;
        private int startedTrackingY;
        private float trackAnimationProgress;
        private boolean wasTrackingVibrate;
        private final ArrayList<ChatMessageCell> drawTimeAfter = new ArrayList<>();
        private final ArrayList<ChatMessageCell> drawNamesAfter = new ArrayList<>();
        private final ArrayList<ChatMessageCell> drawCaptionAfter = new ArrayList<>();
        private final ArrayList<MessageObject.GroupedMessages> drawingGroups = new ArrayList<>(10);
        int lastH = 0;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass14(Context context, Theme.ResourcesProvider resourcesProvider) {
            super(context, resourcesProvider);
            ChatActivity.this = this$0;
        }

        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.View, android.view.ViewParent
        public void requestLayout() {
            if (this.ignoreLayout) {
                return;
            }
            super.requestLayout();
        }

        @Override // org.telegram.ui.Components.RecyclerListView, android.view.View
        public void setTranslationY(float translationY) {
            if (translationY != getTranslationY()) {
                super.setTranslationY(translationY);
                if (ChatActivity.this.emptyViewContainer != null) {
                    if (ChatActivity.this.chatActivityEnterView == null || !ChatActivity.this.chatActivityEnterView.panelAnimationInProgress()) {
                        ChatActivity.this.emptyViewContainer.setTranslationY(translationY / 1.7f);
                    } else {
                        ChatActivity.this.emptyViewContainer.setTranslationY(translationY / 2.0f);
                    }
                }
                if (ChatActivity.this.chatActivityEnterView != null && ChatActivity.this.chatActivityEnterView.botCommandsMenuContainer != null) {
                    ChatActivity.this.chatActivityEnterView.botCommandsMenuContainer.setTranslationY(translationY);
                }
                ChatActivity.this.invalidateChatListViewTopPadding();
                ChatActivity.this.invalidateMessagesVisiblePart();
            }
        }

        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.View
        public void onLayout(boolean changed, int l, int t, int r, int b) {
            super.onLayout(changed, l, t, r, b);
            if (this.lastWidth != r - l) {
                this.lastWidth = r - l;
                ChatActivity.this.hideHints(false);
            }
            int height = getMeasuredHeight();
            if (this.lastH != height) {
                this.ignoreLayout = true;
                if (ChatActivity.this.chatListItemAnimator != null) {
                    ChatActivity.this.chatListItemAnimator.endAnimations();
                }
                ChatActivity.this.chatScrollHelper.cancel();
                this.ignoreLayout = false;
                this.lastH = height;
            }
            ChatActivity.this.forceScrollToTop = false;
            if (ChatActivity.this.textSelectionHelper != null && ChatActivity.this.textSelectionHelper.isSelectionMode()) {
                ChatActivity.this.textSelectionHelper.invalidate();
            }
        }

        private void setGroupTranslationX(ChatMessageCell view, float dx) {
            MessageObject.GroupedMessages group = view.getCurrentMessagesGroup();
            if (group == null) {
                return;
            }
            int count = getChildCount();
            for (int a = 0; a < count; a++) {
                View child = getChildAt(a);
                if (child != view && (child instanceof ChatMessageCell)) {
                    ChatMessageCell cell = (ChatMessageCell) child;
                    if (cell.getCurrentMessagesGroup() == group) {
                        cell.setSlidingOffset(dx);
                        cell.invalidate();
                    }
                }
            }
            invalidate();
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.ViewParent
        public boolean requestChildRectangleOnScreen(View child, Rect rect, boolean immediate) {
            if (ChatActivity.this.scrimPopupWindow != null) {
                return false;
            }
            return super.requestChildRectangleOnScreen(child, rect, immediate);
        }

        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup
        public boolean onInterceptTouchEvent(MotionEvent e) {
            ChatActivity.this.textSelectionHelper.checkSelectionCancel(e);
            if (!ChatActivity.this.keyboardHideHelper.disableScrolling() && !isFastScrollAnimationRunning()) {
                boolean result = super.onInterceptTouchEvent(e);
                if (ChatActivity.this.actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                    return result;
                }
                processTouchEvent(e);
                return result;
            }
            return false;
        }

        @Override // androidx.recyclerview.widget.RecyclerView
        public void setItemAnimator(RecyclerView.ItemAnimator animator) {
            if (isFastScrollAnimationRunning()) {
                return;
            }
            super.setItemAnimator(animator);
        }

        private void drawReplyButton(Canvas canvas) {
            float scale;
            int alpha;
            int alpha2;
            if (ChatActivity.this.slidingView != null) {
                float translationX = ChatActivity.this.slidingView.getNonAnimationTranslationX(false);
                long newTime = System.currentTimeMillis();
                long dt = Math.min(17L, newTime - this.lastReplyButtonAnimationTime);
                this.lastReplyButtonAnimationTime = newTime;
                boolean z = translationX <= ((float) (-AndroidUtilities.dp(50.0f)));
                boolean showing = z;
                if (z) {
                    float f = this.replyButtonProgress;
                    if (f < 1.0f) {
                        float f2 = f + (((float) dt) / 180.0f);
                        this.replyButtonProgress = f2;
                        if (f2 > 1.0f) {
                            this.replyButtonProgress = 1.0f;
                        } else {
                            invalidate();
                        }
                    }
                } else {
                    float f3 = this.replyButtonProgress;
                    if (f3 > 0.0f) {
                        float f4 = f3 - (((float) dt) / 180.0f);
                        this.replyButtonProgress = f4;
                        if (f4 < 0.0f) {
                            this.replyButtonProgress = 0.0f;
                        } else {
                            invalidate();
                        }
                    }
                }
                Paint chatActionBackgroundPaint = getThemedPaint(Theme.key_paint_chatActionBackground);
                int oldAlpha = chatActionBackgroundPaint.getAlpha();
                if (showing) {
                    float f5 = this.replyButtonProgress;
                    if (f5 <= 0.8f) {
                        scale = (f5 / 0.8f) * 1.2f;
                    } else {
                        scale = 1.2f - (((f5 - 0.8f) / 0.2f) * 0.2f);
                    }
                    alpha = (int) Math.min(255.0f, (f5 / 0.8f) * 255.0f);
                    alpha2 = (int) Math.min(oldAlpha, oldAlpha * (this.replyButtonProgress / 0.8f));
                } else {
                    float scale2 = this.replyButtonProgress;
                    alpha = (int) Math.min(255.0f, this.replyButtonProgress * 255.0f);
                    scale = scale2;
                    alpha2 = (int) Math.min(oldAlpha, oldAlpha * this.replyButtonProgress);
                }
                chatActionBackgroundPaint.setAlpha(alpha2);
                float x = getMeasuredWidth() + (ChatActivity.this.slidingView.getNonAnimationTranslationX(false) / 2.0f);
                float y = ChatActivity.this.slidingView.getTop() + (ChatActivity.this.slidingView.getMeasuredHeight() / 2);
                AndroidUtilities.rectTmp.set((int) (x - (AndroidUtilities.dp(16.0f) * scale)), (int) (y - (AndroidUtilities.dp(16.0f) * scale)), (int) ((AndroidUtilities.dp(16.0f) * scale) + x), (int) ((AndroidUtilities.dp(16.0f) * scale) + y));
                Theme.applyServiceShaderMatrix(getMeasuredWidth(), AndroidUtilities.displaySize.y, 0.0f, getY() + AndroidUtilities.rectTmp.top);
                canvas.drawRoundRect(AndroidUtilities.rectTmp, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), chatActionBackgroundPaint);
                if (ChatActivity.this.themeDelegate.hasGradientService()) {
                    canvas.drawRoundRect(AndroidUtilities.rectTmp, AndroidUtilities.dp(16.0f), AndroidUtilities.dp(16.0f), Theme.chat_actionBackgroundGradientDarkenPaint);
                }
                chatActionBackgroundPaint.setAlpha(oldAlpha);
                Drawable replyIconDrawable = getThemedDrawable(Theme.key_drawable_replyIcon);
                replyIconDrawable.setAlpha(alpha);
                replyIconDrawable.setBounds((int) (x - (AndroidUtilities.dp(7.0f) * scale)), (int) (y - (AndroidUtilities.dp(6.0f) * scale)), (int) ((AndroidUtilities.dp(7.0f) * scale) + x), (int) ((AndroidUtilities.dp(5.0f) * scale) + y));
                replyIconDrawable.draw(canvas);
                replyIconDrawable.setAlpha(255);
            }
        }

        private void processTouchEvent(MotionEvent e) {
            if (e != null) {
                ChatActivity.this.wasManualScroll = true;
            }
            if (e == null || e.getAction() != 0 || ChatActivity.this.startedTrackingSlidingView || ChatActivity.this.maybeStartTrackingSlidingView || ChatActivity.this.slidingView != null || ChatActivity.this.inPreviewMode) {
                if (ChatActivity.this.slidingView == null || e == null || e.getAction() != 2 || e.getPointerId(0) != this.startedTrackingPointerId) {
                    if (ChatActivity.this.slidingView != null) {
                        if (e != null) {
                            if (e.getPointerId(0) != this.startedTrackingPointerId) {
                                return;
                            }
                            if (e.getAction() != 3 && e.getAction() != 1 && e.getAction() != 6) {
                                return;
                            }
                        }
                        if (e != null && e.getAction() != 3 && Math.abs(ChatActivity.this.slidingView.getNonAnimationTranslationX(false)) >= AndroidUtilities.dp(50.0f)) {
                            ChatActivity chatActivity = ChatActivity.this;
                            chatActivity.showFieldPanelForReply(chatActivity.slidingView.getMessageObject());
                        }
                        float slidingOffsetX = ChatActivity.this.slidingView.getSlidingOffsetX();
                        this.endTrackingX = slidingOffsetX;
                        if (slidingOffsetX == 0.0f) {
                            ChatActivity.this.slidingView = null;
                        }
                        this.lastTrackingAnimationTime = System.currentTimeMillis();
                        this.trackAnimationProgress = 0.0f;
                        invalidate();
                        ChatActivity.this.maybeStartTrackingSlidingView = false;
                        ChatActivity.this.startedTrackingSlidingView = false;
                        ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                        return;
                    }
                    return;
                }
                int dx = Math.max(AndroidUtilities.dp(-80.0f), Math.min(0, (int) (e.getX() - this.startedTrackingX)));
                int dy = Math.abs(((int) e.getY()) - this.startedTrackingY);
                if (getScrollState() != 0 || !ChatActivity.this.maybeStartTrackingSlidingView || ChatActivity.this.startedTrackingSlidingView || dx > (-AndroidUtilities.getPixelsInCM(0.4f, true)) || Math.abs(dx) / 3 <= dy) {
                    if (ChatActivity.this.startedTrackingSlidingView) {
                        if (Math.abs(dx) >= AndroidUtilities.dp(50.0f)) {
                            if (!this.wasTrackingVibrate) {
                                try {
                                    performHapticFeedback(3, 2);
                                } catch (Exception e2) {
                                }
                                this.wasTrackingVibrate = true;
                            }
                        } else {
                            this.wasTrackingVibrate = false;
                        }
                        ChatActivity.this.slidingView.setSlidingOffset(dx);
                        MessageObject messageObject = ChatActivity.this.slidingView.getMessageObject();
                        if (messageObject.isRoundVideo() || messageObject.isVideo()) {
                            ChatActivity.this.updateTextureViewPosition(false);
                        }
                        setGroupTranslationX(ChatActivity.this.slidingView, dx);
                        invalidate();
                        return;
                    }
                    return;
                }
                MotionEvent event = MotionEvent.obtain(0L, 0L, 3, 0.0f, 0.0f, 0);
                ChatActivity.this.slidingView.onTouchEvent(event);
                super.onInterceptTouchEvent(event);
                event.recycle();
                ChatActivity.this.chatLayoutManager.setCanScrollVertically(false);
                ChatActivity.this.maybeStartTrackingSlidingView = false;
                ChatActivity.this.startedTrackingSlidingView = true;
                this.startedTrackingX = (int) e.getX();
                if (getParent() != null) {
                    getParent().requestDisallowInterceptTouchEvent(true);
                    return;
                }
                return;
            }
            View view = getPressedChildView();
            if (view instanceof ChatMessageCell) {
                if (ChatActivity.this.slidingView != null) {
                    ChatActivity.this.slidingView.setSlidingOffset(0.0f);
                }
                ChatActivity.this.slidingView = (ChatMessageCell) view;
                MessageObject message = ChatActivity.this.slidingView.getMessageObject();
                if (ChatActivity.this.chatMode != 0 || ((ChatActivity.this.threadMessageObjects != null && ChatActivity.this.threadMessageObjects.contains(message)) || ((ChatActivity.this.getMessageType(message) == 1 && (message.getDialogId() == ChatActivity.this.mergeDialogId || message.needDrawBluredPreview())) || ((ChatActivity.this.currentEncryptedChat == null && message.getId() < 0) || ((ChatActivity.this.bottomOverlayChat != null && ChatActivity.this.bottomOverlayChat.getVisibility() == 0) || ((ChatActivity.this.currentChat != null && ((ChatObject.isNotInChat(ChatActivity.this.currentChat) && !ChatActivity.this.isThreadChat()) || ((ChatObject.isChannel(ChatActivity.this.currentChat) && !ChatObject.canPost(ChatActivity.this.currentChat) && !ChatActivity.this.currentChat.megagroup) || !ChatObject.canSendMessages(ChatActivity.this.currentChat)))) || ChatActivity.this.textSelectionHelper.isSelectionMode())))))) {
                    ChatActivity.this.slidingView.setSlidingOffset(0.0f);
                    ChatActivity.this.slidingView = null;
                    return;
                }
                this.startedTrackingPointerId = e.getPointerId(0);
                ChatActivity.this.maybeStartTrackingSlidingView = true;
                this.startedTrackingX = (int) e.getX();
                this.startedTrackingY = (int) e.getY();
            }
        }

        @Override // org.telegram.ui.Components.RecyclerListView, androidx.recyclerview.widget.RecyclerView, android.view.View
        public boolean onTouchEvent(MotionEvent e) {
            ChatActivity.this.textSelectionHelper.checkSelectionCancel(e);
            if (ChatActivity.this.keyboardHideHelper.disableScrolling()) {
                return false;
            }
            if (e.getAction() == 0) {
                ChatActivity.this.scrollByTouch = true;
            }
            if (ChatActivity.this.pullingDownOffset != 0.0f && (e.getAction() == 1 || e.getAction() == 3)) {
                float progress = Math.min(1.0f, ChatActivity.this.pullingDownOffset / AndroidUtilities.dp(110.0f));
                if (e.getAction() != 1 || progress != 1.0f || ChatActivity.this.pullingDownDrawable == null || ChatActivity.this.pullingDownDrawable.emptyStub) {
                    if (ChatActivity.this.pullingDownDrawable == null || !ChatActivity.this.pullingDownDrawable.emptyStub || System.currentTimeMillis() - ChatActivity.this.pullingDownDrawable.lastShowingReleaseTime >= 500 || !ChatActivity.this.pullingDownDrawable.animateSwipeToRelease) {
                        ValueAnimator animator = ValueAnimator.ofFloat(ChatActivity.this.pullingDownOffset, 0.0f);
                        ChatActivity.this.pullingDownBackAnimator = animator;
                        if (ChatActivity.this.pullingDownDrawable != null) {
                            ChatActivity.this.pullingDownDrawable.showBottomPanel(false);
                        }
                        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$14$$ExternalSyntheticLambda3
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                ChatActivity.AnonymousClass14.this.m1999lambda$onTouchEvent$4$orgtelegramuiChatActivity$14(valueAnimator);
                            }
                        });
                        animator.setDuration(250L);
                        animator.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                        animator.start();
                    } else {
                        AnimatorSet animatorSet = new AnimatorSet();
                        ChatActivity.this.pullingDownBackAnimator = animatorSet;
                        if (ChatActivity.this.pullingDownDrawable != null) {
                            ChatActivity.this.pullingDownDrawable.showBottomPanel(false);
                        }
                        ValueAnimator animator2 = ValueAnimator.ofFloat(ChatActivity.this.pullingDownOffset, AndroidUtilities.dp(111.0f));
                        animator2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$14$$ExternalSyntheticLambda1
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                ChatActivity.AnonymousClass14.this.m1997lambda$onTouchEvent$2$orgtelegramuiChatActivity$14(valueAnimator);
                            }
                        });
                        animator2.setDuration(400L);
                        animator2.setInterpolator(CubicBezierInterpolator.DEFAULT);
                        ValueAnimator animator22 = ValueAnimator.ofFloat(AndroidUtilities.dp(111.0f), 0.0f);
                        animator22.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$14$$ExternalSyntheticLambda2
                            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                                ChatActivity.AnonymousClass14.this.m1998lambda$onTouchEvent$3$orgtelegramuiChatActivity$14(valueAnimator);
                            }
                        });
                        animator22.setStartDelay(600L);
                        animator22.setDuration(250L);
                        animator22.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                        animatorSet.playSequentially(animator2, animator22);
                        animatorSet.start();
                    }
                } else if (ChatActivity.this.pullingDownDrawable.animationIsRunning()) {
                    ValueAnimator animator3 = ValueAnimator.ofFloat(ChatActivity.this.pullingDownOffset, ChatActivity.this.pullingDownOffset + AndroidUtilities.dp(8.0f));
                    ChatActivity.this.pullingDownBackAnimator = animator3;
                    animator3.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$14$$ExternalSyntheticLambda0
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            ChatActivity.AnonymousClass14.this.m1995lambda$onTouchEvent$0$orgtelegramuiChatActivity$14(valueAnimator);
                        }
                    });
                    animator3.setDuration(200L);
                    animator3.setInterpolator(CubicBezierInterpolator.DEFAULT);
                    animator3.start();
                    ChatActivity.this.pullingDownDrawable.runOnAnimationFinish(new Runnable() { // from class: org.telegram.ui.ChatActivity$14$$ExternalSyntheticLambda4
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.AnonymousClass14.this.m1996lambda$onTouchEvent$1$orgtelegramuiChatActivity$14();
                        }
                    });
                } else {
                    ChatActivity.this.animateToNextChat();
                }
            }
            if (isFastScrollAnimationRunning()) {
                return false;
            }
            boolean result = super.onTouchEvent(e);
            if (ChatActivity.this.actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                return result;
            }
            processTouchEvent(e);
            return ChatActivity.this.startedTrackingSlidingView || result;
        }

        /* renamed from: lambda$onTouchEvent$0$org-telegram-ui-ChatActivity$14 */
        public /* synthetic */ void m1995lambda$onTouchEvent$0$orgtelegramuiChatActivity$14(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        /* renamed from: lambda$onTouchEvent$1$org-telegram-ui-ChatActivity$14 */
        public /* synthetic */ void m1996lambda$onTouchEvent$1$orgtelegramuiChatActivity$14() {
            ChatActivity.this.animateToNextChat();
        }

        /* renamed from: lambda$onTouchEvent$2$org-telegram-ui-ChatActivity$14 */
        public /* synthetic */ void m1997lambda$onTouchEvent$2$orgtelegramuiChatActivity$14(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        /* renamed from: lambda$onTouchEvent$3$org-telegram-ui-ChatActivity$14 */
        public /* synthetic */ void m1998lambda$onTouchEvent$3$orgtelegramuiChatActivity$14(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        /* renamed from: lambda$onTouchEvent$4$org-telegram-ui-ChatActivity$14 */
        public /* synthetic */ void m1999lambda$onTouchEvent$4$orgtelegramuiChatActivity$14(ValueAnimator valueAnimator) {
            ChatActivity.this.pullingDownOffset = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.chatListView.invalidate();
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup, android.view.ViewParent
        public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) {
            super.requestDisallowInterceptTouchEvent(disallowIntercept);
            if (ChatActivity.this.slidingView != null) {
                processTouchEvent(null);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerListView
        public void onChildPressed(View child, float x, float y, boolean pressed) {
            MessageObject.GroupedMessages groupedMessages;
            super.onChildPressed(child, x, y, pressed);
            if (child instanceof ChatMessageCell) {
                ChatMessageCell chatMessageCell = (ChatMessageCell) child;
                MessageObject object = chatMessageCell.getMessageObject();
                if (!object.isMusic() && !object.isDocument() && (groupedMessages = chatMessageCell.getCurrentMessagesGroup()) != null) {
                    int count = getChildCount();
                    for (int a = 0; a < count; a++) {
                        View item = getChildAt(a);
                        if (item != child && (item instanceof ChatMessageCell)) {
                            ChatMessageCell cell = (ChatMessageCell) item;
                            if (cell.getCurrentMessagesGroup() == groupedMessages) {
                                cell.setPressed(pressed);
                            }
                        }
                    }
                }
            }
        }

        @Override // androidx.recyclerview.widget.RecyclerView, android.view.View
        public void onDraw(Canvas c) {
            super.onDraw(c);
            if (ChatActivity.this.slidingView != null) {
                float translationX = ChatActivity.this.slidingView.getSlidingOffsetX();
                if (!ChatActivity.this.maybeStartTrackingSlidingView && !ChatActivity.this.startedTrackingSlidingView && this.endTrackingX != 0.0f && translationX != 0.0f) {
                    long newTime = System.currentTimeMillis();
                    long dt = newTime - this.lastTrackingAnimationTime;
                    float f = this.trackAnimationProgress + (((float) dt) / 180.0f);
                    this.trackAnimationProgress = f;
                    if (f > 1.0f) {
                        this.trackAnimationProgress = 1.0f;
                    }
                    this.lastTrackingAnimationTime = newTime;
                    float translationX2 = this.endTrackingX * (1.0f - AndroidUtilities.decelerateInterpolator.getInterpolation(this.trackAnimationProgress));
                    if (translationX2 == 0.0f) {
                        this.endTrackingX = 0.0f;
                    }
                    setGroupTranslationX(ChatActivity.this.slidingView, translationX2);
                    ChatActivity.this.slidingView.setSlidingOffset(translationX2);
                    MessageObject messageObject = ChatActivity.this.slidingView.getMessageObject();
                    if (messageObject.isRoundVideo() || messageObject.isVideo()) {
                        ChatActivity.this.updateTextureViewPosition(false);
                    }
                    float f2 = this.trackAnimationProgress;
                    if (f2 == 1.0f || f2 == 0.0f) {
                        ChatActivity.this.slidingView.setSlidingOffset(0.0f);
                        ChatActivity.this.slidingView = null;
                    }
                    invalidate();
                }
                drawReplyButton(c);
            }
            if (ChatActivity.this.pullingDownOffset == 0.0f || ChatActivity.this.isInPreviewMode()) {
                if (ChatActivity.this.pullingDownDrawable != null) {
                    ChatActivity.this.pullingDownDrawable.reset();
                    return;
                }
                return;
            }
            c.save();
            float transitionOffset = 0.0f;
            if (ChatActivity.this.pullingDownAnimateProgress != 0.0f) {
                transitionOffset = ((ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.pullingDownOffset) + (ChatActivity.this.pullingDownAnimateToActivity == null ? 0.0f : ChatActivity.this.pullingDownAnimateToActivity.pullingBottomOffset)) * ChatActivity.this.pullingDownAnimateProgress;
            }
            c.translate(0.0f, (getMeasuredHeight() - ChatActivity.this.blurredViewBottomOffset) - transitionOffset);
            if (ChatActivity.this.pullingDownDrawable == null) {
                ChatActivity.this.pullingDownDrawable = new ChatPullingDownDrawable(ChatActivity.this.currentAccount, ChatActivity.this.fragmentView, ChatActivity.this.dialog_id, ChatActivity.this.dialogFolderId, ChatActivity.this.dialogFilterId, ChatActivity.this.themeDelegate);
                ChatActivity.this.pullingDownDrawable.onAttach();
            }
            ChatActivity.this.pullingDownDrawable.setWidth(getMeasuredWidth());
            float progress = Math.min(1.0f, ChatActivity.this.pullingDownOffset / AndroidUtilities.dp(110.0f));
            ChatActivity.this.pullingDownDrawable.draw(c, ChatActivity.this.chatListView, progress, 1.0f - ChatActivity.this.pullingDownAnimateProgress);
            c.restore();
            if (ChatActivity.this.pullingDownAnimateToActivity != null) {
                c.saveLayerAlpha(0.0f, 0.0f, ChatActivity.this.pullingDownAnimateToActivity.chatListView.getMeasuredWidth(), ChatActivity.this.pullingDownAnimateToActivity.chatListView.getMeasuredHeight(), (int) (ChatActivity.this.pullingDownAnimateProgress * 255.0f), 31);
                c.translate(0.0f, (getMeasuredHeight() - ChatActivity.this.pullingDownOffset) - transitionOffset);
                ChatActivity.this.pullingDownAnimateToActivity.chatListView.draw(c);
                c.restore();
            }
        }

        @Override // org.telegram.ui.Components.RecyclerListView, android.view.ViewGroup, android.view.View
        public void dispatchDraw(Canvas canvas) {
            ChatActivity.this.drawLaterRoundProgressCell = null;
            canvas.save();
            if (ChatActivity.this.fragmentTransition == null || (ChatActivity.this.fromPullingDownTransition && !ChatActivity.this.toPullingDownTransition)) {
                canvas.clipRect(0.0f, (ChatActivity.this.chatListViewPaddingTop - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f), getMeasuredWidth(), getMeasuredHeight() - ChatActivity.this.blurredViewBottomOffset);
            }
            this.selectorRect.setEmpty();
            if (ChatActivity.this.pullingDownOffset != 0.0f) {
                canvas.save();
                float transitionOffset = 0.0f;
                if (ChatActivity.this.pullingDownAnimateProgress != 0.0f) {
                    transitionOffset = (ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.pullingDownOffset) * ChatActivity.this.pullingDownAnimateProgress;
                }
                ChatActivity chatActivity = ChatActivity.this;
                float f = (-chatActivity.pullingDownOffset) - transitionOffset;
                chatActivity.drawingChatLisViewYoffset = f;
                canvas.translate(0.0f, f);
                drawChatBackgroundElements(canvas);
                super.dispatchDraw(canvas);
                canvas.restore();
            } else {
                drawChatBackgroundElements(canvas);
                super.dispatchDraw(canvas);
            }
            canvas.restore();
        }

        private void drawChatBackgroundElements(Canvas canvas) {
            float f;
            int i;
            boolean z;
            MessageObject.GroupedMessages scrimGroup;
            int k;
            int k2;
            int i2;
            float t;
            float b;
            boolean selected;
            MessageObject.GroupedMessages group;
            int top;
            int bottom;
            ChatMessageCell cell;
            MessageObject.GroupedMessages group2;
            boolean z2;
            MessageObject.GroupedMessages lastDrawnGroup;
            MessageObject.GroupedMessages group3;
            View child;
            Paint backgroundPaint;
            MessageObject.GroupedMessages group4;
            View child2;
            int height;
            MessageObject.GroupedMessages group5;
            Canvas canvas2 = canvas;
            int count = getChildCount();
            MessageObject.GroupedMessages lastDrawnGroup2 = null;
            int a = 0;
            while (true) {
                f = 0.0f;
                i = 2;
                if (a >= count) {
                    z = true;
                    break;
                }
                View child3 = getChildAt(a);
                if (ChatActivity.this.chatAdapter.isBot && (child3 instanceof BotHelpCell)) {
                    BotHelpCell botCell = (BotHelpCell) child3;
                    float top2 = ((((getMeasuredHeight() - ChatActivity.this.chatListViewPaddingTop) - ChatActivity.this.blurredViewBottomOffset) / 2.0f) - (child3.getMeasuredHeight() / 2)) + ChatActivity.this.chatListViewPaddingTop;
                    if (botCell.animating() || ChatActivity.this.chatListView.fastScrollAnimationRunning) {
                        z = true;
                    } else if (child3.getTop() > top2) {
                        child3.setTranslationY(top2 - child3.getTop());
                        z = true;
                    } else {
                        child3.setTranslationY(0.0f);
                        z = true;
                    }
                } else {
                    if (child3 instanceof ChatMessageCell) {
                        ChatMessageCell cell2 = (ChatMessageCell) child3;
                        MessageObject.GroupedMessages group6 = cell2.getCurrentMessagesGroup();
                        if (group6 == null || group6 != lastDrawnGroup2) {
                            MessageObject.GroupedMessages lastDrawnGroup3 = group6;
                            MessageObject.GroupedMessagePosition position = cell2.getCurrentPosition();
                            MessageBackgroundDrawable backgroundDrawable = cell2.getBackgroundDrawable();
                            if ((backgroundDrawable.isAnimationInProgress() || cell2.isDrawingSelectionBackground()) && (position == null || (position.flags & 2) != 0)) {
                                if (cell2.isHighlighted()) {
                                    group3 = group6;
                                    child = child3;
                                    lastDrawnGroup = lastDrawnGroup3;
                                } else if (cell2.isHighlightedAnimated()) {
                                    group3 = group6;
                                    child = child3;
                                    lastDrawnGroup = lastDrawnGroup3;
                                } else {
                                    int y = (int) cell2.getY();
                                    canvas.save();
                                    if (position == null) {
                                        height = cell2.getMeasuredHeight();
                                        group4 = group6;
                                        child2 = child3;
                                        lastDrawnGroup = lastDrawnGroup3;
                                    } else {
                                        int height2 = cell2.getMeasuredHeight() + y;
                                        float touchY = 0.0f;
                                        float touchY2 = 0.0f;
                                        int i3 = 0;
                                        long time = 0;
                                        while (i3 < count) {
                                            View child4 = child3;
                                            View inner = getChildAt(i3);
                                            MessageObject.GroupedMessages lastDrawnGroup4 = lastDrawnGroup3;
                                            if (!(inner instanceof ChatMessageCell)) {
                                                group5 = group6;
                                            } else {
                                                ChatMessageCell innerCell = (ChatMessageCell) inner;
                                                MessageObject.GroupedMessages innerGroup = innerCell.getCurrentMessagesGroup();
                                                if (innerGroup != group6) {
                                                    group5 = group6;
                                                } else {
                                                    MessageBackgroundDrawable drawable = innerCell.getBackgroundDrawable();
                                                    group5 = group6;
                                                    y = Math.min(y, (int) innerCell.getY());
                                                    int height3 = Math.max(height2, ((int) innerCell.getY()) + innerCell.getMeasuredHeight());
                                                    long touchTime = drawable.getLastTouchTime();
                                                    if (touchTime <= time) {
                                                        height2 = height3;
                                                    } else {
                                                        float touchX = drawable.getTouchX() + innerCell.getX();
                                                        float touchX2 = drawable.getTouchY();
                                                        float touchY3 = touchX2 + innerCell.getY();
                                                        time = touchTime;
                                                        touchY2 = touchY3;
                                                        touchY = touchX;
                                                        height2 = height3;
                                                    }
                                                }
                                            }
                                            i3++;
                                            child3 = child4;
                                            lastDrawnGroup3 = lastDrawnGroup4;
                                            group6 = group5;
                                        }
                                        group4 = group6;
                                        child2 = child3;
                                        lastDrawnGroup = lastDrawnGroup3;
                                        backgroundDrawable.setTouchCoordsOverride(touchY, touchY2 - y);
                                        height = height2 - y;
                                    }
                                    canvas2.clipRect(0, y, getMeasuredWidth(), y + height);
                                    Paint selectedBackgroundPaint = getThemedPaint(Theme.key_paint_chatMessageBackgroundSelected);
                                    if (ChatActivity.this.themeDelegate != null && !ChatActivity.this.themeDelegate.isDark && selectedBackgroundPaint != null) {
                                        backgroundDrawable.setCustomPaint(selectedBackgroundPaint);
                                        float viewTop = (ChatActivity.this.isKeyboardVisible() ? ChatActivity.this.chatListView.getTop() : ChatActivity.this.actionBar.getMeasuredHeight()) - ChatActivity.this.contentView.getBackgroundTranslationY();
                                        int backgroundHeight = ChatActivity.this.contentView.getBackgroundSizeY();
                                        if (ChatActivity.this.themeDelegate != null) {
                                            ChatActivity.this.themeDelegate.applyServiceShaderMatrix(getMeasuredWidth(), backgroundHeight, cell2.getX(), viewTop);
                                        } else {
                                            Theme.applyServiceShaderMatrix(getMeasuredWidth(), backgroundHeight, cell2.getX(), viewTop);
                                        }
                                    } else {
                                        backgroundDrawable.setCustomPaint(null);
                                        backgroundDrawable.setColor(getThemedColor(Theme.key_chat_selectedBackground));
                                    }
                                    backgroundDrawable.setBounds(0, y, getMeasuredWidth(), y + height);
                                    backgroundDrawable.draw(canvas2);
                                    canvas.restore();
                                    cell = cell2;
                                    group2 = group4;
                                    z2 = true;
                                }
                                if (position == null) {
                                    Paint backgroundPaint2 = getThemedPaint(Theme.key_paint_chatMessageBackgroundSelected);
                                    if ((ChatActivity.this.themeDelegate == null || !ChatActivity.this.themeDelegate.isDark) && backgroundPaint2 != null) {
                                        float viewTop2 = (ChatActivity.this.isKeyboardVisible() ? ChatActivity.this.chatListView.getTop() : ChatActivity.this.actionBar.getMeasuredHeight()) - ChatActivity.this.contentView.getBackgroundTranslationY();
                                        int backgroundHeight2 = ChatActivity.this.contentView.getBackgroundSizeY();
                                        if (ChatActivity.this.themeDelegate != null) {
                                            ChatActivity.this.themeDelegate.applyServiceShaderMatrix(getMeasuredWidth(), backgroundHeight2, cell2.getX(), viewTop2);
                                        } else {
                                            Theme.applyServiceShaderMatrix(getMeasuredWidth(), backgroundHeight2, cell2.getX(), viewTop2);
                                        }
                                        backgroundPaint = backgroundPaint2;
                                    } else {
                                        Paint backgroundPaint3 = Theme.chat_replyLinePaint;
                                        backgroundPaint3.setColor(getThemedColor(Theme.key_chat_selectedBackground));
                                        backgroundPaint = backgroundPaint3;
                                    }
                                    canvas.save();
                                    canvas2.translate(0.0f, cell2.getTranslationY());
                                    int wasAlpha = backgroundPaint.getAlpha();
                                    backgroundPaint.setAlpha((int) (wasAlpha * cell2.getHighlightAlpha() * cell2.getAlpha()));
                                    group2 = group3;
                                    cell = cell2;
                                    z2 = true;
                                    canvas.drawRect(0.0f, cell2.getTop(), getMeasuredWidth(), cell2.getBottom(), backgroundPaint);
                                    backgroundPaint.setAlpha(wasAlpha);
                                    canvas.restore();
                                } else {
                                    cell = cell2;
                                    group2 = group3;
                                    z2 = true;
                                }
                            } else {
                                group2 = group6;
                                cell = cell2;
                                lastDrawnGroup = lastDrawnGroup3;
                                z2 = true;
                            }
                            lastDrawnGroup2 = lastDrawnGroup;
                        } else {
                            group2 = group6;
                            cell = cell2;
                            z2 = true;
                        }
                        ChatMessageCell cell3 = cell;
                        if (ChatActivity.this.scrimView != cell3 && group2 == null && cell3.drawBackgroundInParent()) {
                            canvas.save();
                            canvas2.translate(cell3.getX(), cell3.getY());
                            if (cell3.getScaleX() != 1.0f) {
                                float scaleX = cell3.getScaleX();
                                float scaleY = cell3.getScaleY();
                                float pivotX = cell3.getPivotX();
                                int height4 = cell3.getHeight();
                                int i4 = z2 ? 1 : 0;
                                int i5 = z2 ? 1 : 0;
                                int i6 = z2 ? 1 : 0;
                                int i7 = z2 ? 1 : 0;
                                int i8 = z2 ? 1 : 0;
                                int i9 = z2 ? 1 : 0;
                                canvas2.scale(scaleX, scaleY, pivotX, height4 >> i4);
                            }
                            cell3.drawBackgroundInternal(canvas2, z2);
                            canvas.restore();
                        }
                    } else if (child3 instanceof ChatActionCell) {
                        ChatActionCell cell4 = (ChatActionCell) child3;
                        if (cell4.hasGradientService()) {
                            canvas.save();
                            canvas2.translate(cell4.getX(), cell4.getY());
                            canvas2.scale(cell4.getScaleX(), cell4.getScaleY(), cell4.getMeasuredWidth() / 2.0f, cell4.getMeasuredHeight() / 2.0f);
                            cell4.drawBackground(canvas2, true);
                            canvas.restore();
                        }
                    }
                    a++;
                }
            }
            if (ChatActivity.this.scrimView instanceof ChatMessageCell) {
                MessageObject.GroupedMessages scrimGroup2 = ((ChatMessageCell) ChatActivity.this.scrimView).getCurrentMessagesGroup();
                scrimGroup = scrimGroup2;
            } else {
                scrimGroup = null;
            }
            int k3 = 0;
            while (k3 < 3) {
                this.drawingGroups.clear();
                if (k3 == i && !ChatActivity.this.chatListView.isFastScrollAnimationRunning()) {
                    k = k3;
                } else {
                    int i10 = 0;
                    while (i10 < count) {
                        View child5 = ChatActivity.this.chatListView.getChildAt(i10);
                        if (child5 instanceof ChatMessageCell) {
                            ChatMessageCell cell5 = (ChatMessageCell) child5;
                            if (child5.getY() <= ChatActivity.this.chatListView.getHeight() && child5.getY() + child5.getHeight() >= f && (group = cell5.getCurrentMessagesGroup()) != null && ((k3 != 0 || group.messages.size() != z) && ((k3 != z || group.transitionParams.drawBackgroundForDeletedItems) && ((k3 != 0 || !cell5.getMessageObject().deleted) && ((k3 != z || cell5.getMessageObject().deleted) && ((k3 != i || cell5.willRemovedAfterAnimation()) && (k3 == i || !cell5.willRemovedAfterAnimation()))))))) {
                                if (!this.drawingGroups.contains(group)) {
                                    group.transitionParams.left = 0;
                                    group.transitionParams.top = 0;
                                    group.transitionParams.right = 0;
                                    group.transitionParams.bottom = 0;
                                    group.transitionParams.pinnedBotton = false;
                                    group.transitionParams.pinnedTop = false;
                                    group.transitionParams.cell = cell5;
                                    this.drawingGroups.add(group);
                                }
                                group.transitionParams.pinnedTop = cell5.isPinnedTop();
                                group.transitionParams.pinnedBotton = cell5.isPinnedBottom();
                                int left = cell5.getLeft() + cell5.getBackgroundDrawableLeft();
                                int right = cell5.getLeft() + cell5.getBackgroundDrawableRight();
                                int top3 = cell5.getTop() + cell5.getBackgroundDrawableTop();
                                int bottom2 = cell5.getTop() + cell5.getBackgroundDrawableBottom();
                                if ((cell5.getCurrentPosition().flags & 4) != 0) {
                                    top = top3;
                                } else {
                                    top = top3 - AndroidUtilities.dp(10.0f);
                                }
                                if ((cell5.getCurrentPosition().flags & 8) != 0) {
                                    bottom = bottom2;
                                } else {
                                    bottom = bottom2 + AndroidUtilities.dp(10.0f);
                                }
                                if (cell5.willRemovedAfterAnimation()) {
                                    group.transitionParams.cell = cell5;
                                }
                                if (group.transitionParams.top == 0 || top < group.transitionParams.top) {
                                    group.transitionParams.top = top;
                                }
                                if (group.transitionParams.bottom == 0 || bottom > group.transitionParams.bottom) {
                                    group.transitionParams.bottom = bottom;
                                }
                                if (group.transitionParams.left == 0 || left < group.transitionParams.left) {
                                    group.transitionParams.left = left;
                                }
                                if (group.transitionParams.right == 0 || right > group.transitionParams.right) {
                                    group.transitionParams.right = right;
                                }
                            }
                        }
                        i10++;
                        i = 2;
                        f = 0.0f;
                    }
                    int i11 = 0;
                    while (i11 < this.drawingGroups.size()) {
                        MessageObject.GroupedMessages group7 = this.drawingGroups.get(i11);
                        if (group7 == scrimGroup) {
                            k2 = k3;
                            i2 = i11;
                        } else {
                            float x = group7.transitionParams.cell.getNonAnimationTranslationX(z);
                            float l = group7.transitionParams.left + x + group7.transitionParams.offsetLeft;
                            float t2 = group7.transitionParams.top + group7.transitionParams.offsetTop;
                            float r = group7.transitionParams.right + x + group7.transitionParams.offsetRight;
                            float b2 = group7.transitionParams.bottom + group7.transitionParams.offsetBottom;
                            if (!group7.transitionParams.backgroundChangeBounds) {
                                t2 += group7.transitionParams.cell.getTranslationY();
                                b2 += group7.transitionParams.cell.getTranslationY();
                            }
                            if (t2 < (ChatActivity.this.chatListViewPaddingTop - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(20.0f)) {
                                t = (ChatActivity.this.chatListViewPaddingTop - ChatActivity.this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(20.0f);
                            } else {
                                t = t2;
                            }
                            if (b2 > ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.dp(20.0f)) {
                                b = ChatActivity.this.chatListView.getMeasuredHeight() + AndroidUtilities.dp(20.0f);
                            } else {
                                b = b2;
                            }
                            boolean useScale = (group7.transitionParams.cell.getScaleX() == 1.0f && group7.transitionParams.cell.getScaleY() == 1.0f) ? false : true;
                            if (useScale) {
                                canvas.save();
                                canvas2.scale(group7.transitionParams.cell.getScaleX(), group7.transitionParams.cell.getScaleY(), ((r - l) / 2.0f) + l, t + ((b - t) / 2.0f));
                            }
                            boolean selected2 = true;
                            int a2 = 0;
                            int N = group7.messages.size();
                            while (true) {
                                if (a2 >= N) {
                                    selected = selected2;
                                    break;
                                }
                                MessageObject object = group7.messages.get(a2);
                                boolean selected3 = selected2;
                                int N2 = N;
                                SparseArray sparseArray = ChatActivity.this.selectedMessagesIds[object.getDialogId() == ChatActivity.this.dialog_id ? (char) 0 : (char) 1];
                                int index = object.getId();
                                if (sparseArray.indexOfKey(index) >= 0) {
                                    a2++;
                                    selected2 = selected3;
                                    N = N2;
                                } else {
                                    selected = false;
                                    break;
                                }
                            }
                            float b3 = b;
                            float t3 = t;
                            k2 = k3;
                            i2 = i11;
                            group7.transitionParams.cell.drawBackground(canvas, (int) l, (int) t, (int) r, (int) b, group7.transitionParams.pinnedTop, group7.transitionParams.pinnedBotton, selected, ChatActivity.this.contentView.getKeyboardHeight());
                            group7.transitionParams.cell = null;
                            group7.transitionParams.drawCaptionLayout = group7.hasCaption;
                            if (useScale) {
                                canvas.restore();
                                for (int ii = 0; ii < count; ii++) {
                                    View child6 = ChatActivity.this.chatListView.getChildAt(ii);
                                    if ((child6 instanceof ChatMessageCell) && ((ChatMessageCell) child6).getCurrentMessagesGroup() == group7) {
                                        ChatMessageCell cell6 = (ChatMessageCell) child6;
                                        int left2 = cell6.getLeft();
                                        int top4 = cell6.getTop();
                                        child6.setPivotX((l - left2) + ((r - l) / 2.0f));
                                        child6.setPivotY((t3 - top4) + ((b3 - t3) / 2.0f));
                                    }
                                }
                            }
                        }
                        i11 = i2 + 1;
                        canvas2 = canvas;
                        k3 = k2;
                        z = true;
                    }
                    k = k3;
                }
                k3 = k + 1;
                canvas2 = canvas;
                i = 2;
                f = 0.0f;
                z = true;
            }
        }

        /* JADX WARN: Removed duplicated region for block: B:374:0x0875  */
        /* JADX WARN: Removed duplicated region for block: B:377:0x0881  */
        /* JADX WARN: Removed duplicated region for block: B:384:0x08a5  */
        /* JADX WARN: Removed duplicated region for block: B:392:0x08d1  */
        /* JADX WARN: Removed duplicated region for block: B:393:0x08fa  */
        /* JADX WARN: Removed duplicated region for block: B:404:0x092b  */
        @Override // androidx.recyclerview.widget.RecyclerView, android.view.ViewGroup
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        public boolean drawChild(android.graphics.Canvas r34, android.view.View r35, long r36) {
            /*
                Method dump skipped, instructions count: 2351
                To view this dump add '--comments-level debug' option
            */
            throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.AnonymousClass14.drawChild(android.graphics.Canvas, android.view.View, long):boolean");
        }

        @Override // android.view.View
        public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) {
            AccessibilityNodeInfo.CollectionInfo collection;
            if (ChatActivity.this.currentEncryptedChat != null) {
                return;
            }
            super.onInitializeAccessibilityNodeInfo(info);
            if (Build.VERSION.SDK_INT >= 19 && (collection = info.getCollectionInfo()) != null) {
                info.setCollectionInfo(AccessibilityNodeInfo.CollectionInfo.obtain(collection.getRowCount(), 1, false));
            }
        }

        @Override // android.view.View
        public AccessibilityNodeInfo createAccessibilityNodeInfo() {
            if (ChatActivity.this.currentEncryptedChat != null) {
                return null;
            }
            return super.createAccessibilityNodeInfo();
        }

        @Override // android.view.View
        public void invalidate() {
            super.invalidate();
            ChatActivity.this.contentView.invalidateBlur();
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$15 */
    /* loaded from: classes4.dex */
    public class AnonymousClass15 extends ChatListItemAnimator {
        Runnable finishRunnable;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass15(ChatActivity activity, RecyclerListView listView, Theme.ResourcesProvider resourcesProvider) {
            super(activity, listView, resourcesProvider);
            ChatActivity.this = this$0;
        }

        @Override // androidx.recyclerview.widget.DefaultItemAnimator
        public void checkIsRunning() {
            if (ChatActivity.this.scrollAnimationIndex == -1) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.scrollAnimationIndex = chatActivity.getNotificationCenter().setAnimationInProgress(ChatActivity.this.scrollAnimationIndex, ChatActivity.allowedNotificationsDuringChatListAnimations, false);
            }
        }

        @Override // androidx.recyclerview.widget.ChatListItemAnimator
        public void onAnimationStart() {
            if (ChatActivity.this.scrollAnimationIndex == -1) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.scrollAnimationIndex = chatActivity.getNotificationCenter().setAnimationInProgress(ChatActivity.this.scrollAnimationIndex, ChatActivity.allowedNotificationsDuringChatListAnimations, false);
            }
            Runnable runnable = this.finishRunnable;
            if (runnable != null) {
                AndroidUtilities.cancelRunOnUIThread(runnable);
                this.finishRunnable = null;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("chatItemAnimator disable notifications");
            }
            ChatActivity.this.chatActivityEnterView.getAdjustPanLayoutHelper().runDelayedAnimation();
            ChatActivity.this.chatActivityEnterView.runEmojiPanelAnimation();
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // androidx.recyclerview.widget.ChatListItemAnimator, androidx.recyclerview.widget.DefaultItemAnimator
        public void onAllAnimationsDone() {
            super.onAllAnimationsDone();
            Runnable runnable = this.finishRunnable;
            if (runnable != null) {
                AndroidUtilities.cancelRunOnUIThread(runnable);
            }
            Runnable runnable2 = new Runnable() { // from class: org.telegram.ui.ChatActivity$15$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.AnonymousClass15.this.m2001lambda$onAllAnimationsDone$0$orgtelegramuiChatActivity$15();
                }
            };
            this.finishRunnable = runnable2;
            AndroidUtilities.runOnUIThread(runnable2);
        }

        /* renamed from: lambda$onAllAnimationsDone$0$org-telegram-ui-ChatActivity$15 */
        public /* synthetic */ void m2001lambda$onAllAnimationsDone$0$orgtelegramuiChatActivity$15() {
            if (ChatActivity.this.scrollAnimationIndex != -1) {
                ChatActivity.this.getNotificationCenter().onAnimationFinish(ChatActivity.this.scrollAnimationIndex);
                ChatActivity.this.scrollAnimationIndex = -1;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("chatItemAnimator enable notifications");
            }
        }

        @Override // androidx.recyclerview.widget.ChatListItemAnimator, androidx.recyclerview.widget.DefaultItemAnimator, androidx.recyclerview.widget.RecyclerView.ItemAnimator
        public void endAnimations() {
            super.endAnimations();
            Runnable runnable = this.finishRunnable;
            if (runnable != null) {
                AndroidUtilities.cancelRunOnUIThread(runnable);
            }
            Runnable runnable2 = new Runnable() { // from class: org.telegram.ui.ChatActivity$15$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.AnonymousClass15.this.m2000lambda$endAnimations$1$orgtelegramuiChatActivity$15();
                }
            };
            this.finishRunnable = runnable2;
            AndroidUtilities.runOnUIThread(runnable2);
        }

        /* renamed from: lambda$endAnimations$1$org-telegram-ui-ChatActivity$15 */
        public /* synthetic */ void m2000lambda$endAnimations$1$orgtelegramuiChatActivity$15() {
            if (ChatActivity.this.scrollAnimationIndex != -1) {
                ChatActivity.this.getNotificationCenter().onAnimationFinish(ChatActivity.this.scrollAnimationIndex);
                ChatActivity.this.scrollAnimationIndex = -1;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("chatItemAnimator enable notifications");
            }
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$16 */
    /* loaded from: classes4.dex */
    public class AnonymousClass16 extends GridLayoutManagerFixed {
        boolean computingScroll;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass16(Context context, int spanCount, int orientation, boolean reverseLayout) {
            super(context, spanCount, orientation, reverseLayout);
            ChatActivity.this = this$0;
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager
        public int getStarForFixGap() {
            int padding = (int) ChatActivity.this.chatListViewPaddingTop;
            if (ChatActivity.this.isThreadChat() && ChatActivity.this.pinnedMessageView != null && ChatActivity.this.pinnedMessageView.getVisibility() == 0) {
                return (int) (padding - Math.max(0.0f, AndroidUtilities.dp(48.0f) + ChatActivity.this.pinnedMessageEnterOffset));
            }
            return padding;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.LayoutManager
        protected int getParentStart() {
            if (this.computingScroll) {
                return (int) ChatActivity.this.chatListViewPaddingTop;
            }
            return 0;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int getStartAfterPadding() {
            if (this.computingScroll) {
                return (int) ChatActivity.this.chatListViewPaddingTop;
            }
            return super.getStartAfterPadding();
        }

        @Override // androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int getTotalSpace() {
            if (this.computingScroll) {
                return (int) ((getHeight() - ChatActivity.this.chatListViewPaddingTop) - getPaddingBottom());
            }
            return super.getTotalSpace();
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int computeVerticalScrollExtent(RecyclerView.State state) {
            this.computingScroll = true;
            int r = super.computeVerticalScrollExtent(state);
            this.computingScroll = false;
            return r;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int computeVerticalScrollOffset(RecyclerView.State state) {
            this.computingScroll = true;
            int r = super.computeVerticalScrollOffset(state);
            this.computingScroll = false;
            return r;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int computeVerticalScrollRange(RecyclerView.State state) {
            this.computingScroll = true;
            int r = super.computeVerticalScrollRange(state);
            this.computingScroll = false;
            return r;
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager
        public void scrollToPositionWithOffset(int position, int offset, boolean bottom) {
            if (!bottom) {
                offset = (int) ((offset - getPaddingTop()) + ChatActivity.this.chatListViewPaddingTop);
            }
            super.scrollToPositionWithOffset(position, offset, bottom);
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public boolean supportsPredictiveItemAnimations() {
            return true;
        }

        @Override // androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int position) {
            ChatActivity.this.scrollByTouch = false;
            LinearSmoothScrollerCustom linearSmoothScroller = new LinearSmoothScrollerCustom(recyclerView.getContext(), 0);
            linearSmoothScroller.setTargetPosition(position);
            startSmoothScroll(linearSmoothScroller);
        }

        @Override // androidx.recyclerview.widget.GridLayoutManagerFixed
        public boolean shouldLayoutChildFromOpositeSide(View child) {
            if (child instanceof ChatMessageCell) {
                return !((ChatMessageCell) child).getMessageObject().isOutOwner();
            }
            return false;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManagerFixed
        protected boolean hasSiblingChild(int position) {
            int index;
            if (position >= ChatActivity.this.chatAdapter.messagesStartRow && position < ChatActivity.this.chatAdapter.messagesEndRow && (index = position - ChatActivity.this.chatAdapter.messagesStartRow) >= 0 && index < ChatActivity.this.messages.size()) {
                MessageObject message = ChatActivity.this.messages.get(index);
                MessageObject.GroupedMessages group = ChatActivity.this.getValidGroupedMessage(message);
                if (group != null) {
                    MessageObject.GroupedMessagePosition pos = group.positions.get(message);
                    if (pos.minX == pos.maxX || pos.minY != pos.maxY || pos.minY == 0) {
                        return false;
                    }
                    int count = group.posArray.size();
                    for (int a = 0; a < count; a++) {
                        MessageObject.GroupedMessagePosition p = group.posArray.get(a);
                        if (p != pos && p.minY <= pos.minY && p.maxY >= pos.minY) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {
            if (BuildVars.DEBUG_PRIVATE_VERSION) {
                super.onLayoutChildren(recycler, state);
                return;
            }
            try {
                super.onLayoutChildren(recycler, state);
            } catch (Exception e) {
                FileLog.e(e);
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$16$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.AnonymousClass16.this.m2002lambda$onLayoutChildren$0$orgtelegramuiChatActivity$16();
                    }
                });
            }
        }

        /* renamed from: lambda$onLayoutChildren$0$org-telegram-ui-ChatActivity$16 */
        public /* synthetic */ void m2002lambda$onLayoutChildren$0$orgtelegramuiChatActivity$16() {
            ChatActivity.this.chatAdapter.notifyDataSetChanged(false);
        }

        @Override // androidx.recyclerview.widget.GridLayoutManager, androidx.recyclerview.widget.LinearLayoutManager, androidx.recyclerview.widget.RecyclerView.LayoutManager
        public int scrollVerticallyBy(int dy, RecyclerView.Recycler recycler, RecyclerView.State state) {
            boolean z;
            float k;
            if (dy < 0 && ChatActivity.this.pullingDownOffset != 0.0f) {
                ChatActivity.access$12116(ChatActivity.this, dy);
                if (ChatActivity.this.pullingDownOffset < 0.0f) {
                    dy = (int) ChatActivity.this.pullingDownOffset;
                    ChatActivity.this.pullingDownOffset = 0.0f;
                    ChatActivity.this.chatListView.invalidate();
                } else {
                    dy = 0;
                }
            }
            int n = ChatActivity.this.chatListView.getChildCount();
            int scrolled = 0;
            boolean foundTopView = false;
            int i = 0;
            while (true) {
                z = true;
                if (i >= n) {
                    break;
                }
                View child = ChatActivity.this.chatListView.getChildAt(i);
                float padding = ChatActivity.this.chatListViewPaddingTop;
                if (ChatActivity.this.isThreadChat() && ChatActivity.this.pinnedMessageView != null && ChatActivity.this.pinnedMessageView.getVisibility() == 0) {
                    padding -= Math.max(0.0f, AndroidUtilities.dp(48.0f) + ChatActivity.this.pinnedMessageEnterOffset);
                }
                if (ChatActivity.this.chatListView.getChildAdapterPosition(child) != ChatActivity.this.chatAdapter.getItemCount() - 1) {
                    i++;
                } else {
                    int dyLocal = dy;
                    if (child.getTop() - dy > padding) {
                        dyLocal = (int) (child.getTop() - padding);
                    }
                    scrolled = super.scrollVerticallyBy(dyLocal, recycler, state);
                    foundTopView = true;
                }
            }
            if (!foundTopView) {
                scrolled = super.scrollVerticallyBy(dy, recycler, state);
            }
            if (dy > 0 && scrolled == 0 && ChatObject.isChannel(ChatActivity.this.currentChat) && !ChatActivity.this.currentChat.megagroup && ChatActivity.this.chatListView.getScrollState() == 1 && !ChatActivity.this.chatListView.isFastScrollAnimationRunning() && !ChatActivity.this.chatListView.isMultiselect() && ChatActivity.this.reportType < 0) {
                if (ChatActivity.this.pullingDownOffset == 0.0f && ChatActivity.this.pullingDownDrawable != null) {
                    ChatActivity.this.pullingDownDrawable.updateDialog();
                }
                if (ChatActivity.this.pullingDownBackAnimator != null) {
                    ChatActivity.this.pullingDownBackAnimator.removeAllListeners();
                    ChatActivity.this.pullingDownBackAnimator.cancel();
                }
                if (ChatActivity.this.pullingDownOffset < AndroidUtilities.dp(110.0f)) {
                    float progress = ChatActivity.this.pullingDownOffset / AndroidUtilities.dp(110.0f);
                    k = ((1.0f - progress) * 0.65f) + (0.45f * progress);
                } else if (ChatActivity.this.pullingDownOffset < AndroidUtilities.dp(160.0f)) {
                    float progress2 = (ChatActivity.this.pullingDownOffset - AndroidUtilities.dp(110.0f)) / AndroidUtilities.dp(50.0f);
                    k = ((1.0f - progress2) * 0.45f) + (0.05f * progress2);
                } else {
                    k = 0.05f;
                }
                ChatActivity.access$12116(ChatActivity.this, dy * k);
                ReactionsEffectOverlay.onScrolled((int) (dy * k));
                ChatActivity.this.chatListView.invalidate();
            }
            if (ChatActivity.this.pullingDownOffset == 0.0f) {
                ChatActivity.this.chatListView.setOverScrollMode(0);
            } else {
                ChatActivity.this.chatListView.setOverScrollMode(2);
            }
            if (ChatActivity.this.pullingDownDrawable != null) {
                ChatPullingDownDrawable chatPullingDownDrawable = ChatActivity.this.pullingDownDrawable;
                if (ChatActivity.this.pullingDownOffset <= 0.0f || ChatActivity.this.chatListView.getScrollState() != 1) {
                    z = false;
                }
                chatPullingDownDrawable.showBottomPanel(z);
            }
            return scrolled;
        }
    }

    /* renamed from: lambda$createView$27$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1798lambda$createView$27$orgtelegramuiChatActivity(View view) {
        if (this.floatingDateView.getAlpha() == 0.0f || this.actionBar.isActionModeShowed() || this.reportType >= 0) {
            return;
        }
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(this.floatingDateView.getCustomDate() * 1000);
        int year = calendar.get(1);
        int monthOfYear = calendar.get(2);
        int dayOfMonth = calendar.get(5);
        calendar.clear();
        calendar.set(year, monthOfYear, dayOfMonth);
        jumpToDate((int) (calendar.getTime().getTime() / 1000));
    }

    /* renamed from: org.telegram.ui.ChatActivity$21 */
    /* loaded from: classes4.dex */
    public class AnonymousClass21 extends BlurredFrameLayout {
        float lastY;
        float startY;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass21(Context context, SizeNotifierFrameLayout sizeNotifierFrameLayout) {
            super(context, sizeNotifierFrameLayout);
            ChatActivity.this = this$0;
            setOnLongClickListener(new View.OnLongClickListener() { // from class: org.telegram.ui.ChatActivity$21$$ExternalSyntheticLambda0
                @Override // android.view.View.OnLongClickListener
                public final boolean onLongClick(View view) {
                    return ChatActivity.AnonymousClass21.this.m2003lambda$new$0$orgtelegramuiChatActivity$21(view);
                }
            });
        }

        /* renamed from: lambda$new$0$org-telegram-ui-ChatActivity$21 */
        public /* synthetic */ boolean m2003lambda$new$0$orgtelegramuiChatActivity$21(View v) {
            if (AndroidUtilities.isTablet() || ChatActivity.this.isThreadChat()) {
                return false;
            }
            this.startY = this.lastY;
            ChatActivity.this.openPinnedMessagesList(true);
            return true;
        }

        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent event) {
            this.lastY = event.getY();
            if (event.getAction() == 1) {
                ChatActivity.this.finishPreviewFragment();
            } else if (event.getAction() == 2) {
                float dy = this.startY - this.lastY;
                ChatActivity.this.movePreviewFragment(dy);
                if (dy < 0.0f) {
                    this.startY = this.lastY;
                }
            }
            return super.onTouchEvent(event);
        }

        @Override // android.widget.FrameLayout, android.view.View
        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
            if (ChatActivity.this.setPinnedTextTranslationX) {
                for (int a = 0; a < ChatActivity.this.pinnedNextAnimation.length; a++) {
                    if (ChatActivity.this.pinnedNextAnimation[a] != null) {
                        ChatActivity.this.pinnedNextAnimation[a].start();
                    }
                }
                ChatActivity.this.setPinnedTextTranslationX = false;
            }
        }

        @Override // android.view.ViewGroup
        protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
            if (child == ChatActivity.this.pinnedLineView) {
                canvas.save();
                canvas.clipRect(0, 0, getMeasuredWidth(), AndroidUtilities.dp(48.0f));
            }
            if (child == ChatActivity.this.pinnedMessageTextView[0] || child == ChatActivity.this.pinnedMessageTextView[1]) {
                canvas.save();
                canvas.clipRect(0, 0, getMeasuredWidth() - AndroidUtilities.dp(38.0f), getMeasuredHeight());
                boolean result = super.drawChild(canvas, child, drawingTime);
                canvas.restore();
                return result;
            }
            boolean result2 = super.drawChild(canvas, child, drawingTime);
            if (child == ChatActivity.this.pinnedLineView) {
                canvas.restore();
                return result2;
            }
            return result2;
        }
    }

    /* renamed from: lambda$createView$28$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1799lambda$createView$28$orgtelegramuiChatActivity(View v) {
        int forceNextPinnedMessageId;
        this.wasManualScroll = true;
        if (isThreadChat()) {
            scrollToMessageId(this.threadMessageId, 0, true, 0, true, 0);
        } else if (this.currentPinnedMessageId != 0) {
            int currentPinned = this.currentPinnedMessageId;
            int forceNextPinnedMessageId2 = 0;
            if (!this.pinnedMessageIds.isEmpty()) {
                ArrayList<Integer> arrayList = this.pinnedMessageIds;
                if (currentPinned == arrayList.get(arrayList.size() - 1).intValue()) {
                    forceNextPinnedMessageId2 = this.pinnedMessageIds.get(0).intValue() + 1;
                    this.forceScrollToFirst = true;
                } else {
                    forceNextPinnedMessageId2 = currentPinned - 1;
                    this.forceScrollToFirst = false;
                }
            }
            this.forceNextPinnedMessageId = forceNextPinnedMessageId2;
            if (this.forceScrollToFirst) {
                forceNextPinnedMessageId = forceNextPinnedMessageId2;
            } else {
                forceNextPinnedMessageId = -forceNextPinnedMessageId2;
            }
            scrollToMessageId(currentPinned, 0, true, 0, true, forceNextPinnedMessageId);
            updateMessagesVisiblePart(false);
        }
    }

    /* renamed from: lambda$createView$29$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1800lambda$createView$29$orgtelegramuiChatActivity(View v) {
        openPinnedMessagesList(false);
    }

    /* renamed from: lambda$createView$31$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1802lambda$createView$31$orgtelegramuiChatActivity(View v) {
        boolean allowPin;
        if (getParentActivity() == null) {
            return;
        }
        TLRPC.Chat chat = this.currentChat;
        if (chat != null) {
            allowPin = ChatObject.canPinMessages(chat);
        } else if (this.currentEncryptedChat == null) {
            TLRPC.UserFull userFull = this.userInfo;
            if (userFull != null) {
                allowPin = userFull.can_pin_message;
            } else {
                allowPin = false;
            }
        } else {
            allowPin = false;
        }
        if (allowPin) {
            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
            builder.setTitle(LocaleController.getString("UnpinMessageAlertTitle", R.string.UnpinMessageAlertTitle));
            builder.setMessage(LocaleController.getString("UnpinMessageAlert", R.string.UnpinMessageAlert));
            builder.setPositiveButton(LocaleController.getString("UnpinMessage", R.string.UnpinMessage), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda166
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i) {
                    ChatActivity.this.m1801lambda$createView$30$orgtelegramuiChatActivity(dialogInterface, i);
                }
            });
            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
            showDialog(builder.create());
        } else if (!this.pinnedMessageIds.isEmpty()) {
            SharedPreferences preferences = MessagesController.getNotificationsSettings(this.currentAccount);
            SharedPreferences.Editor edit2 = preferences.edit();
            edit2.putInt("pin_" + this.dialog_id, this.pinnedMessageIds.get(0).intValue()).commit();
            updatePinnedMessageView(true);
        }
    }

    /* renamed from: lambda$createView$30$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1801lambda$createView$30$orgtelegramuiChatActivity(DialogInterface dialogInterface, int i) {
        MessageObject messageObject = this.pinnedMessageObjects.get(Integer.valueOf(this.currentPinnedMessageId));
        if (messageObject == null) {
            messageObject = this.messagesDict[0].get(this.currentPinnedMessageId);
        }
        unpinMessage(messageObject);
    }

    /* renamed from: lambda$createView$33$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1804lambda$createView$33$orgtelegramuiChatActivity(View v2) {
        AlertsCreator.showBlockReportSpamAlert(this, this.dialog_id, this.currentUser, this.currentChat, this.currentEncryptedChat, this.reportSpamButton.getTag(R.id.object_tag) != null, this.chatInfo, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda126
            @Override // org.telegram.messenger.MessagesStorage.IntCallback
            public final void run(int i) {
                ChatActivity.this.m1803lambda$createView$32$orgtelegramuiChatActivity(i);
            }
        }, this.themeDelegate);
    }

    /* renamed from: lambda$createView$32$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1803lambda$createView$32$orgtelegramuiChatActivity(int param) {
        if (param == 0) {
            updateTopPanel(true);
        } else {
            finishFragment();
        }
    }

    /* renamed from: lambda$createView$36$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1807lambda$createView$36$orgtelegramuiChatActivity(Context context, View v) {
        if (this.addToContactsButtonArchive) {
            getMessagesController().addDialogToFolder(this.dialog_id, 0, 0, 0L);
            this.undoView.showWithAction(this.dialog_id, 23, (Runnable) null);
            SharedPreferences preferences = MessagesController.getNotificationsSettings(this.currentAccount);
            SharedPreferences.Editor editor = preferences.edit();
            editor.putBoolean("dialog_bar_archived" + this.dialog_id, false);
            editor.putBoolean("dialog_bar_block" + this.dialog_id, false);
            editor.putBoolean("dialog_bar_report" + this.dialog_id, false);
            editor.commit();
            updateTopPanel(false);
            getNotificationsController().clearDialogNotificationsSettings(this.dialog_id);
        } else if (this.addToContactsButton.getTag() != null && ((Integer) this.addToContactsButton.getTag()).intValue() == 4) {
            TLRPC.ChatFull chatFull = this.chatInfo;
            if (chatFull != null && chatFull.participants != null) {
                LongSparseArray<TLObject> users = new LongSparseArray<>();
                for (int a = 0; a < this.chatInfo.participants.participants.size(); a++) {
                    users.put(this.chatInfo.participants.participants.get(a).user_id, null);
                }
                final long chatId = this.chatInfo.id;
                InviteMembersBottomSheet bottomSheet = new InviteMembersBottomSheet(context, this.currentAccount, users, this.chatInfo.id, this, this.themeDelegate);
                bottomSheet.setDelegate(new GroupCreateActivity.ContactsAddActivityDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda172
                    @Override // org.telegram.ui.GroupCreateActivity.ContactsAddActivityDelegate
                    public final void didSelectUsers(ArrayList arrayList, int i) {
                        ChatActivity.this.m1805lambda$createView$34$orgtelegramuiChatActivity(chatId, arrayList, i);
                    }

                    @Override // org.telegram.ui.GroupCreateActivity.ContactsAddActivityDelegate
                    public /* synthetic */ void needAddBot(TLRPC.User user) {
                        GroupCreateActivity.ContactsAddActivityDelegate.CC.$default$needAddBot(this, user);
                    }
                });
                bottomSheet.show();
            }
        } else if (this.addToContactsButton.getTag() != null) {
            shareMyContact(1, null);
        } else {
            Bundle args = new Bundle();
            args.putLong("user_id", this.currentUser.id);
            args.putBoolean("addContact", true);
            ContactAddActivity activity = new ContactAddActivity(args);
            activity.setDelegate(new ContactAddActivity.ContactAddActivityDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda170
                @Override // org.telegram.ui.ContactAddActivity.ContactAddActivityDelegate
                public final void didAddToContacts() {
                    ChatActivity.this.m1806lambda$createView$35$orgtelegramuiChatActivity();
                }
            });
            presentFragment(activity);
        }
    }

    /* renamed from: lambda$createView$34$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1805lambda$createView$34$orgtelegramuiChatActivity(long chatId, ArrayList users1, int fwdCount) {
        int N = users1.size();
        for (int a = 0; a < N; a++) {
            TLRPC.User user = (TLRPC.User) users1.get(a);
            getMessagesController().addUserToChat(chatId, user, fwdCount, null, this, null);
        }
        getMessagesController().hidePeerSettingsBar(this.dialog_id, this.currentUser, this.currentChat);
        updateTopPanel(true);
        updateInfoTopView(true);
    }

    /* renamed from: lambda$createView$35$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1806lambda$createView$35$orgtelegramuiChatActivity() {
        this.undoView.showWithAction(this.dialog_id, 8, this.currentUser);
    }

    /* renamed from: lambda$createView$37$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1808lambda$createView$37$orgtelegramuiChatActivity(View v) {
        long did = this.dialog_id;
        if (this.currentEncryptedChat != null) {
            did = this.currentUser.id;
        }
        getMessagesController().hidePeerSettingsBar(did, this.currentUser, this.currentChat);
        updateTopPanel(true);
        updateInfoTopView(true);
    }

    /* renamed from: lambda$createView$38$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1809lambda$createView$38$orgtelegramuiChatActivity(View view) {
        this.wasManualScroll = true;
        this.textSelectionHelper.cancelTextSelectionRunnable();
        int i = this.createUnreadMessageAfterId;
        if (i != 0) {
            scrollToMessageId(i, 0, false, this.returnToLoadIndex, true, 0);
            return;
        }
        int i2 = this.returnToMessageId;
        if (i2 > 0) {
            scrollToMessageId(i2, 0, true, this.returnToLoadIndex, true, 0);
            return;
        }
        scrollToLastMessage(false);
        if (!this.pinnedMessageIds.isEmpty()) {
            this.forceScrollToFirst = true;
            this.forceNextPinnedMessageId = this.pinnedMessageIds.get(0).intValue();
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$24 */
    /* loaded from: classes4.dex */
    public class AnonymousClass24 implements View.OnClickListener {
        AnonymousClass24() {
            ChatActivity.this = this$0;
        }

        private void loadLastUnreadMention() {
            ChatActivity.this.wasManualScroll = true;
            if (ChatActivity.this.hasAllMentionsLocal) {
                ChatActivity.this.getMessagesStorage().getUnreadMention(ChatActivity.this.dialog_id, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$24$$ExternalSyntheticLambda1
                    @Override // org.telegram.messenger.MessagesStorage.IntCallback
                    public final void run(int i) {
                        ChatActivity.AnonymousClass24.this.m2004lambda$loadLastUnreadMention$0$orgtelegramuiChatActivity$24(i);
                    }
                });
                return;
            }
            final MessagesStorage messagesStorage = ChatActivity.this.getMessagesStorage();
            TLRPC.TL_messages_getUnreadMentions req = new TLRPC.TL_messages_getUnreadMentions();
            req.peer = ChatActivity.this.getMessagesController().getInputPeer(ChatActivity.this.dialog_id);
            req.limit = 1;
            req.add_offset = ChatActivity.this.newMentionsCount - 1;
            ChatActivity.this.getConnectionsManager().sendRequest(req, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$24$$ExternalSyntheticLambda2
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    ChatActivity.AnonymousClass24.this.m2006lambda$loadLastUnreadMention$2$orgtelegramuiChatActivity$24(messagesStorage, tLObject, tL_error);
                }
            });
        }

        /* renamed from: lambda$loadLastUnreadMention$0$org-telegram-ui-ChatActivity$24 */
        public /* synthetic */ void m2004lambda$loadLastUnreadMention$0$orgtelegramuiChatActivity$24(int param) {
            if (param == 0) {
                ChatActivity.this.hasAllMentionsLocal = false;
                loadLastUnreadMention();
                return;
            }
            ChatActivity.this.scrollToMessageId(param, 0, false, 0, true, 0);
        }

        /* renamed from: lambda$loadLastUnreadMention$2$org-telegram-ui-ChatActivity$24 */
        public /* synthetic */ void m2006lambda$loadLastUnreadMention$2$orgtelegramuiChatActivity$24(final MessagesStorage messagesStorage, final TLObject response, final TLRPC.TL_error error) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$24$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.AnonymousClass24.this.m2005lambda$loadLastUnreadMention$1$orgtelegramuiChatActivity$24(response, error, messagesStorage);
                }
            });
        }

        /* renamed from: lambda$loadLastUnreadMention$1$org-telegram-ui-ChatActivity$24 */
        public /* synthetic */ void m2005lambda$loadLastUnreadMention$1$orgtelegramuiChatActivity$24(TLObject response, TLRPC.TL_error error, MessagesStorage messagesStorage) {
            TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
            if (error != null || res.messages.isEmpty()) {
                if (res != null) {
                    ChatActivity.this.newMentionsCount = res.count;
                } else {
                    ChatActivity.this.newMentionsCount = 0;
                }
                messagesStorage.resetMentionsCount(ChatActivity.this.dialog_id, ChatActivity.this.newMentionsCount);
                if (ChatActivity.this.newMentionsCount == 0) {
                    ChatActivity.this.hasAllMentionsLocal = true;
                    ChatActivity.this.showMentionDownButton(false, true);
                    return;
                }
                ChatActivity.this.mentiondownButtonCounter.setText(String.format("%d", Integer.valueOf(ChatActivity.this.newMentionsCount)));
                loadLastUnreadMention();
                return;
            }
            int id = res.messages.get(0).id;
            MessageObject object = (MessageObject) ChatActivity.this.messagesDict[0].get(id);
            messagesStorage.markMessageAsMention(ChatActivity.this.dialog_id, id);
            if (object != null) {
                object.messageOwner.media_unread = true;
                object.messageOwner.mentioned = true;
            }
            ChatActivity.this.scrollToMessageId(id, 0, false, 0, true, 0);
        }

        @Override // android.view.View.OnClickListener
        public void onClick(View view) {
            loadLastUnreadMention();
        }
    }

    /* renamed from: lambda$createView$41$org-telegram-ui-ChatActivity */
    public /* synthetic */ boolean m1812lambda$createView$41$orgtelegramuiChatActivity(View view) {
        this.scrimPopupWindow = ReadAllMentionsMenu.show(1, getParentActivity(), this.contentView, view, getResourceProvider(), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda30
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1810lambda$createView$39$orgtelegramuiChatActivity();
            }
        });
        dimBehindView((View) this.mentiondownButton, true);
        this.scrimPopupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda12
            @Override // android.widget.PopupWindow.OnDismissListener
            public final void onDismiss() {
                ChatActivity.this.m1811lambda$createView$40$orgtelegramuiChatActivity();
            }
        });
        view.performHapticFeedback(0, 2);
        return true;
    }

    /* renamed from: lambda$createView$39$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1810lambda$createView$39$orgtelegramuiChatActivity() {
        for (int a = 0; a < this.messages.size(); a++) {
            MessageObject messageObject = this.messages.get(a);
            if (messageObject.messageOwner.mentioned && !messageObject.isContentUnread()) {
                messageObject.setContentIsRead();
            }
        }
        this.newMentionsCount = 0;
        getMessagesController().markMentionsAsRead(this.dialog_id);
        this.hasAllMentionsLocal = true;
        showMentionDownButton(false, true);
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.dismiss();
        }
    }

    /* renamed from: lambda$createView$40$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1811lambda$createView$40$orgtelegramuiChatActivity() {
        this.scrimPopupWindow = null;
        this.menuDeleteItem = null;
        this.scrimPopupWindowItems = null;
        this.chatLayoutManager.setCanScrollVertically(true);
        dimBehindView(false);
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.getEditField().setAllowDrawCursor(true);
        }
    }

    /* renamed from: lambda$createView$42$org-telegram-ui-ChatActivity */
    public /* synthetic */ boolean m1813lambda$createView$42$orgtelegramuiChatActivity(ContentPreviewViewer.ContentPreviewViewerDelegate contentPreviewViewerDelegate, View v, MotionEvent event) {
        return ContentPreviewViewer.getInstance().onTouch(event, this.mentionContainer.getListView(), 0, this.mentionsOnItemClickListener, this.mentionContainer.getAdapter().isStickers() ? contentPreviewViewerDelegate : null, this.themeDelegate);
    }

    /* renamed from: lambda$createView$46$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1817lambda$createView$46$orgtelegramuiChatActivity(View view, int position) {
        if (position == 0 || this.mentionContainer.getAdapter().isBannedInline()) {
            return;
        }
        int position2 = position - 1;
        final Object object = this.mentionContainer.getAdapter().getItem(position2);
        int start = this.mentionContainer.getAdapter().getResultStartPosition();
        int len = this.mentionContainer.getAdapter().getResultLength();
        if (object instanceof TLRPC.TL_document) {
            if (this.chatMode == 0 && checkSlowMode(view)) {
                return;
            }
            MessageObject.SendAnimationData sendAnimationData = null;
            if (view instanceof StickerCell) {
                sendAnimationData = ((StickerCell) view).getSendAnimationData();
            }
            final TLRPC.TL_document document = (TLRPC.TL_document) object;
            final Object parent = this.mentionContainer.getAdapter().getItemParent(position2);
            if (this.chatMode != 1) {
                getSendMessagesHelper().sendSticker(document, this.stickersAdapter.getQuery(), this.dialog_id, this.replyingMessageObject, getThreadMessage(), parent, sendAnimationData, true, 0);
            } else {
                final String query = this.stickersAdapter.getQuery();
                AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda156
                    @Override // org.telegram.ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                    public final void didSelectDate(boolean z, int i) {
                        ChatActivity.this.m1814lambda$createView$43$orgtelegramuiChatActivity(document, query, parent, z, i);
                    }
                }, this.themeDelegate);
            }
            hideFieldPanel(false);
            this.chatActivityEnterView.addStickerToRecent(document);
            this.chatActivityEnterView.setFieldText("");
        } else if (object instanceof TLRPC.Chat) {
            TLRPC.Chat chat = (TLRPC.Chat) object;
            if (this.searchingForUser && this.searchContainer.getVisibility() == 0) {
                searchUserMessages(null, chat);
            } else if (chat.username != null) {
                this.chatActivityEnterView.replaceWithText(start, len, "@" + chat.username + " ", false);
            }
        } else if (object instanceof TLRPC.User) {
            TLRPC.User user = (TLRPC.User) object;
            if (this.searchingForUser && this.searchContainer.getVisibility() == 0) {
                searchUserMessages(user, null);
            } else if (user.username != null) {
                this.chatActivityEnterView.replaceWithText(start, len, "@" + user.username + " ", false);
            } else {
                String name = UserObject.getFirstName(user, false);
                Spannable spannable = new SpannableString(name + " ");
                spannable.setSpan(new URLSpanUserMention("" + user.id, 3), 0, spannable.length(), 33);
                this.chatActivityEnterView.replaceWithText(start, len, spannable, false);
            }
        } else if (object instanceof String) {
            if (!this.mentionContainer.getAdapter().isBotCommands()) {
                this.chatActivityEnterView.replaceWithText(start, len, object + " ", false);
            } else if (this.chatMode == 1) {
                AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda152
                    @Override // org.telegram.ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                    public final void didSelectDate(boolean z, int i) {
                        ChatActivity.this.m1815lambda$createView$44$orgtelegramuiChatActivity(object, z, i);
                    }
                }, this.themeDelegate);
            } else if (!checkSlowMode(view)) {
                getSendMessagesHelper().sendMessage((String) object, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, false, null, null, null, true, 0, null);
                this.chatActivityEnterView.setFieldText("");
                hideFieldPanel(false);
            }
        } else if (object instanceof TLRPC.BotInlineResult) {
            if (this.chatActivityEnterView.getFieldText() != null) {
                if (this.chatMode != 1 && checkSlowMode(view)) {
                    return;
                }
                final TLRPC.BotInlineResult result = (TLRPC.BotInlineResult) object;
                if (this.currentEncryptedChat != null) {
                    int error = 0;
                    if ((result.send_message instanceof TLRPC.TL_botInlineMessageMediaAuto) && "game".equals(result.type)) {
                        error = 1;
                    } else if (result.send_message instanceof TLRPC.TL_botInlineMessageMediaInvoice) {
                        error = 2;
                    }
                    if (error != 0) {
                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                        builder.setTitle(LocaleController.getString("SendMessageTitle", R.string.SendMessageTitle));
                        if (error == 1) {
                            builder.setMessage(LocaleController.getString("GameCantSendSecretChat", R.string.GameCantSendSecretChat));
                        } else {
                            builder.setMessage(LocaleController.getString("InvoiceCantSendSecretChat", R.string.InvoiceCantSendSecretChat));
                        }
                        builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
                        showDialog(builder.create());
                        return;
                    }
                }
                if ((result.type.equals("photo") && (result.photo != null || result.content != null)) || ((result.type.equals("gif") && (result.document != null || result.content != null)) || (result.type.equals("video") && result.document != null))) {
                    ArrayList<Object> arrayList = new ArrayList<>(this.mentionContainer.getAdapter().getSearchResultBotContext());
                    this.botContextResults = arrayList;
                    PhotoViewer.getInstance().setParentActivity(getParentActivity(), this.themeDelegate);
                    PhotoViewer.getInstance().openPhotoForSelect(arrayList, this.mentionContainer.getAdapter().getItemPosition(position2), 3, false, this.botContextProvider, this);
                } else if (this.chatMode == 1) {
                    AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda154
                        @Override // org.telegram.ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                        public final void didSelectDate(boolean z, int i) {
                            ChatActivity.this.m1816lambda$createView$45$orgtelegramuiChatActivity(result, z, i);
                        }
                    }, this.themeDelegate);
                } else {
                    m1816lambda$createView$45$orgtelegramuiChatActivity(result, true, 0);
                }
            }
        } else if (object instanceof TLRPC.TL_inlineBotSwitchPM) {
            processInlineBotContextPM((TLRPC.TL_inlineBotSwitchPM) object);
        } else if (object instanceof MediaDataController.KeywordResult) {
            String code = ((MediaDataController.KeywordResult) object).emoji;
            this.chatActivityEnterView.addEmojiToRecent(code);
            this.chatActivityEnterView.replaceWithText(start, len, code, true);
            this.mentionContainer.updateVisibility(false);
        }
    }

    /* renamed from: lambda$createView$43$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1814lambda$createView$43$orgtelegramuiChatActivity(TLRPC.TL_document document, String query, Object parent, boolean notify, int scheduleDate) {
        SendMessagesHelper.getInstance(this.currentAccount).sendSticker(document, query, this.dialog_id, this.replyingMessageObject, getThreadMessage(), parent, null, notify, scheduleDate);
    }

    /* renamed from: lambda$createView$44$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1815lambda$createView$44$orgtelegramuiChatActivity(Object object, boolean notify, int scheduleDate) {
        getSendMessagesHelper().sendMessage((String) object, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, false, null, null, null, notify, scheduleDate, null);
        this.chatActivityEnterView.setFieldText("");
        hideFieldPanel(false);
    }

    /* renamed from: lambda$createView$48$org-telegram-ui-ChatActivity */
    public /* synthetic */ boolean m1819lambda$createView$48$orgtelegramuiChatActivity(View view, int position) {
        boolean z = false;
        if (getParentActivity() == null || !this.mentionContainer.getAdapter().isLongClickEnabled()) {
            return false;
        }
        Object object = this.mentionContainer.getAdapter().getItem(position);
        if (!(object instanceof String)) {
            return false;
        }
        if (this.mentionContainer.getAdapter().isBotCommands()) {
            if (!URLSpanBotCommand.enabled) {
                return false;
            }
            this.chatActivityEnterView.setFieldText("");
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            String str = (String) object;
            TLRPC.Chat chat = this.currentChat;
            if (chat != null && chat.megagroup) {
                z = true;
            }
            chatActivityEnterView.setCommand(null, str, true, z);
            return true;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
        builder.setMessage(LocaleController.getString("ClearSearch", R.string.ClearSearch));
        builder.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton).toUpperCase(), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda175
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.m1818lambda$createView$47$orgtelegramuiChatActivity(dialogInterface, i);
            }
        });
        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
        showDialog(builder.create());
        return true;
    }

    /* renamed from: lambda$createView$47$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1818lambda$createView$47$orgtelegramuiChatActivity(DialogInterface dialogInterface, int i) {
        this.mentionContainer.getAdapter().clearRecentHashtags();
    }

    /* renamed from: lambda$createView$50$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1821lambda$createView$50$orgtelegramuiChatActivity(View view) {
        this.wasManualScroll = true;
        getMessagesController().getNextReactionMention(this.dialog_id, this.reactionsMentionCount, new Consumer() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda14
            @Override // androidx.core.util.Consumer
            public final void accept(Object obj) {
                ChatActivity.this.m1820lambda$createView$49$orgtelegramuiChatActivity((Integer) obj);
            }
        });
    }

    /* renamed from: lambda$createView$49$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1820lambda$createView$49$orgtelegramuiChatActivity(Integer messageId) {
        if (messageId.intValue() == 0) {
            this.reactionsMentionCount = 0;
            updateReactionsMentionButton(true);
            getMessagesController().markReactionsAsRead(this.dialog_id);
            return;
        }
        updateReactionsMentionButton(true);
        scrollToMessageId(messageId.intValue(), 0, false, 0, true, 0);
    }

    /* renamed from: lambda$createView$53$org-telegram-ui-ChatActivity */
    public /* synthetic */ boolean m1824lambda$createView$53$orgtelegramuiChatActivity(View view) {
        this.scrimPopupWindow = ReadAllMentionsMenu.show(0, getParentActivity(), this.contentView, view, getResourceProvider(), new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda31
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1822lambda$createView$51$orgtelegramuiChatActivity();
            }
        });
        dimBehindView((View) this.reactionsMentiondownButton, true);
        this.scrimPopupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda13
            @Override // android.widget.PopupWindow.OnDismissListener
            public final void onDismiss() {
                ChatActivity.this.m1823lambda$createView$52$orgtelegramuiChatActivity();
            }
        });
        view.performHapticFeedback(0, 2);
        return false;
    }

    /* renamed from: lambda$createView$51$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1822lambda$createView$51$orgtelegramuiChatActivity() {
        for (int i = 0; i < this.messages.size(); i++) {
            this.messages.get(i).markReactionsAsRead();
        }
        this.reactionsMentionCount = 0;
        updateReactionsMentionButton(true);
        getMessagesController().markReactionsAsRead(this.dialog_id);
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.dismiss();
        }
    }

    /* renamed from: lambda$createView$52$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1823lambda$createView$52$orgtelegramuiChatActivity() {
        this.scrimPopupWindow = null;
        this.menuDeleteItem = null;
        this.scrimPopupWindowItems = null;
        this.chatLayoutManager.setCanScrollVertically(true);
        dimBehindView(false);
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.getEditField().setAllowDrawCursor(true);
        }
    }

    /* renamed from: lambda$createView$54$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1825lambda$createView$54$orgtelegramuiChatActivity(View view, int position) {
        getMediaDataController().jumpToSearchedMessage(this.classGuid, position);
        showMessagesSearchListView(false);
    }

    /* renamed from: lambda$createView$55$org-telegram-ui-ChatActivity */
    public /* synthetic */ boolean m1826lambda$createView$55$orgtelegramuiChatActivity(View v, MotionEvent event) {
        if (event.getAction() == 0) {
            checkRecordLocked(false);
        }
        this.overlayView.getParent().requestDisallowInterceptTouchEvent(true);
        return true;
    }

    public static /* synthetic */ boolean lambda$createView$56(View v, MotionEvent event) {
        return true;
    }

    /* renamed from: org.telegram.ui.ChatActivity$35 */
    /* loaded from: classes4.dex */
    public class AnonymousClass35 extends ChatActivityEnterView {
        int lastContentViewHeight;
        int messageEditTextPredrawHeigth;
        int messageEditTextPredrawScrollY;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass35(Activity context, SizeNotifierFrameLayout parent, ChatActivity fragment, boolean isChat, Theme.ResourcesProvider resourcesProvider) {
            super(context, parent, fragment, isChat, resourcesProvider);
            ChatActivity.this = this$0;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView, android.view.ViewGroup
        public boolean onInterceptTouchEvent(MotionEvent ev) {
            if (getAlpha() != 1.0f) {
                return false;
            }
            return super.onInterceptTouchEvent(ev);
        }

        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent event) {
            if (getAlpha() != 1.0f) {
                return false;
            }
            return super.onTouchEvent(event);
        }

        @Override // android.view.ViewGroup, android.view.View
        public boolean dispatchTouchEvent(MotionEvent ev) {
            if (getAlpha() != 1.0f) {
                return false;
            }
            return super.dispatchTouchEvent(ev);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView
        protected boolean pannelAnimationEnabled() {
            if (!ChatActivity.this.openAnimationEnded) {
                return false;
            }
            return true;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView
        public void checkAnimation() {
            if (ChatActivity.this.actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                if (ChatActivity.this.messageEditTextAnimator != null) {
                    ChatActivity.this.messageEditTextAnimator.cancel();
                }
                if (ChatActivity.this.changeBoundAnimator != null) {
                    ChatActivity.this.changeBoundAnimator.cancel();
                }
                ChatActivity.this.chatActivityEnterViewAnimateFromTop = 0;
                this.shouldAnimateEditTextWithBounds = false;
                return;
            }
            int t = getBackgroundTop();
            if (ChatActivity.this.chatActivityEnterViewAnimateFromTop != 0 && t != ChatActivity.this.chatActivityEnterViewAnimateFromTop && this.lastContentViewHeight == ChatActivity.this.contentView.getMeasuredHeight()) {
                int dy = (this.animatedTop + ChatActivity.this.chatActivityEnterViewAnimateFromTop) - t;
                this.animatedTop = dy;
                if (ChatActivity.this.changeBoundAnimator != null) {
                    ChatActivity.this.changeBoundAnimator.removeAllListeners();
                    ChatActivity.this.changeBoundAnimator.cancel();
                }
                ChatActivity.this.chatListView.setTranslationY(dy);
                if (this.topView != null && this.topView.getVisibility() == 0) {
                    this.topView.setTranslationY(this.animatedTop + ((1.0f - this.topViewEnterProgress) * this.topView.getLayoutParams().height));
                    if (this.topLineView != null) {
                        this.topLineView.setTranslationY(this.animatedTop);
                    }
                }
                if (ChatActivity.this.mentionContainer != null) {
                    ChatActivity.this.mentionContainer.setTranslationY(dy);
                }
                ChatActivity.this.changeBoundAnimator = ValueAnimator.ofFloat(dy, 0.0f);
                ChatActivity.this.changeBoundAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$35$$ExternalSyntheticLambda0
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ChatActivity.AnonymousClass35.this.m2007lambda$checkAnimation$0$orgtelegramuiChatActivity$35(valueAnimator);
                    }
                });
                ChatActivity.this.changeBoundAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.35.1
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animation) {
                        AnonymousClass35.this.animatedTop = 0;
                        if (AnonymousClass35.this.topView == null || AnonymousClass35.this.topView.getVisibility() != 0) {
                            ChatActivity.this.chatListView.setTranslationY(0.0f);
                            if (ChatActivity.this.mentionContainer != null) {
                                ChatActivity.this.mentionContainer.setTranslationY(0.0f);
                            }
                        } else {
                            AnonymousClass35.this.topView.setTranslationY(AnonymousClass35.this.animatedTop + ((1.0f - AnonymousClass35.this.topViewEnterProgress) * AnonymousClass35.this.topView.getLayoutParams().height));
                            if (AnonymousClass35.this.topLineView != null) {
                                AnonymousClass35.this.topLineView.setTranslationY(AnonymousClass35.this.animatedTop);
                            }
                        }
                        ChatActivity.this.changeBoundAnimator = null;
                    }
                });
                ChatActivity.this.changeBoundAnimator.setDuration(250L);
                ChatActivity.this.changeBoundAnimator.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                if (!ChatActivity.this.waitingForSendingMessageLoad) {
                    ChatActivity.this.changeBoundAnimator.start();
                }
                ChatActivity.this.invalidateChatListViewTopPadding();
                ChatActivity.this.invalidateMessagesVisiblePart();
                ChatActivity.this.chatActivityEnterViewAnimateFromTop = 0;
            } else if (this.lastContentViewHeight != ChatActivity.this.contentView.getMeasuredHeight()) {
                ChatActivity.this.chatActivityEnterViewAnimateFromTop = 0;
            }
            if (this.shouldAnimateEditTextWithBounds) {
                this.messageEditText.setOffsetY(this.messageEditText.getOffsetY() - ((this.messageEditTextPredrawHeigth - this.messageEditText.getMeasuredHeight()) + (this.messageEditTextPredrawScrollY - this.messageEditText.getScrollY())));
                ValueAnimator a = ValueAnimator.ofFloat(this.messageEditText.getOffsetY(), 0.0f);
                a.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$35$$ExternalSyntheticLambda1
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ChatActivity.AnonymousClass35.this.m2008lambda$checkAnimation$1$orgtelegramuiChatActivity$35(valueAnimator);
                    }
                });
                if (ChatActivity.this.messageEditTextAnimator != null) {
                    ChatActivity.this.messageEditTextAnimator.cancel();
                }
                ChatActivity.this.messageEditTextAnimator = a;
                a.setDuration(250L);
                a.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
                a.start();
                this.shouldAnimateEditTextWithBounds = false;
            }
            this.lastContentViewHeight = ChatActivity.this.contentView.getMeasuredHeight();
            ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = false;
        }

        /* renamed from: lambda$checkAnimation$0$org-telegram-ui-ChatActivity$35 */
        public /* synthetic */ void m2007lambda$checkAnimation$0$orgtelegramuiChatActivity$35(ValueAnimator a) {
            float top = ((Float) a.getAnimatedValue()).floatValue();
            this.animatedTop = (int) top;
            if (this.topView != null && this.topView.getVisibility() == 0) {
                this.topView.setTranslationY(((1.0f - this.topViewEnterProgress) * this.topView.getLayoutParams().height) + top);
                if (this.topLineView != null) {
                    this.topLineView.setTranslationY(top);
                }
            } else {
                if (ChatActivity.this.mentionContainer != null) {
                    ChatActivity.this.mentionContainer.setTranslationY(top);
                }
                ChatActivity.this.chatListView.setTranslationY(top);
                ChatActivity.this.invalidateChatListViewTopPadding();
                ChatActivity.this.invalidateMessagesVisiblePart();
            }
            invalidate();
        }

        /* renamed from: lambda$checkAnimation$1$org-telegram-ui-ChatActivity$35 */
        public /* synthetic */ void m2008lambda$checkAnimation$1$orgtelegramuiChatActivity$35(ValueAnimator animation) {
            this.messageEditText.setOffsetY(((Float) animation.getAnimatedValue()).floatValue());
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView
        protected void onLineCountChanged(int oldLineCount, int newLineCount) {
            if (ChatActivity.this.chatActivityEnterView != null) {
                this.shouldAnimateEditTextWithBounds = true;
                this.messageEditTextPredrawHeigth = this.messageEditText.getMeasuredHeight();
                this.messageEditTextPredrawScrollY = this.messageEditText.getScrollY();
                ChatActivity.this.contentView.invalidate();
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.chatActivityEnterViewAnimateFromTop = chatActivity.chatActivityEnterView.getBackgroundTop();
            }
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$36 */
    /* loaded from: classes4.dex */
    public class AnonymousClass36 implements ChatActivityEnterView.ChatActivityEnterViewDelegate {
        boolean isEditTextItemVisibilitySuppressed;
        int lastSize;
        final /* synthetic */ ActionBarMenu val$menu;

        AnonymousClass36(ActionBarMenu actionBarMenu) {
            ChatActivity.this = this$0;
            this.val$menu = actionBarMenu;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public int getContentViewHeight() {
            return ChatActivity.this.contentView.getHeight();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public int measureKeyboardHeight() {
            return ChatActivity.this.contentView.measureKeyboardHeight();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public TLRPC.TL_channels_sendAsPeers getSendAsPeers() {
            return ChatActivity.this.sendAsPeersObj;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onMessageSend(CharSequence message, boolean notify, int scheduleDate) {
            if (ChatActivity.this.chatListItemAnimator != null) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.chatActivityEnterViewAnimateFromTop = chatActivity.chatActivityEnterView.getBackgroundTop();
                if (ChatActivity.this.chatActivityEnterViewAnimateFromTop != 0) {
                    ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = true;
                }
            }
            if (ChatActivity.this.mentionContainer != null && ChatActivity.this.mentionContainer.getAdapter() != null) {
                ChatActivity.this.mentionContainer.getAdapter().addHashtagsFromMessage(message);
            }
            if (scheduleDate != 0) {
                if (ChatActivity.this.scheduledMessagesCount == -1) {
                    ChatActivity.this.scheduledMessagesCount = 0;
                }
                if (message != null) {
                    ChatActivity.access$26908(ChatActivity.this);
                }
                if (ChatActivity.this.forwardingMessages != null && !ChatActivity.this.forwardingMessages.messages.isEmpty()) {
                    ChatActivity chatActivity2 = ChatActivity.this;
                    ChatActivity.access$26912(chatActivity2, chatActivity2.forwardingMessages.messages.size());
                }
                ChatActivity.this.updateScheduledInterface(false);
            }
            ChatActivity.this.hideFieldPanel(notify, scheduleDate, true);
            if (ChatActivity.this.chatActivityEnterView != null && ChatActivity.this.chatActivityEnterView.getEmojiView() != null) {
                ChatActivity.this.chatActivityEnterView.getEmojiView().onMessageSend();
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onSwitchRecordMode(boolean video) {
            ChatActivity.this.showVoiceHint(false, video);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onPreAudioVideoRecord() {
            ChatActivity.this.showVoiceHint(true, false);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onUpdateSlowModeButton(View button, boolean show, CharSequence time) {
            ChatActivity.this.showSlowModeHint(button, show, time);
            if (ChatActivity.this.headerItem != null && ChatActivity.this.headerItem.getVisibility() != 0) {
                ChatActivity.this.headerItem.setVisibility(0);
                if (ChatActivity.this.attachItem != null) {
                    ChatActivity.this.attachItem.setVisibility(8);
                }
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTextSelectionChanged(int start, int end) {
            if (ChatActivity.this.editTextItem == null) {
                return;
            }
            if (end - start > 0) {
                if (ChatActivity.this.editTextItem.getTag() == null) {
                    ChatActivity.this.editTextItem.setTag(1);
                    if (ChatActivity.this.editTextItem.getVisibility() != 0) {
                        if (ChatActivity.this.chatMode == 0 && ChatActivity.this.threadMessageId == 0 && !UserObject.isReplyUser(ChatActivity.this.currentUser) && ChatActivity.this.reportType < 0) {
                            ChatActivity.this.editTextItem.setVisibility(0);
                            ChatActivity.this.headerItem.setVisibility(8);
                            ChatActivity.this.attachItem.setVisibility(8);
                        } else {
                            ValueAnimator valueAnimator = ValueAnimator.ofFloat(AndroidUtilities.dp(48.0f), 0.0f);
                            valueAnimator.setDuration(220L);
                            valueAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
                            valueAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.36.1
                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                public void onAnimationStart(Animator animation) {
                                    ChatActivity.this.actionBar.setMenuOffsetSuppressed(true);
                                    ChatActivity.this.editTextItem.setVisibility(0);
                                    AnonymousClass36.this.val$menu.translateXItems(AndroidUtilities.dp(48.0f));
                                }

                                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                                public void onAnimationEnd(Animator animation) {
                                    ChatActivity.this.actionBar.setMenuOffsetSuppressed(false);
                                }
                            });
                            final ActionBarMenu actionBarMenu = this.val$menu;
                            valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$36$$ExternalSyntheticLambda0
                                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                                public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                                    ActionBarMenu.this.translateXItems(((Float) valueAnimator2.getAnimatedValue()).floatValue());
                                }
                            });
                            valueAnimator.start();
                        }
                    }
                }
                ChatActivity.this.editTextStart = start;
                ChatActivity.this.editTextEnd = end;
            } else if (ChatActivity.this.editTextItem.getTag() != null) {
                ChatActivity.this.editTextItem.setTag(null);
                if (ChatActivity.this.editTextItem.getVisibility() != 8) {
                    if (ChatActivity.this.chatMode == 0 && ChatActivity.this.threadMessageId == 0 && !UserObject.isReplyUser(ChatActivity.this.currentUser) && ChatActivity.this.reportType < 0) {
                        ChatActivity.this.editTextItem.setVisibility(8);
                        if (!ChatActivity.this.chatActivityEnterView.hasText() || !TextUtils.isEmpty(ChatActivity.this.chatActivityEnterView.getSlowModeTimer())) {
                            ChatActivity.this.headerItem.setVisibility(0);
                            ChatActivity.this.attachItem.setVisibility(8);
                            return;
                        }
                        ChatActivity.this.headerItem.setVisibility(8);
                        ChatActivity.this.attachItem.setVisibility(0);
                        return;
                    }
                    ValueAnimator valueAnimator2 = ValueAnimator.ofFloat(0.0f, AndroidUtilities.dp(48.0f));
                    valueAnimator2.setDuration(220L);
                    valueAnimator2.setInterpolator(CubicBezierInterpolator.DEFAULT);
                    valueAnimator2.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.36.2
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationStart(Animator animation) {
                            ChatActivity.this.actionBar.setMenuOffsetSuppressed(true);
                            AnonymousClass36.this.isEditTextItemVisibilitySuppressed = true;
                        }

                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animation) {
                            ChatActivity.this.editTextItem.setVisibility(8);
                            AnonymousClass36.this.val$menu.translateXItems(0.0f);
                            ChatActivity.this.actionBar.setMenuOffsetSuppressed(false);
                            AnonymousClass36.this.isEditTextItemVisibilitySuppressed = false;
                        }
                    });
                    final ActionBarMenu actionBarMenu2 = this.val$menu;
                    valueAnimator2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$36$$ExternalSyntheticLambda1
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator3) {
                            ActionBarMenu.this.translateXItems(((Float) valueAnimator3.getAnimatedValue()).floatValue());
                        }
                    });
                    valueAnimator2.start();
                }
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTextChanged(final CharSequence text, boolean bigChange) {
            MediaController.getInstance().setInputFieldHasText(!TextUtils.isEmpty(text) || ChatActivity.this.chatActivityEnterView.isEditingMessage());
            if (ChatActivity.this.stickersAdapter != null && ChatActivity.this.chatActivityEnterView != null && ChatActivity.this.chatActivityEnterView.getVisibility() == 0 && (ChatActivity.this.bottomOverlay == null || ChatActivity.this.bottomOverlay.getVisibility() != 0)) {
                ChatActivity.this.stickersAdapter.searchEmojiByKeyword(text);
            }
            if (ChatActivity.this.mentionContainer != null && ChatActivity.this.mentionContainer.getAdapter() != null) {
                ChatActivity.this.mentionContainer.getAdapter().searchUsernameOrHashtag(text.toString(), ChatActivity.this.chatActivityEnterView.getCursorPosition(), ChatActivity.this.messages, false, false);
            }
            if (ChatActivity.this.waitingForCharaterEnterRunnable != null) {
                AndroidUtilities.cancelRunOnUIThread(ChatActivity.this.waitingForCharaterEnterRunnable);
                ChatActivity.this.waitingForCharaterEnterRunnable = null;
            }
            if ((ChatActivity.this.currentChat == null || ChatObject.canSendEmbed(ChatActivity.this.currentChat)) && ChatActivity.this.chatActivityEnterView.isMessageWebPageSearchEnabled()) {
                if (!ChatActivity.this.chatActivityEnterView.isEditingMessage() || !ChatActivity.this.chatActivityEnterView.isEditingCaption()) {
                    if (bigChange) {
                        ChatActivity.this.searchLinks(text, true);
                        return;
                    }
                    ChatActivity.this.waitingForCharaterEnterRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity.36.3
                        @Override // java.lang.Runnable
                        public void run() {
                            if (this == ChatActivity.this.waitingForCharaterEnterRunnable) {
                                ChatActivity.this.searchLinks(text, false);
                                ChatActivity.this.waitingForCharaterEnterRunnable = null;
                            }
                        }
                    };
                    AndroidUtilities.runOnUIThread(ChatActivity.this.waitingForCharaterEnterRunnable, AndroidUtilities.WEB_URL == null ? 3000L : 1000L);
                }
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTextSpansChanged(CharSequence text) {
            ChatActivity.this.searchLinks(text, true);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needSendTyping() {
            ChatActivity.this.getMessagesController().sendTyping(ChatActivity.this.dialog_id, ChatActivity.this.threadMessageId, 0, ChatActivity.this.classGuid);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onAttachButtonHidden() {
            if (!ChatActivity.this.actionBar.isSearchFieldVisible()) {
                if (ChatActivity.this.editTextItem != null && !this.isEditTextItemVisibilitySuppressed) {
                    ChatActivity.this.editTextItem.setVisibility(8);
                }
                if (TextUtils.isEmpty(ChatActivity.this.chatActivityEnterView.getSlowModeTimer())) {
                    if (ChatActivity.this.headerItem != null) {
                        ChatActivity.this.headerItem.setVisibility(8);
                    }
                    if (ChatActivity.this.attachItem != null) {
                        ChatActivity.this.attachItem.setVisibility(0);
                    }
                }
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onAttachButtonShow() {
            if (!ChatActivity.this.actionBar.isSearchFieldVisible()) {
                if (ChatActivity.this.headerItem != null) {
                    ChatActivity.this.headerItem.setVisibility(0);
                }
                if (ChatActivity.this.editTextItem != null && !this.isEditTextItemVisibilitySuppressed) {
                    ChatActivity.this.editTextItem.setVisibility(8);
                }
                if (ChatActivity.this.attachItem != null) {
                    ChatActivity.this.attachItem.setVisibility(8);
                }
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onMessageEditEnd(boolean loading) {
            if (ChatActivity.this.chatListItemAnimator != null) {
                ChatActivity chatActivity = ChatActivity.this;
                chatActivity.chatActivityEnterViewAnimateFromTop = chatActivity.chatActivityEnterView.getBackgroundTop();
                if (ChatActivity.this.chatActivityEnterViewAnimateFromTop != 0) {
                    ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = true;
                }
            }
            if (!loading) {
                if (ChatActivity.this.mentionContainer != null) {
                    ChatActivity.this.mentionContainer.getAdapter().setNeedBotContext(true);
                }
                if (ChatActivity.this.editingMessageObject != null) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$36$$ExternalSyntheticLambda2
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.AnonymousClass36.this.m2009lambda$onMessageEditEnd$2$orgtelegramuiChatActivity$36();
                        }
                    }, 30L);
                }
                boolean waitingForKeyboard = false;
                if (ChatActivity.this.chatActivityEnterView.isPopupShowing()) {
                    ChatActivity.this.chatActivityEnterView.setFieldFocused();
                    waitingForKeyboard = true;
                }
                ChatActivity.this.chatActivityEnterView.setAllowStickersAndGifs(true, true, waitingForKeyboard);
                if (ChatActivity.this.editingMessageObjectReqId != 0) {
                    ChatActivity.this.getConnectionsManager().cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                    ChatActivity.this.editingMessageObjectReqId = 0;
                }
                ChatActivity.this.updatePinnedMessageView(true);
                ChatActivity.this.updateBottomOverlay();
                ChatActivity.this.updateVisibleRows();
            }
        }

        /* renamed from: lambda$onMessageEditEnd$2$org-telegram-ui-ChatActivity$36 */
        public /* synthetic */ void m2009lambda$onMessageEditEnd$2$orgtelegramuiChatActivity$36() {
            ChatActivity.this.hideFieldPanel(true);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onWindowSizeChanged(int size) {
            if (size < AndroidUtilities.dp(72.0f) + ActionBar.getCurrentActionBarHeight()) {
                ChatActivity.this.allowStickersPanel = false;
                if (ChatActivity.this.stickersPanel.getVisibility() == 0) {
                    ChatActivity.this.stickersPanel.setVisibility(4);
                }
            } else {
                ChatActivity.this.allowStickersPanel = true;
                if (ChatActivity.this.stickersPanel.getVisibility() == 4) {
                    ChatActivity.this.stickersPanel.setVisibility(0);
                }
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.allowContextBotPanel = !chatActivity.chatActivityEnterView.isPopupShowing();
            int size2 = (ChatActivity.this.chatActivityEnterView.isPopupShowing() ? 65536 : 0) + size;
            if (this.lastSize != size2) {
                ChatActivity.this.chatActivityEnterViewAnimateFromTop = 0;
                ChatActivity.this.chatActivityEnterViewAnimateBeforeSending = false;
            }
            this.lastSize = size2;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onStickersTab(boolean opened) {
            if (ChatActivity.this.emojiButtonRed != null) {
                ChatActivity.this.emojiButtonRed.setVisibility(8);
            }
            ChatActivity.this.allowContextBotPanelSecond = !opened;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void didPressAttachButton() {
            if (ChatActivity.this.chatAttachAlert != null) {
                ChatActivity.this.chatAttachAlert.setEditingMessageObject(null);
            }
            ChatActivity.this.openAttachMenu();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needStartRecordVideo(int state, boolean notify, int scheduleDate) {
            if (ChatActivity.this.instantCameraView != null) {
                if (state == 0) {
                    ChatActivity.this.instantCameraView.showCamera();
                    ChatActivity.this.chatListView.stopScroll();
                    ChatActivity.this.chatAdapter.updateRowsSafe();
                    return;
                }
                boolean z = true;
                if (state == 1 || state == 3 || state == 4) {
                    ChatActivity.this.instantCameraView.send(state, notify, scheduleDate);
                } else if (state == 2 || state == 5) {
                    InstantCameraView instantCameraView = ChatActivity.this.instantCameraView;
                    if (state != 2) {
                        z = false;
                    }
                    instantCameraView.cancel(z);
                }
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needChangeVideoPreviewState(int state, float seekProgress) {
            if (ChatActivity.this.instantCameraView != null) {
                ChatActivity.this.instantCameraView.changeVideoPreviewState(state, seekProgress);
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needStartRecordAudio(int state) {
            int visibility = state == 0 ? 8 : 0;
            if (ChatActivity.this.overlayView.getVisibility() != visibility) {
                ChatActivity.this.overlayView.setVisibility(visibility);
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void needShowMediaBanHint() {
            ChatActivity.this.showMediaBannedHint();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onStickersExpandedChange() {
            ChatActivity.this.checkRaiseSensors();
            if (ChatActivity.this.chatActivityEnterView.isStickersExpanded()) {
                AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ChatActivity.this.classGuid);
                if (Bulletin.getVisibleBulletin() != null && Bulletin.getVisibleBulletin().isShowing()) {
                    Bulletin.getVisibleBulletin().hide();
                    return;
                }
                return;
            }
            AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ChatActivity.this.classGuid);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void scrollToSendingMessage() {
            int id = ChatActivity.this.getSendMessagesHelper().getSendingMessageId(ChatActivity.this.dialog_id);
            if (id != 0) {
                ChatActivity.this.scrollToMessageId(id, 0, true, 0, true, 0);
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public boolean hasScheduledMessages() {
            return ChatActivity.this.scheduledMessagesCount > 0 && ChatActivity.this.chatMode == 0;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onSendLongClick() {
            if (ChatActivity.this.scheduledOrNoSoundHint != null) {
                ChatActivity.this.scheduledOrNoSoundHint.hide();
            }
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void openScheduledMessages() {
            ChatActivity.this.openScheduledMessages();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onAudioVideoInterfaceUpdated() {
            ChatActivity.this.updatePagedownButtonVisibility(true);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void bottomPanelTranslationYChanged(float translation) {
            float f = 0.0f;
            if (translation != 0.0f) {
                ChatActivity.this.wasManualScroll = true;
            }
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.bottomPanelTranslationY = chatActivity.chatActivityEnterView.panelAnimationInProgress() ? ChatActivity.this.chatActivityEnterView.getEmojiPadding() - translation : 0.0f;
            ChatActivity chatActivity2 = ChatActivity.this;
            if (chatActivity2.chatActivityEnterView.panelAnimationInProgress()) {
                f = translation;
            }
            chatActivity2.bottomPanelTranslationYReverse = f;
            ChatActivity.this.chatActivityEnterView.setTranslationY(translation);
            ChatActivity.this.mentionContainer.setTranslationY(translation);
            ChatActivity.this.contentView.setEmojiOffset(ChatActivity.this.chatActivityEnterView.panelAnimationInProgress(), ChatActivity.this.bottomPanelTranslationY);
            float translation2 = translation + ChatActivity.this.chatActivityEnterView.getTopViewTranslation();
            ChatActivity.this.mentionContainer.setTranslationY(translation2);
            ChatActivity.this.chatListView.setTranslationY(translation2);
            ChatActivity.this.invalidateChatListViewTopPadding();
            ChatActivity.this.invalidateMessagesVisiblePart();
            ChatActivity.this.updateTextureViewPosition(false);
            ChatActivity.this.contentView.invalidate();
            ChatActivity.this.updateBulletinLayout();
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void prepareMessageSending() {
            ChatActivity.this.waitingForSendingMessageLoad = true;
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public void onTrendingStickersShowed(boolean show) {
            if (show) {
                AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ChatActivity.this.classGuid);
                ChatActivity.this.fragmentView.requestLayout();
                return;
            }
            AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ChatActivity.this.classGuid);
        }

        @Override // org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate
        public boolean hasForwardingMessages() {
            return ChatActivity.this.forwardingMessages != null && !ChatActivity.this.forwardingMessages.messages.isEmpty();
        }
    }

    /* renamed from: lambda$createView$57$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1827lambda$createView$57$orgtelegramuiChatActivity(View v) {
        ForwardingMessagesParams forwardingMessagesParams = this.forwardingMessages;
        if (forwardingMessagesParams != null && !forwardingMessagesParams.messages.isEmpty()) {
            SharedConfig.forwardingOptionsHintHintShowed();
            openForwardingPreview();
        } else if (this.replyingMessageObject != null && (!isThreadChat() || this.replyingMessageObject.getId() != this.threadMessageId)) {
            scrollToMessageId(this.replyingMessageObject.getId(), 0, true, 0, true, 0);
        } else {
            MessageObject messageObject = this.editingMessageObject;
            if (messageObject != null) {
                if (messageObject.canEditMedia() && this.editingMessageObjectReqId == 0) {
                    if (this.chatAttachAlert == null) {
                        createChatAttachView();
                    }
                    this.chatAttachAlert.setEditingMessageObject(this.editingMessageObject);
                    openAttachMenu();
                    return;
                }
                scrollToMessageId(this.editingMessageObject.getId(), 0, true, 0, true, 0);
            }
        }
    }

    /* renamed from: lambda$createView$58$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1828lambda$createView$58$orgtelegramuiChatActivity(View v) {
        ForwardingMessagesParams forwardingMessagesParams = this.forwardingMessages;
        if (forwardingMessagesParams == null || forwardingMessagesParams.messages.isEmpty()) {
            showFieldPanel(false, null, null, null, this.foundWebPage, true, 0, true, true);
        } else {
            openAnotherForward();
        }
    }

    /* renamed from: lambda$createView$59$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1829lambda$createView$59$orgtelegramuiChatActivity(View v) {
        MessageObject messageObject = this.editingMessageObject;
        if (messageObject != null) {
            scrollToMessageId(messageObject.getId(), 0, true, 0, true, 0);
        }
    }

    /* renamed from: lambda$createView$60$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1830lambda$createView$60$orgtelegramuiChatActivity(ChatActivityEnterTopView.EditViewButton button, FrameLayout replyLayout, View v) {
        MessageObject messageObject = this.editingMessageObject;
        if (messageObject == null || !messageObject.canEditMedia() || this.editingMessageObjectReqId != 0) {
            return;
        }
        if (button.isEditButton()) {
            openEditingMessageInPhotoEditor();
        } else {
            replyLayout.callOnClick();
        }
    }

    /* renamed from: lambda$createView$61$org-telegram-ui-ChatActivity */
    public /* synthetic */ boolean m1831lambda$createView$61$orgtelegramuiChatActivity(ContentPreviewViewer.ContentPreviewViewerDelegate contentPreviewViewerDelegate, View v, MotionEvent event) {
        return ContentPreviewViewer.getInstance().onTouch(event, this.stickersListView, 0, this.stickersOnItemClickListener, contentPreviewViewerDelegate, this.themeDelegate);
    }

    /* renamed from: lambda$createView$62$org-telegram-ui-ChatActivity */
    public /* synthetic */ boolean m1832lambda$createView$62$orgtelegramuiChatActivity(View v, MotionEvent event) {
        return getMediaDataController().getFoundMessageObjects().size() <= 1;
    }

    /* renamed from: lambda$createView$63$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1833lambda$createView$63$orgtelegramuiChatActivity(View v) {
        if (getMediaDataController().getFoundMessageObjects().size() > 1) {
            HintView hintView = this.searchAsListHint;
            if (hintView != null) {
                hintView.hide();
            }
            toggleMesagesSearchListView();
            if (!SharedConfig.searchMessagesAsListUsed) {
                SharedConfig.setSearchMessagesAsListUsed(true);
            }
        }
    }

    /* renamed from: lambda$createView$64$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1834lambda$createView$64$orgtelegramuiChatActivity(View view) {
        getMediaDataController().searchMessagesInChat(null, this.dialog_id, this.mergeDialogId, this.classGuid, 1, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages);
        showMessagesSearchListView(false);
        if (!SharedConfig.searchMessagesAsListUsed && SharedConfig.searchMessagesAsListHintShows < 3 && !this.searchAsListHintShown && Math.random() <= 0.25d) {
            showSearchAsListHint();
            this.searchAsListHintShown = true;
            SharedConfig.increaseSearchAsListHintShows();
        }
    }

    /* renamed from: lambda$createView$65$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1835lambda$createView$65$orgtelegramuiChatActivity(View view) {
        getMediaDataController().searchMessagesInChat(null, this.dialog_id, this.mergeDialogId, this.classGuid, 2, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages);
        showMessagesSearchListView(false);
    }

    /* renamed from: lambda$createView$66$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1836lambda$createView$66$orgtelegramuiChatActivity(View view) {
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView != null) {
            mentionsContainerView.setReversed(true);
            this.mentionContainer.getAdapter().setSearchingMentions(true);
        }
        this.searchCalendarButton.setVisibility(8);
        this.searchUserButton.setVisibility(8);
        this.searchingForUser = true;
        this.searchingUserMessages = null;
        this.searchingChatMessages = null;
        this.searchItem.setSearchFieldHint(LocaleController.getString("SearchMembers", R.string.SearchMembers));
        this.searchItem.setSearchFieldCaption(LocaleController.getString("SearchFrom", R.string.SearchFrom));
        AndroidUtilities.showKeyboard(this.searchItem.getSearchField());
        this.searchItem.clearSearchText();
    }

    /* renamed from: lambda$createView$67$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1837lambda$createView$67$orgtelegramuiChatActivity(View view) {
        if (getParentActivity() == null) {
            return;
        }
        AndroidUtilities.hideKeyboard(this.searchItem.getSearchField());
        showDialog(AlertsCreator.createCalendarPickerDialog(getParentActivity(), 1375315200000L, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity.41
            @Override // org.telegram.messenger.MessagesStorage.IntCallback
            public void run(int param) {
                ChatActivity.this.jumpToDate(param);
            }
        }, this.themeDelegate).create());
    }

    /* renamed from: lambda$createView$72$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1842lambda$createView$72$orgtelegramuiChatActivity(final Context context, View view) {
        String str;
        if (getParentActivity() == null || this.pullingDownOffset != 0.0f) {
            return;
        }
        if (this.reportType >= 0) {
            showDialog(new ReportAlert(getParentActivity(), this.reportType) { // from class: org.telegram.ui.ChatActivity.44
                @Override // org.telegram.ui.Components.ReportAlert
                protected void onSend(int type, String message) {
                    ArrayList ids = new ArrayList();
                    for (int b = 0; b < ChatActivity.this.selectedMessagesIds[0].size(); b++) {
                        ids.add(Integer.valueOf(ChatActivity.this.selectedMessagesIds[0].keyAt(b)));
                    }
                    TLRPC.InputPeer peer = ChatActivity.this.currentUser != null ? MessagesController.getInputPeer(ChatActivity.this.currentUser) : MessagesController.getInputPeer(ChatActivity.this.currentChat);
                    AlertsCreator.sendReport(peer, ChatActivity.this.reportType, message, ids);
                    ChatActivity.this.finishFragment();
                    ChatActivity.this.chatActivityDelegate.onReport();
                }
            });
            return;
        }
        boolean z = false;
        if (this.chatMode == 2) {
            finishFragment();
            ChatActivityDelegate chatActivityDelegate = this.chatActivityDelegate;
            if (this.bottomOverlayChatText.getTag() == null) {
                z = true;
            }
            chatActivityDelegate.onUnpin(true, z);
            return;
        }
        TLRPC.User user = this.currentUser;
        if (user != null && this.userBlocked) {
            if (user.bot) {
                String botUserLast = this.botUser;
                this.botUser = null;
                getMessagesController().unblockPeer(this.currentUser.id);
                if (botUserLast == null || botUserLast.length() == 0) {
                    getSendMessagesHelper().sendMessage("/start", this.dialog_id, null, null, null, false, null, null, null, true, 0, null);
                    return;
                } else {
                    getMessagesController().sendBotStart(this.currentUser, botUserLast);
                    return;
                }
            }
            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
            builder.setMessage(LocaleController.getString("AreYouSureUnblockContact", R.string.AreYouSureUnblockContact));
            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda176
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i) {
                    ChatActivity.this.m1838lambda$createView$68$orgtelegramuiChatActivity(dialogInterface, i);
                }
            });
            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
            showDialog(builder.create());
        } else if (UserObject.isReplyUser(user)) {
            toggleMute(true);
        } else {
            TLRPC.User user2 = this.currentUser;
            if (user2 != null && user2.bot && (str = this.botUser) != null) {
                if (str.length() != 0) {
                    getMessagesController().sendBotStart(this.currentUser, this.botUser);
                } else {
                    getSendMessagesHelper().sendMessage("/start", this.dialog_id, null, null, null, false, null, null, null, true, 0, null);
                }
                this.botUser = null;
                updateBottomOverlay();
                return;
            }
            if (ChatObject.isChannel(this.currentChat)) {
                TLRPC.Chat chat = this.currentChat;
                if (!(chat instanceof TLRPC.TL_channelForbidden)) {
                    if (ChatObject.isNotInChat(chat)) {
                        if (!this.currentChat.join_request) {
                            Runnable runnable = this.chatInviteRunnable;
                            if (runnable != null) {
                                AndroidUtilities.cancelRunOnUIThread(runnable);
                                this.chatInviteRunnable = null;
                            }
                            showBottomOverlayProgress(true, true);
                            getMessagesController().addUserToChat(this.currentChat.id, getUserConfig().getCurrentUser(), 0, null, this, null);
                            NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.closeSearchByActiveAction, new Object[0]);
                            if (hasReportSpam() && this.reportSpamButton.getTag(R.id.object_tag) != null) {
                                SharedPreferences preferences = MessagesController.getNotificationsSettings(this.currentAccount);
                                SharedPreferences.Editor edit2 = preferences.edit();
                                edit2.putInt("dialog_bar_vis3" + this.dialog_id, 3).commit();
                                getNotificationCenter().postNotificationName(NotificationCenter.peerSettingsDidLoad, Long.valueOf(this.dialog_id));
                                return;
                            }
                            return;
                        }
                        showBottomOverlayProgress(true, true);
                        MessagesController.getInstance(this.currentAccount).addUserToChat(this.currentChat.id, UserConfig.getInstance(this.currentAccount).getCurrentUser(), 0, null, null, true, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda32
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatActivity.this.m1839lambda$createView$69$orgtelegramuiChatActivity();
                            }
                        }, new MessagesController.ErrorDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda124
                            @Override // org.telegram.messenger.MessagesController.ErrorDelegate
                            public final boolean run(TLRPC.TL_error tL_error) {
                                return ChatActivity.this.m1840lambda$createView$70$orgtelegramuiChatActivity(context, tL_error);
                            }
                        });
                        return;
                    }
                    toggleMute(true);
                    return;
                }
            }
            TLRPC.ChatFull chatFull = this.chatInfo;
            boolean canDeleteHistory = chatFull != null && chatFull.can_delete_channel;
            AlertsCreator.createClearOrDeleteDialogAlert(this, false, this.currentChat, this.currentUser, this.currentEncryptedChat != null, true, canDeleteHistory, new MessagesStorage.BooleanCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda125
                @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
                public final void run(boolean z2) {
                    ChatActivity.this.m1841lambda$createView$71$orgtelegramuiChatActivity(z2);
                }
            }, this.themeDelegate);
        }
    }

    /* renamed from: lambda$createView$68$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1838lambda$createView$68$orgtelegramuiChatActivity(DialogInterface dialogInterface, int i) {
        getMessagesController().unblockPeer(this.currentUser.id);
    }

    /* renamed from: lambda$createView$69$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1839lambda$createView$69$orgtelegramuiChatActivity() {
        showBottomOverlayProgress(false, true);
    }

    /* renamed from: lambda$createView$70$org-telegram-ui-ChatActivity */
    public /* synthetic */ boolean m1840lambda$createView$70$orgtelegramuiChatActivity(Context context, TLRPC.TL_error err) {
        SharedPreferences preferences = MessagesController.getNotificationsSettings(this.currentAccount);
        SharedPreferences.Editor edit2 = preferences.edit();
        edit2.putLong("dialog_join_requested_time_" + this.dialog_id, System.currentTimeMillis()).commit();
        if (err != null && "INVITE_REQUEST_SENT".equals(err.text)) {
            JoinGroupAlert.showBulletin(context, this, ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup);
        }
        showBottomOverlayProgress(false, true);
        return false;
    }

    /* renamed from: lambda$createView$71$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1841lambda$createView$71$orgtelegramuiChatActivity(boolean param) {
        getNotificationCenter().removeObserver(this, NotificationCenter.closeChats);
        getNotificationCenter().postNotificationName(NotificationCenter.closeChats, new Object[0]);
        finishFragment();
        getNotificationCenter().postNotificationName(NotificationCenter.needDeleteDialog, Long.valueOf(this.dialog_id), this.currentUser, this.currentChat, Boolean.valueOf(param));
    }

    /* renamed from: lambda$createView$73$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1843lambda$createView$73$orgtelegramuiChatActivity(View v) {
        this.undoView.showWithAction(this.dialog_id, 18, LocaleController.getString("BroadcastGroupInfo", R.string.BroadcastGroupInfo));
    }

    /* renamed from: lambda$createView$74$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1844lambda$createView$74$orgtelegramuiChatActivity(View v) {
        MessageObject messageObject = null;
        for (int a = 1; a >= 0; a--) {
            if (messageObject == null && this.selectedMessagesIds[a].size() != 0) {
                MessageObject messageObject2 = this.messagesDict[a].get(this.selectedMessagesIds[a].keyAt(0));
                messageObject = messageObject2;
            }
            this.selectedMessagesIds[a].clear();
            this.selectedMessagesCanCopyIds[a].clear();
            this.selectedMessagesCanStarIds[a].clear();
        }
        hideActionMode();
        if (messageObject != null && (messageObject.messageOwner.id > 0 || (messageObject.messageOwner.id < 0 && this.currentEncryptedChat != null))) {
            showFieldPanelForReply(messageObject);
        }
        updatePinnedMessageView(true);
        updateVisibleRows();
    }

    /* renamed from: lambda$createView$75$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1845lambda$createView$75$orgtelegramuiChatActivity(View v) {
        openForward(false);
    }

    /* renamed from: lambda$createView$76$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1846lambda$createView$76$orgtelegramuiChatActivity(float[] topBottom) {
        topBottom[1] = this.chatListView.getBottom() - this.blurredViewBottomOffset;
        topBottom[0] = (this.chatListView.getTop() + this.chatListViewPaddingTop) - AndroidUtilities.dp(4.0f);
    }

    public ActionBarMenuItem getHeaderItem() {
        return this.headerItem;
    }

    private void playReactionAnimation(Integer messageId) {
        ChatMessageCell cell;
        if (this.fragmentView != null && (cell = findMessageCell(messageId.intValue(), false)) != null) {
            TLRPC.TL_messagePeerReaction reaction = cell.getMessageObject().getRandomUnreadReaction();
            if (reaction != null && cell.reactionsLayoutInBubble.hasUnreadReactions) {
                ReactionsEffectOverlay.show(this, null, cell, 0.0f, 0.0f, reaction.reaction, this.currentAccount, !reaction.big ? 1 : 0);
                ReactionsEffectOverlay.startAnimation();
            }
            cell.markReactionsAsRead();
        }
    }

    public void dimBehindView(View view, boolean enable) {
        this.scrimView = view;
        dimBehindView(enable ? 0.2f : 0.0f, (view == this.reactionsMentiondownButton || view == this.mentiondownButton) ? false : true);
    }

    private void dimBehindView(View view, float value) {
        this.scrimView = view;
        dimBehindView(value, (view == this.reactionsMentiondownButton || view == this.mentiondownButton) ? false : true);
    }

    public void dimBehindView(boolean enable) {
        dimBehindView(enable ? 0.2f : 0.0f, true);
    }

    private void dimBehindView(float value, boolean hidePagedownButtons) {
        ValueAnimator scrimPaintAlphaAnimator;
        boolean enable = value > 0.0f;
        View view = this.scrimView;
        if (view instanceof ChatMessageCell) {
            ChatMessageCell cell = (ChatMessageCell) view;
            cell.setInvalidatesParent(enable);
            if (enable) {
                restartSticker(cell);
            }
        }
        this.contentView.invalidate();
        this.chatListView.invalidate();
        AnimatorSet animatorSet = this.scrimAnimatorSet;
        if (animatorSet != null) {
            animatorSet.removeAllListeners();
            this.scrimAnimatorSet.cancel();
        }
        this.scrimAnimatorSet = new AnimatorSet();
        ArrayList<Animator> animators = new ArrayList<>();
        float f = 1.0f;
        if (enable) {
            this.scrimViewAlpha = 1.0f;
            ValueAnimator valueAnimator = this.scrimViewAlphaAnimator;
            if (valueAnimator != null) {
                valueAnimator.cancel();
            }
            Animator ofFloat = ValueAnimator.ofFloat(0.0f, value);
            scrimPaintAlphaAnimator = ofFloat;
            animators.add(ofFloat);
        } else {
            Animator ofFloat2 = ValueAnimator.ofFloat(this.scrimPaintAlpha, 0.0f);
            scrimPaintAlphaAnimator = ofFloat2;
            animators.add(ofFloat2);
        }
        scrimPaintAlphaAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda180
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                ChatActivity.this.m1860lambda$dimBehindView$77$orgtelegramuiChatActivity(valueAnimator2);
            }
        });
        if (!enable || hidePagedownButtons) {
            FrameLayout frameLayout = this.pagedownButton;
            if (frameLayout != null) {
                Property property = View.ALPHA;
                float[] fArr = new float[1];
                fArr[0] = enable ? 0.0f : 1.0f;
                animators.add(ObjectAnimator.ofFloat(frameLayout, property, fArr));
            }
            FrameLayout frameLayout2 = this.mentiondownButton;
            if (frameLayout2 != null) {
                Property property2 = View.ALPHA;
                float[] fArr2 = new float[1];
                fArr2[0] = enable ? 0.0f : 1.0f;
                animators.add(ObjectAnimator.ofFloat(frameLayout2, property2, fArr2));
            }
            FrameLayout frameLayout3 = this.reactionsMentiondownButton;
            if (frameLayout3 != null) {
                Property property3 = View.ALPHA;
                float[] fArr3 = new float[1];
                if (enable) {
                    f = 0.0f;
                }
                fArr3[0] = f;
                animators.add(ObjectAnimator.ofFloat(frameLayout3, property3, fArr3));
            }
        }
        this.scrimAnimatorSet.playTogether(animators);
        this.scrimAnimatorSet.setDuration(enable ? 150L : 220L);
        if (!enable) {
            this.scrimAnimatorSet.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.49
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animation) {
                    ChatActivity.this.scrimView = null;
                    ChatActivity.this.scrimViewReaction = null;
                    ChatActivity.this.contentView.invalidate();
                    ChatActivity.this.chatListView.invalidate();
                }
            });
        }
        if (this.scrimView != null && this.scrimViewAlpha <= 0.0f) {
            this.scrimView = null;
        }
        this.scrimAnimatorSet.start();
    }

    /* renamed from: lambda$dimBehindView$77$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1860lambda$dimBehindView$77$orgtelegramuiChatActivity(ValueAnimator a) {
        this.scrimPaintAlpha = ((Float) a.getAnimatedValue()).floatValue();
        if (this.fragmentView != null) {
            this.fragmentView.invalidate();
        }
    }

    /* loaded from: classes4.dex */
    public class PinnedMessageButton extends TextView {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public PinnedMessageButton(Context context) {
            super(context);
            ChatActivity.this = r5;
            setSingleLine(true);
            setLines(1);
            setMaxLines(1);
            setEllipsize(TextUtils.TruncateAt.END);
            setTextColor(r5.getThemedColor(Theme.key_featuredStickers_buttonText));
            setBackground(Theme.AdaptiveRipple.filledRect(r5.getThemedColor(Theme.key_featuredStickers_addButton), 16.0f));
            setTextSize(1, 14.0f);
            setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
            setGravity(17);
            setPadding(AndroidUtilities.dp(14.0f), 0, AndroidUtilities.dp(14.0f), 0);
        }

        @Override // android.widget.TextView, android.view.View
        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
            super.onMeasure(View.MeasureSpec.makeMeasureSpec(Math.min(View.MeasureSpec.getSize(widthMeasureSpec), (int) (AndroidUtilities.displaySize.x * 0.45f)), Integer.MIN_VALUE), heightMeasureSpec);
        }
    }

    public void updatePagedownButtonsPosition() {
        float baseTranslationY = this.chatActivityEnterView.getAnimatedTop() + this.chatActivityEnterView.getTranslationY() + (this.chatActivityEnterTopView.getVisibility() == 0 ? this.chatActivityEnterTopView.getTranslationY() : 0.0f);
        FrameLayout frameLayout = this.pagedownButton;
        if (frameLayout != null) {
            frameLayout.setTranslationY((AndroidUtilities.dp(100.0f) * (1.0f - this.pagedownButtonEnterProgress)) + baseTranslationY);
        }
        FrameLayout frameLayout2 = this.mentiondownButton;
        if (frameLayout2 != null) {
            frameLayout2.setTranslationY(((AndroidUtilities.dp(100.0f) * (1.0f - this.mentionsButtonEnterProgress)) + baseTranslationY) - ((AndroidUtilities.dp(72.0f) * this.pagedownButtonEnterProgress) * this.mentionsButtonEnterProgress));
        }
        FrameLayout frameLayout3 = this.reactionsMentiondownButton;
        if (frameLayout3 != null) {
            frameLayout3.setTranslationY(((AndroidUtilities.dp(100.0f) * (1.0f - this.reactionsMentionButtonEnterProgress)) + baseTranslationY) - ((((AndroidUtilities.dp(50.0f) + (AndroidUtilities.dp(22.0f) * this.pagedownButtonCounter.getEnterProgress())) * this.pagedownButtonEnterProgress) + (AndroidUtilities.dp(72.0f) * this.mentionsButtonEnterProgress)) * this.reactionsMentionButtonEnterProgress));
        }
    }

    private void updateReactionsMentionButton(boolean animated) {
        if (this.reactionsMentiondownButtonCounter == null || getParentActivity() == null) {
            return;
        }
        int i = this.reactionsMentionCount;
        boolean visible = i > 0 && this.chatMode == 0;
        this.reactionsMentiondownButtonCounter.setCount(i, animated);
        if (visible && this.reactionsMentiondownButton.getTag() == null) {
            this.reactionsMentiondownButton.setTag(1);
            ValueAnimator valueAnimator = this.reactionsMentionButtonAnimation;
            if (valueAnimator != null) {
                valueAnimator.removeAllListeners();
                this.reactionsMentionButtonAnimation.cancel();
                this.reactionsMentionButtonAnimation = null;
            }
            if (animated) {
                this.reactionsMentiondownButton.setVisibility(0);
                ValueAnimator ofFloat = ValueAnimator.ofFloat(this.reactionsMentionButtonEnterProgress, 1.0f);
                this.reactionsMentionButtonAnimation = ofFloat;
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda22
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                        ChatActivity.this.m1980x650b8fd4(valueAnimator2);
                    }
                });
                this.reactionsMentionButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.50
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animation) {
                        ChatActivity.this.reactionsMentionButtonEnterProgress = 1.0f;
                        ChatActivity.this.contentView.invalidate();
                    }
                });
                this.reactionsMentionButtonAnimation.setDuration(200L);
                this.reactionsMentionButtonAnimation.start();
                return;
            }
            this.reactionsMentiondownButton.setVisibility(0);
            this.reactionsMentionButtonEnterProgress = 1.0f;
            this.contentView.invalidate();
        } else if (!visible && this.reactionsMentiondownButton.getTag() != null) {
            this.reactionsMentiondownButton.setTag(null);
            ValueAnimator valueAnimator2 = this.reactionsMentionButtonAnimation;
            if (valueAnimator2 != null) {
                valueAnimator2.removeAllListeners();
                this.reactionsMentionButtonAnimation.cancel();
                this.reactionsMentionButtonAnimation = null;
            }
            if (animated) {
                this.reactionsMentiondownButton.setVisibility(0);
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.reactionsMentionButtonEnterProgress, 0.0f);
                this.reactionsMentionButtonAnimation = ofFloat2;
                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda33
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator3) {
                        ChatActivity.this.m1981x65b83b73(valueAnimator3);
                    }
                });
                this.reactionsMentionButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.51
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animation) {
                        ChatActivity.this.reactionsMentiondownButton.setVisibility(4);
                        ChatActivity.this.reactionsMentionButtonEnterProgress = 0.0f;
                        ChatActivity.this.contentView.invalidate();
                    }
                });
                this.reactionsMentionButtonAnimation.setDuration(200L);
                this.reactionsMentionButtonAnimation.start();
                return;
            }
            this.reactionsMentiondownButton.setVisibility(4);
            this.reactionsMentionButtonEnterProgress = 0.0f;
            this.contentView.invalidate();
        }
    }

    /* renamed from: lambda$updateReactionsMentionButton$78$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1980x650b8fd4(ValueAnimator valueAnimator) {
        this.reactionsMentionButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* renamed from: lambda$updateReactionsMentionButton$79$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1981x65b83b73(ValueAnimator valueAnimator) {
        this.reactionsMentionButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* renamed from: org.telegram.ui.ChatActivity$52 */
    /* loaded from: classes4.dex */
    public class AnonymousClass52 extends ForwardingPreviewView {
        final /* synthetic */ boolean val$keyboardVisible;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass52(Context context, ForwardingMessagesParams params, TLRPC.User user, TLRPC.Chat chat, int currentAccount, ForwardingPreviewView.ResourcesDelegate resourcesProvider, boolean z) {
            super(context, params, user, chat, currentAccount, resourcesProvider);
            ChatActivity.this = this$0;
            this.val$keyboardVisible = z;
        }

        @Override // org.telegram.ui.Components.ForwardingPreviewView
        protected void onDismiss(boolean canShowKeyboard) {
            ChatActivity.this.checkShowBlur(true);
            if (ChatActivity.this.forwardingMessages != null) {
                ArrayList<MessageObject> selectedMessage = new ArrayList<>();
                ChatActivity.this.forwardingMessages.getSelectedMessages(selectedMessage);
                ChatActivity.this.showFieldPanelForForward(true, selectedMessage);
            }
            if (this.val$keyboardVisible && canShowKeyboard) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$52$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.AnonymousClass52.this.m2010lambda$onDismiss$0$orgtelegramuiChatActivity$52();
                    }
                }, 50L);
            }
            AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ChatActivity.this.classGuid);
        }

        /* renamed from: lambda$onDismiss$0$org-telegram-ui-ChatActivity$52 */
        public /* synthetic */ void m2010lambda$onDismiss$0$orgtelegramuiChatActivity$52() {
            if (ChatActivity.this.chatActivityEnterView != null) {
                ChatActivity.this.chatActivityEnterView.openKeyboard();
            }
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.ForwardingPreviewView
        public void selectAnotherChat() {
            super.selectAnotherChat();
            dismiss(false);
            if (ChatActivity.this.forwardingMessages != null) {
                int hasPoll = 0;
                boolean hasInvoice = false;
                int a = 0;
                int N = ChatActivity.this.forwardingMessages.messages.size();
                while (true) {
                    int i = 1;
                    if (a < N) {
                        MessageObject messageObject = ChatActivity.this.forwardingMessages.messages.get(a);
                        if (messageObject.isPoll()) {
                            if (hasPoll != 2) {
                                if (messageObject.isPublicPoll()) {
                                    i = 2;
                                }
                                hasPoll = i;
                            }
                        } else if (messageObject.isInvoice()) {
                            hasInvoice = true;
                        }
                        ChatActivity.this.selectedMessagesIds[0].put(messageObject.getId(), messageObject);
                        a++;
                    } else {
                        Bundle args = new Bundle();
                        args.putBoolean("onlySelect", true);
                        args.putInt("dialogsType", 3);
                        args.putInt("hasPoll", hasPoll);
                        args.putBoolean("hasInvoice", hasInvoice);
                        args.putInt("messagesCount", ChatActivity.this.forwardingMessages.messages.size());
                        DialogsActivity fragment = new DialogsActivity(args);
                        fragment.setDelegate(ChatActivity.this);
                        ChatActivity.this.presentFragment(fragment);
                        return;
                    }
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.Components.ForwardingPreviewView
        public void didSendPressed() {
            super.didSendPressed();
            dismiss(true);
            ChatActivity.this.chatActivityEnterView.getSendButton().callOnClick();
        }
    }

    private void openForwardingPreview() {
        TLRPC.TL_channels_sendAsPeers tL_channels_sendAsPeers;
        boolean keyboardVisible = this.chatActivityEnterView.isKeyboardVisible();
        this.forwardingPreviewView = new AnonymousClass52(this.contentView.getContext(), this.forwardingMessages, this.currentUser, this.currentChat, this.currentAccount, this.themeDelegate, keyboardVisible);
        TLRPC.ChatFull chatFull = this.chatInfo;
        TLRPC.Peer defPeer = chatFull != null ? chatFull.default_send_as : null;
        if (defPeer == null && (tL_channels_sendAsPeers = this.sendAsPeersObj) != null && !tL_channels_sendAsPeers.peers.isEmpty()) {
            defPeer = this.sendAsPeersObj.peers.get(0);
        }
        this.forwardingPreviewView.setSendAsPeer(defPeer);
        checkShowBlur(true);
        this.contentView.addView(this.forwardingPreviewView);
        if (keyboardVisible) {
            this.chatActivityEnterView.showEmojiView();
            this.openKeyboardOnAttachMenuClose = true;
        }
        AndroidUtilities.setAdjustResizeToNothing(getParentActivity(), this.classGuid);
        this.fragmentView.requestLayout();
    }

    public void animateToNextChat() {
        if (this.pullingDownDrawable == null) {
            return;
        }
        addToPulledDialogsMyself();
        addToPulledDialogs(this.pullingDownDrawable.nextChat, this.pullingDownDrawable.nextDialogId, this.pullingDownDrawable.dialogFolderId, this.pullingDownDrawable.dialogFilterId);
        Bundle bundle = new Bundle();
        bundle.putLong(ChatReactionsEditActivity.KEY_CHAT_ID, this.pullingDownDrawable.getChatId());
        bundle.putInt("dialog_folder_id", this.pullingDownDrawable.dialogFolderId);
        bundle.putInt("dialog_filter_id", this.pullingDownDrawable.dialogFilterId);
        bundle.putBoolean("pulled", true);
        SharedPreferences sharedPreferences = MessagesController.getNotificationsSettings(this.currentAccount);
        SharedPreferences.Editor edit2 = sharedPreferences.edit();
        edit2.remove("diditem" + this.pullingDownDrawable.nextDialogId).apply();
        ChatActivity chatActivity = new ChatActivity(bundle);
        chatActivity.setPullingDownTransition(true);
        replacingChatActivity = true;
        presentFragment(chatActivity, true);
    }

    private void addToPulledDialogsMyself() {
        if (getParentLayout() == null) {
            return;
        }
        int stackIndex = getParentLayout().fragmentsStack.indexOf(this);
        BackButtonMenu.addToPulledDialogs(this, stackIndex, this.currentChat, this.currentUser, this.dialog_id, this.dialogFilterId, this.dialogFolderId);
    }

    private void addToPulledDialogs(TLRPC.Chat chat, long dialogId, int folderId, int filterId) {
        if (getParentLayout() == null) {
            return;
        }
        int stackIndex = getParentLayout().fragmentsStack.indexOf(this);
        BackButtonMenu.addToPulledDialogs(this, stackIndex, chat, null, dialogId, folderId, filterId);
    }

    private void setPullingDownTransition(boolean fromPullingDownTransition) {
        this.fromPullingDownTransition = fromPullingDownTransition;
    }

    public void updateBulletinLayout() {
        Bulletin bulletin = Bulletin.getVisibleBulletin();
        if (bulletin != null && this.bulletinDelegate != null) {
            bulletin.updatePosition();
        }
    }

    private void searchUserMessages(TLRPC.User user, TLRPC.Chat chat) {
        String name;
        this.searchingUserMessages = user;
        this.searchingChatMessages = chat;
        if (this.searchItem == null || this.mentionContainer == null) {
            return;
        }
        if (user == null && chat == null) {
            return;
        }
        if (user != null) {
            name = user.first_name;
            if (TextUtils.isEmpty(name)) {
                name = this.searchingUserMessages.last_name;
            }
        } else {
            name = chat.title;
        }
        if (name == null) {
            return;
        }
        if (name.length() > 10) {
            name = name.substring(0, 10);
        }
        this.searchingForUser = false;
        String from = LocaleController.getString("SearchFrom", R.string.SearchFrom);
        Spannable spannable = new SpannableString(from + " " + name);
        spannable.setSpan(new ForegroundColorSpan(getThemedColor(Theme.key_actionBarDefaultSubtitle)), from.length() + 1, spannable.length(), 33);
        this.searchItem.setSearchFieldCaption(spannable);
        this.mentionContainer.getAdapter().searchUsernameOrHashtag(null, 0, null, false, true);
        this.searchItem.setSearchFieldHint(null);
        this.searchItem.clearSearchText();
        getMediaDataController().searchMessagesInChat("", this.dialog_id, this.mergeDialogId, this.classGuid, 0, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages);
    }

    private void updateInfoTopView(boolean animated) {
        String str;
        int i;
        TLRPC.User user;
        if (this.contentView == null) {
            return;
        }
        SharedPreferences preferences = MessagesController.getNotificationsSettings(this.currentAccount);
        int i2 = preferences.getInt("dialog_bar_distance" + this.dialog_id, -1);
        this.distanceToPeer = i2;
        CharSequence text = null;
        View.OnClickListener onClickListener = null;
        if (i2 >= 0 && (user = this.currentUser) != null) {
            text = LocaleController.formatString("ChatDistanceToPeer", R.string.ChatDistanceToPeer, user.first_name, LocaleController.formatDistance(this.distanceToPeer, 0));
            onClickListener = new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda236
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    ChatActivity.this.m1971lambda$updateInfoTopView$80$orgtelegramuiChatActivity(view);
                }
            };
        } else if (this.currentChat != null && this.chatInviterId != 0) {
            StringBuilder sb = new StringBuilder();
            sb.append("dialog_bar_vis3");
            sb.append(this.dialog_id);
            boolean show = preferences.getInt(sb.toString(), 0) == 2;
            boolean showReport = preferences.getBoolean("dialog_bar_report" + this.dialog_id, false);
            boolean showBlock = preferences.getBoolean("dialog_bar_block" + this.dialog_id, false);
            if (show && (showReport || showBlock)) {
                TLRPC.User user2 = getMessagesController().getUser(Long.valueOf(this.chatInviterId));
                if (user2 != null) {
                    if (!ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup) {
                        i = R.string.ActionUserInvitedToGroup;
                        str = "ActionUserInvitedToGroup";
                    } else {
                        i = R.string.ActionUserInvitedToChannel;
                        str = "ActionUserInvitedToChannel";
                    }
                    text = MessageObject.replaceWithLink(LocaleController.getString(str, i), "un1", user2);
                    onClickListener = new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda237
                        @Override // android.view.View.OnClickListener
                        public final void onClick(View view) {
                            ChatActivity.this.m1972lambda$updateInfoTopView$81$orgtelegramuiChatActivity(view);
                        }
                    };
                }
            } else {
                hideInfoView();
            }
        }
        if (text != null) {
            Animator animator = this.infoTopViewAnimator;
            if (animator != null) {
                animator.cancel();
            }
            if (this.infoTopView == null) {
                ChatActionCell chatActionCell = new ChatActionCell(this.contentView.getContext(), false, this.themeDelegate);
                this.infoTopView = chatActionCell;
                chatActionCell.setCustomText(text);
                this.infoTopView.setInvalidateColors(true);
                this.infoTopView.setOnClickListener(onClickListener);
                this.contentView.addView(this.infoTopView, LayoutHelper.createFrame(-2, -2.0f, 49, 0.0f, 0.0f, 0.0f, 0.0f));
            }
            if (animated) {
                if (this.infoTopView.getTag() == null) {
                    ValueAnimator a = ValueAnimator.ofFloat(0.0f, 1.0f);
                    this.infoTopView.setTag(1);
                    this.infoTopView.setAlpha(0.0f);
                    final View distanceTopViewFinal = this.infoTopView;
                    a.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda77
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            ChatActivity.this.m1973lambda$updateInfoTopView$82$orgtelegramuiChatActivity(distanceTopViewFinal, valueAnimator);
                        }
                    });
                    a.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.53
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animation) {
                            ChatActivity.this.topViewOffset = AndroidUtilities.dp(30.0f);
                            ChatActivity.this.invalidateChatListViewTopPadding();
                        }
                    });
                    a.setDuration(150L);
                    this.infoTopViewAnimator = a;
                    a.start();
                    return;
                }
                return;
            }
            this.infoTopView.setTag(1);
            this.topViewOffset = AndroidUtilities.dp(30.0f);
            invalidateChatListViewTopPadding();
        }
    }

    /* renamed from: lambda$updateInfoTopView$80$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1971lambda$updateInfoTopView$80$orgtelegramuiChatActivity(View v) {
        presentFragment(new PeopleNearbyActivity());
    }

    /* renamed from: lambda$updateInfoTopView$81$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1972lambda$updateInfoTopView$81$orgtelegramuiChatActivity(View v) {
        Bundle args = new Bundle();
        args.putLong("user_id", this.chatInviterId);
        presentFragment(new ProfileActivity(args));
    }

    /* renamed from: lambda$updateInfoTopView$82$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1973lambda$updateInfoTopView$82$orgtelegramuiChatActivity(View distanceTopViewFinal, ValueAnimator animation) {
        float alpha = ((Float) animation.getAnimatedValue()).floatValue();
        this.topViewOffset = AndroidUtilities.dp(30.0f) * alpha;
        invalidateChatListViewTopPadding();
        distanceTopViewFinal.setAlpha(alpha);
    }

    private void openAnotherForward() {
        String message;
        ForwardingMessagesParams forwardingMessagesParams = this.forwardingMessages;
        if (forwardingMessagesParams == null || forwardingMessagesParams.messages == null) {
            return;
        }
        long lastPeerId = 0;
        long dialogId = 0;
        int N = this.forwardingMessages.messages.size();
        for (int a = 0; a < N; a++) {
            MessageObject message2 = this.forwardingMessages.messages.get(a);
            if (lastPeerId == 0) {
                dialogId = message2.getDialogId();
                lastPeerId = message2.getFromChatId();
            } else if (lastPeerId != message2.getFromChatId()) {
                break;
            }
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setButtonsVertical(true);
        if (dialogId > 0) {
            TLRPC.User user = getMessagesController().getUser(Long.valueOf(dialogId));
            if (user == null) {
                return;
            }
            message = LocaleController.formatString("CancelForwardPrivate", R.string.CancelForwardPrivate, LocaleController.formatPluralString("MessagesBold", this.forwardingMessages.messages.size(), new Object[0]), ContactsController.formatName(user.first_name, user.last_name));
        } else {
            TLRPC.Chat chat = getMessagesController().getChat(Long.valueOf(-dialogId));
            if (chat != null) {
                Object[] objArr = new Object[2];
                objArr[0] = LocaleController.formatPluralString("MessagesBold", this.forwardingMessages.messages.size(), new Object[0]);
                objArr[1] = chat == null ? "" : chat.title;
                message = LocaleController.formatString("CancelForwardChat", R.string.CancelForwardChat, objArr);
            } else {
                return;
            }
        }
        builder.setMessage(AndroidUtilities.replaceTags(message));
        builder.setTitle(LocaleController.formatPluralString("messages", this.forwardingMessages.messages.size(), new Object[0]));
        builder.setPositiveButton(LocaleController.getString("CancelForwarding", R.string.CancelForwarding), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda181
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.m1892lambda$openAnotherForward$83$orgtelegramuiChatActivity(dialogInterface, i);
            }
        });
        builder.setNegativeButton(LocaleController.getString("ShowForwardingOptions", R.string.ShowForwardingOptions), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda182
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.m1893lambda$openAnotherForward$84$orgtelegramuiChatActivity(dialogInterface, i);
            }
        });
        AlertDialog dialog = builder.create();
        showDialog(dialog);
        TextView button = (TextView) dialog.getButton(-1);
        if (button != null) {
            button.setTextColor(getThemedColor(Theme.key_dialogTextRed2));
        }
    }

    /* renamed from: lambda$openAnotherForward$83$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1892lambda$openAnotherForward$83$orgtelegramuiChatActivity(DialogInterface dialogInterface, int i) {
        if (this.forwardingMessages != null) {
            this.forwardingMessages = null;
        }
        showFieldPanel(false, null, null, null, this.foundWebPage, true, 0, true, true);
    }

    /* renamed from: lambda$openAnotherForward$84$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1893lambda$openAnotherForward$84$orgtelegramuiChatActivity(DialogInterface dialogInterface, int i) {
        openForwardingPreview();
    }

    public void openPinnedMessagesList(boolean preview) {
        if (getParentActivity() == null || this.parentLayout == null || this.parentLayout.getLastFragment() != this || this.pinnedMessageIds.isEmpty()) {
            return;
        }
        Bundle bundle = new Bundle();
        TLRPC.Chat chat = this.currentChat;
        if (chat != null) {
            bundle.putLong(ChatReactionsEditActivity.KEY_CHAT_ID, chat.id);
        } else {
            bundle.putLong("user_id", this.currentUser.id);
        }
        bundle.putInt("chatMode", 2);
        ChatActivity fragment = new ChatActivity(bundle);
        fragment.pinnedMessageIds = new ArrayList<>(this.pinnedMessageIds);
        fragment.pinnedMessageObjects = new HashMap<>(this.pinnedMessageObjects);
        int N = this.pinnedMessageIds.size();
        for (int a = 0; a < N; a++) {
            Integer id = this.pinnedMessageIds.get(a);
            MessageObject object = this.pinnedMessageObjects.get(id);
            MessageObject object2 = this.messagesDict[0].get(id.intValue());
            if (object == null) {
                object = object2;
            } else if (object2 != null) {
                object.mediaExists = object2.mediaExists;
                object.attachPathExists = object2.attachPathExists;
            }
            if (object != null) {
                fragment.pinnedMessageObjects.put(id, object);
            }
        }
        int a2 = this.loadedPinnedMessagesCount;
        fragment.loadedPinnedMessagesCount = a2;
        fragment.totalPinnedMessagesCount = this.totalPinnedMessagesCount;
        fragment.pinnedEndReached = this.pinnedEndReached;
        fragment.userInfo = this.userInfo;
        fragment.chatInfo = this.chatInfo;
        fragment.chatActivityDelegate = new AnonymousClass54();
        if (preview) {
            presentFragmentAsPreview(fragment);
            checkShowBlur(true);
            return;
        }
        presentFragment(fragment, false);
    }

    /* renamed from: org.telegram.ui.ChatActivity$54 */
    /* loaded from: classes4.dex */
    public class AnonymousClass54 implements ChatActivityDelegate {
        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public /* synthetic */ void onReport() {
            ChatActivityDelegate.CC.$default$onReport(this);
        }

        AnonymousClass54() {
            ChatActivity.this = this$0;
        }

        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public void openReplyMessage(int mid) {
            ChatActivity.this.scrollToMessageId(mid, 0, true, 0, true, 0);
        }

        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public void openSearch(String text) {
            ChatActivity.this.openSearchWithText(text);
        }

        @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
        public void onUnpin(boolean all, final boolean hide) {
            if (!all) {
                MessageObject messageObject = (MessageObject) ChatActivity.this.pinnedMessageObjects.get(Integer.valueOf(ChatActivity.this.currentPinnedMessageId));
                if (messageObject == null) {
                    messageObject = (MessageObject) ChatActivity.this.messagesDict[0].get(ChatActivity.this.currentPinnedMessageId);
                }
                ChatActivity.this.unpinMessage(messageObject);
                return;
            }
            final ArrayList<Integer> ids = new ArrayList<>(ChatActivity.this.pinnedMessageIds);
            final ArrayList<MessageObject> objects = new ArrayList<>(ChatActivity.this.pinnedMessageObjects.values());
            if (hide) {
                SharedPreferences preferences = MessagesController.getNotificationsSettings(ChatActivity.this.currentAccount);
                SharedPreferences.Editor edit = preferences.edit();
                edit.putInt("pin_" + ChatActivity.this.dialog_id, ((Integer) ChatActivity.this.pinnedMessageIds.get(0)).intValue()).commit();
                ChatActivity.this.updatePinnedMessageView(true);
            } else {
                ChatActivity.this.getNotificationCenter().postNotificationName(NotificationCenter.didLoadPinnedMessages, Long.valueOf(ChatActivity.this.dialog_id), ids, false, null, null, 0, 0, true);
            }
            if (ChatActivity.this.pinBulletin != null) {
                ChatActivity.this.pinBulletin.hide();
            }
            ChatActivity.this.showPinBulletin = true;
            final int tag = ChatActivity.access$31804(ChatActivity.this);
            final int oldTotalPinnedCount = ChatActivity.this.getPinnedMessagesCount();
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.pinBulletin = BulletinFactory.createUnpinAllMessagesBulletin(chatActivity, oldTotalPinnedCount, hide, new Runnable() { // from class: org.telegram.ui.ChatActivity$54$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.AnonymousClass54.this.m2011lambda$onUnpin$0$orgtelegramuiChatActivity$54(hide, ids, objects, oldTotalPinnedCount, tag);
                }
            }, new Runnable() { // from class: org.telegram.ui.ChatActivity$54$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.AnonymousClass54.this.m2012lambda$onUnpin$1$orgtelegramuiChatActivity$54(hide, tag);
                }
            }, ChatActivity.this.themeDelegate);
        }

        /* renamed from: lambda$onUnpin$0$org-telegram-ui-ChatActivity$54 */
        public /* synthetic */ void m2011lambda$onUnpin$0$orgtelegramuiChatActivity$54(boolean hide, ArrayList ids, ArrayList objects, int oldTotalPinnedCount, int tag) {
            if (hide) {
                SharedPreferences preferences = MessagesController.getNotificationsSettings(ChatActivity.this.currentAccount);
                SharedPreferences.Editor edit = preferences.edit();
                edit.remove("pin_" + ChatActivity.this.dialog_id).commit();
                ChatActivity.this.updatePinnedMessageView(true);
            } else {
                ChatActivity.this.getNotificationCenter().postNotificationName(NotificationCenter.didLoadPinnedMessages, Long.valueOf(ChatActivity.this.dialog_id), ids, true, objects, null, 0, Integer.valueOf(oldTotalPinnedCount), Boolean.valueOf(ChatActivity.this.pinnedEndReached));
            }
            if (tag == ChatActivity.this.pinBullerinTag) {
                ChatActivity.this.pinBulletin = null;
            }
        }

        /* renamed from: lambda$onUnpin$1$org-telegram-ui-ChatActivity$54 */
        public /* synthetic */ void m2012lambda$onUnpin$1$orgtelegramuiChatActivity$54(boolean hide, int tag) {
            if (!hide) {
                ChatActivity.this.getMessagesController().unpinAllMessages(ChatActivity.this.currentChat, ChatActivity.this.currentUser);
            }
            if (tag == ChatActivity.this.pinBullerinTag) {
                ChatActivity.this.pinBulletin = null;
            }
        }
    }

    public void checkShowBlur(boolean animated) {
        BluredView bluredView;
        BluredView bluredView2;
        ForwardingPreviewView forwardingPreviewView;
        boolean show = (this.parentLayout != null && this.parentLayout.isInPreviewMode() && !this.inPreviewMode) || ((forwardingPreviewView = this.forwardingPreviewView) != null && forwardingPreviewView.isShowing());
        if (show && ((bluredView2 = this.blurredView) == null || bluredView2.getTag() == null)) {
            BluredView bluredView3 = this.blurredView;
            if (bluredView3 == null) {
                BluredView bluredView4 = new BluredView(this.fragmentView.getContext(), this.fragmentView, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.55
                    @Override // android.view.View
                    public void setAlpha(float alpha) {
                        super.setAlpha(alpha);
                        ChatActivity.this.fragmentView.invalidate();
                    }

                    @Override // android.view.View
                    public void setVisibility(int visibility) {
                        super.setVisibility(visibility);
                        ChatActivity.this.fragmentView.invalidate();
                    }
                };
                this.blurredView = bluredView4;
                this.contentView.addView(bluredView4, LayoutHelper.createFrame(-1, -1.0f));
            } else {
                int idx = this.contentView.indexOfChild(bluredView3);
                if (idx != this.contentView.getChildCount() - 1) {
                    this.contentView.removeView(this.blurredView);
                    this.contentView.addView(this.blurredView);
                }
                this.blurredView.update();
                this.blurredView.setVisibility(0);
            }
            this.blurredView.setAlpha(0.0f);
            this.blurredView.animate().setListener(null).cancel();
            this.blurredView.animate().alpha(1.0f).setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.56
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animation) {
                    super.onAnimationEnd(animation);
                    ChatActivity.this.chatListView.invalidate();
                    ChatActivity.this.fragmentView.invalidate();
                }
            }).start();
            this.blurredView.setTag(1);
        } else if (!show && (bluredView = this.blurredView) != null && bluredView.getTag() != null) {
            this.blurredView.animate().setListener(null).cancel();
            this.blurredView.animate().setListener(new HideViewAfterAnimation(this.blurredView)).alpha(0.0f).start();
            this.blurredView.setTag(null);
            this.chatListView.invalidate();
            this.fragmentView.invalidate();
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public int getPreviewHeight() {
        if (this.chatMode == 2 && this.messages.size() == 2) {
            return getHeightForMessage(this.messages.get(0)) + AndroidUtilities.dp(80.0f) + ActionBar.getCurrentActionBarHeight();
        }
        return super.getPreviewHeight();
    }

    private void showProgressView(boolean show) {
        FrameLayout frameLayout = this.progressView;
        if (frameLayout == null) {
            return;
        }
        int i = 0;
        if (this.fragmentOpened) {
            if (show == this.animateTo) {
                return;
            }
            this.animateTo = show;
            if (show) {
                if (frameLayout.getVisibility() != 0) {
                    this.progressView.setVisibility(0);
                    this.progressView.setAlpha(0.0f);
                    this.progressView.setScaleX(0.3f);
                    this.progressView.setScaleY(0.3f);
                }
                this.progressView.animate().setListener(null).cancel();
                this.progressView.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f).setDuration(150L).start();
                return;
            }
            frameLayout.animate().setListener(null).cancel();
            this.progressView.animate().alpha(0.0f).scaleX(0.3f).scaleY(0.3f).setDuration(150L).setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.57
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animation) {
                    ChatActivity.this.progressView.setVisibility(4);
                }
            }).start();
            return;
        }
        this.animateTo = show;
        if (!show) {
            i = 4;
        }
        frameLayout.setVisibility(i);
    }

    private void hideInfoView() {
        if (this.distanceToPeer >= 0) {
            this.distanceToPeer = -1;
            SharedPreferences preferences = MessagesController.getNotificationsSettings(this.currentAccount);
            SharedPreferences.Editor edit2 = preferences.edit();
            edit2.putInt("dialog_bar_distance" + this.dialog_id, -2).commit();
        }
        Animator animator = this.infoTopViewAnimator;
        if (animator != null) {
            animator.cancel();
        }
        ChatActionCell chatActionCell = this.infoTopView;
        if (chatActionCell != null && chatActionCell.getTag() != null) {
            this.infoTopView.setTag(null);
            final View topViewFinal = this.infoTopView;
            ValueAnimator a = ValueAnimator.ofFloat(1.0f, 0.0f);
            a.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda66
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    ChatActivity.this.m1863lambda$hideInfoView$85$orgtelegramuiChatActivity(topViewFinal, valueAnimator);
                }
            });
            a.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.58
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animation) {
                    ChatActivity.this.topViewOffset = 0.0f;
                    if (animation == ChatActivity.this.infoTopViewAnimator) {
                        ViewGroup parent = (ViewGroup) topViewFinal.getParent();
                        if (parent != null) {
                            parent.removeView(topViewFinal);
                        }
                        ChatActivity.this.infoTopView = null;
                        ChatActivity.this.infoTopViewAnimator = null;
                    }
                }
            });
            a.setDuration(150L);
            this.infoTopViewAnimator = a;
            a.start();
        }
    }

    /* renamed from: lambda$hideInfoView$85$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1863lambda$hideInfoView$85$orgtelegramuiChatActivity(View topViewFinal, ValueAnimator animation) {
        float alpha = ((Float) animation.getAnimatedValue()).floatValue();
        this.topViewOffset = AndroidUtilities.dp(30.0f) * alpha;
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
        topViewFinal.setAlpha(alpha);
    }

    public void updateChatListViewTopPadding() {
        RecyclerListView recyclerListView;
        BlurredFrameLayout blurredFrameLayout;
        ChatActivityEnterView chatActivityEnterView;
        if (this.invalidateChatListViewTopPadding && this.chatListView != null) {
            if (this.fixedKeyboardHeight <= 0 || this.searchExpandProgress != 0.0f) {
                float topPanelViewH = Math.max(0.0f, AndroidUtilities.dp(48.0f) + this.topChatPanelViewOffset);
                float pinnedViewH = 0.0f;
                BlurredFrameLayout blurredFrameLayout2 = this.pinnedMessageView;
                if (blurredFrameLayout2 != null && blurredFrameLayout2.getVisibility() == 0) {
                    pinnedViewH = Math.max(0.0f, AndroidUtilities.dp(48.0f) + this.pinnedMessageEnterOffset);
                }
                float pendingViewH = 0.0f;
                ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = this.pendingRequestsDelegate;
                View pendingRequestsView = chatActivityMemberRequestsDelegate != null ? chatActivityMemberRequestsDelegate.getView() : null;
                if (pendingRequestsView != null && pendingRequestsView.getVisibility() == 0) {
                    pendingViewH = Math.max(0.0f, pendingRequestsView.getHeight() + this.pendingRequestsDelegate.getViewEnterOffset());
                }
                float oldPadding = this.chatListViewPaddingTop;
                this.chatListViewPaddingTopOnlyTopViews = topPanelViewH + pinnedViewH;
                float dp = AndroidUtilities.dp(4.0f) + this.contentPaddingTop + topPanelViewH + pinnedViewH + pendingViewH;
                this.chatListViewPaddingTop = dp;
                float f = dp + this.blurredViewTopOffset;
                this.chatListViewPaddingTop = f;
                this.chatListViewPaddingVisibleOffset = 0;
                this.chatListViewPaddingTop = f + this.contentPanTranslation + this.bottomPanelTranslationY;
                float searchExpandOffset = 0.0f;
                if (this.searchExpandProgress != 0.0f && this.chatActivityEnterView.getVisibility() == 0) {
                    float f2 = this.chatListViewPaddingTop;
                    float measuredHeight = this.searchExpandProgress * (this.chatActivityEnterView.getMeasuredHeight() - this.searchContainer.getMeasuredHeight());
                    searchExpandOffset = measuredHeight;
                    this.chatListViewPaddingTop = f2 - measuredHeight;
                }
                if (this.bottomPanelTranslationY == 0.0f && !this.chatActivityEnterView.panelAnimationInProgress() && (this.contentView.getLayoutParams().height < 0 || (this.contentView.getKeyboardHeight() <= AndroidUtilities.dp(20.0f) && this.chatActivityEnterView.isPopupShowing()))) {
                    this.chatListViewPaddingTop += (this.contentView.getKeyboardHeight() > AndroidUtilities.dp(20.0f) || AndroidUtilities.isInMultiwindow || this.inBubbleMode) ? this.contentView.getKeyboardHeight() : this.chatActivityEnterView.getEmojiPadding();
                }
                if (!this.inPreviewMode && (chatActivityEnterView = this.chatActivityEnterView) != null) {
                    if (chatActivityEnterView.getAnimatedTop() != 0) {
                        this.chatListViewPaddingTop += (this.chatActivityEnterView.getHeightWithTopView() - AndroidUtilities.dp(51.0f)) - this.chatActivityEnterView.getAnimatedTop();
                    } else if (!this.chatActivityEnterView.panelAnimationInProgress()) {
                        this.chatListViewPaddingTop += this.chatActivityEnterView.getHeightWithTopView() - AndroidUtilities.dp(51.0f);
                        if (this.chatActivityEnterView.currentTopViewAnimation == null) {
                            this.chatListViewPaddingTop -= this.chatListView.getTranslationY();
                        }
                    }
                }
                ChatActionCell chatActionCell = this.infoTopView;
                if (chatActionCell != null) {
                    chatActionCell.setTranslationY((this.chatListViewPaddingTop - AndroidUtilities.dp(30.0f)) + this.topViewOffset);
                    float f3 = this.chatListViewPaddingTop;
                    float f4 = this.topViewOffset;
                    this.chatListViewPaddingTop = f3 + f4;
                    this.chatListViewPaddingVisibleOffset = (int) (this.chatListViewPaddingVisibleOffset + f4);
                }
                ChatActionCell chatActionCell2 = this.floatingDateView;
                if (chatActionCell2 != null) {
                    chatActionCell2.setTranslationY((((this.chatListView.getTranslationY() - searchExpandOffset) + this.chatListViewPaddingTop) + this.floatingDateViewOffset) - AndroidUtilities.dp(4.0f));
                }
                int p = (this.chatListView.getMeasuredHeight() * 2) / 3;
                RecyclerListView recyclerListView2 = this.chatListView;
                if (recyclerListView2 != null && this.chatLayoutManager != null && this.chatAdapter != null) {
                    if (recyclerListView2.getPaddingTop() != p) {
                        int firstVisPos = this.chatLayoutManager.findFirstVisibleItemPosition();
                        int lastVisPos = this.chatLayoutManager.findLastVisibleItemPosition();
                        int top = 0;
                        MessageObject scrollToMessageObject = null;
                        if (firstVisPos != -1) {
                            int i = firstVisPos;
                            while (true) {
                                if (i > lastVisPos) {
                                    break;
                                }
                                View v = this.chatLayoutManager.findViewByPosition(i);
                                if (v instanceof ChatMessageCell) {
                                    scrollToMessageObject = ((ChatMessageCell) v).getMessageObject();
                                    top = (this.chatListView.getMeasuredHeight() - v.getBottom()) - this.chatListView.getPaddingBottom();
                                    break;
                                } else if (!(v instanceof ChatActionCell)) {
                                    i++;
                                } else {
                                    scrollToMessageObject = ((ChatActionCell) v).getMessageObject();
                                    top = (this.chatListView.getMeasuredHeight() - v.getBottom()) - this.chatListView.getPaddingBottom();
                                    break;
                                }
                            }
                        }
                        this.chatListView.setPadding(0, p, 0, AndroidUtilities.dp(3.0f) + this.blurredViewBottomOffset);
                        if (firstVisPos != -1 && scrollToMessageObject != null) {
                            this.chatAdapter.updateRowsSafe();
                            int index = this.messages.indexOf(scrollToMessageObject);
                            if (index >= 0) {
                                this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + index, top);
                            }
                        }
                        invalidateMessagesVisiblePart();
                    }
                    this.chatListView.setTopGlowOffset((int) ((this.chatListViewPaddingTop - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f)));
                    if (oldPadding != this.chatListViewPaddingTop) {
                        int n = this.chatListView.getChildCount();
                        int i2 = 0;
                        while (true) {
                            if (i2 >= n) {
                                break;
                            }
                            View child = this.chatListView.getChildAt(i2);
                            int adapterPosition = this.chatListView.getChildAdapterPosition(child);
                            if (adapterPosition != this.chatAdapter.getItemCount() - 1) {
                                i2++;
                            } else {
                                float padding = this.chatListViewPaddingTop;
                                if (isThreadChat() && (blurredFrameLayout = this.pinnedMessageView) != null && blurredFrameLayout.getVisibility() == 0) {
                                    padding -= Math.max(0.0f, AndroidUtilities.dp(48.0f) + this.pinnedMessageEnterOffset);
                                }
                                if (child.getTop() > padding) {
                                    this.chatListView.scrollBy(0, (int) (child.getTop() - padding));
                                }
                            }
                        }
                    }
                    if (!isThreadChat() && !this.wasManualScroll && this.unreadMessageObject != null && (recyclerListView = this.chatListView) != null) {
                        recyclerListView.scrollBy(0, (int) (oldPadding - this.chatListViewPaddingTop));
                    }
                }
                this.invalidateChatListViewTopPadding = false;
            }
        }
    }

    public void invalidateChatListViewTopPadding() {
        if (!this.invalidateChatListViewTopPadding) {
            this.invalidateChatListViewTopPadding = true;
            SizeNotifierFrameLayout sizeNotifierFrameLayout = this.contentView;
            if (sizeNotifierFrameLayout != null) {
                sizeNotifierFrameLayout.invalidate();
            }
            RecyclerListView recyclerListView = this.chatListView;
            if (recyclerListView != null) {
                recyclerListView.invalidate();
            }
        }
        float translation = this.contentPanTranslation + this.contentPaddingTop + Math.max(0.0f, AndroidUtilities.dp(48.0f) + this.topChatPanelViewOffset);
        BlurredFrameLayout blurredFrameLayout = this.pinnedMessageView;
        if (blurredFrameLayout != null) {
            float translation2 = translation + this.pinnedMessageEnterOffset;
            blurredFrameLayout.setTranslationY(translation2);
            translation = translation2 + AndroidUtilities.dp(48.0f);
        }
        ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = this.pendingRequestsDelegate;
        View pendingRequestsView = chatActivityMemberRequestsDelegate != null ? chatActivityMemberRequestsDelegate.getView() : null;
        if (pendingRequestsView != null) {
            pendingRequestsView.setTranslationY(translation + this.pendingRequestsDelegate.getViewEnterOffset());
        }
        if (this.fragmentContextView != null) {
            float from = 0.0f;
            FragmentContextView fragmentContextView = this.fragmentLocationContextView;
            if (fragmentContextView != null && fragmentContextView.getVisibility() == 0) {
                from = 0.0f + AndroidUtilities.dp(36.0f);
            }
            FragmentContextView fragmentContextView2 = this.fragmentContextView;
            fragmentContextView2.setTranslationY(this.contentPanTranslation + from + fragmentContextView2.getTopPadding());
        }
        if (this.fragmentLocationContextView != null) {
            float from2 = 0.0f;
            FragmentContextView fragmentContextView3 = this.fragmentContextView;
            if (fragmentContextView3 != null && fragmentContextView3.getVisibility() == 0) {
                from2 = 0.0f + AndroidUtilities.dp(this.fragmentContextView.getStyleHeight()) + this.fragmentContextView.getTopPadding();
            }
            FragmentContextView fragmentContextView4 = this.fragmentLocationContextView;
            fragmentContextView4.setTranslationY(this.contentPanTranslation + from2 + fragmentContextView4.getTopPadding());
        }
        BlurredFrameLayout blurredFrameLayout2 = this.topChatPanelView;
        if (blurredFrameLayout2 != null) {
            blurredFrameLayout2.setTranslationY(this.contentPanTranslation + this.contentPaddingTop + this.topChatPanelViewOffset);
        }
        FrameLayout frameLayout = this.alertView;
        if (frameLayout != null && frameLayout.getVisibility() == 0) {
            this.alertView.setTranslationY((this.contentPanTranslation + this.contentPaddingTop) - (AndroidUtilities.dp(50.0f) * (1.0f - this.alertViewEnterProgress)));
        }
        BlurredFrameLayout blurredFrameLayout3 = this.bottomOverlayChat;
        if (blurredFrameLayout3 != null) {
            blurredFrameLayout3.setTranslationY(this.bottomPanelTranslationYReverse);
        }
        BlurredFrameLayout blurredFrameLayout4 = this.bottomMessagesActionContainer;
        if (blurredFrameLayout4 != null) {
            blurredFrameLayout4.setTranslationY(this.bottomPanelTranslationYReverse);
        }
        UndoView undoView = this.undoView;
        if (undoView != null) {
            undoView.setAdditionalTranslationY(this.chatActivityEnterView.getHeightWithTopView() - this.chatActivityEnterView.getAnimatedTop());
        }
    }

    public TextureView createTextureView(boolean add) {
        if (this.parentLayout == null) {
            return null;
        }
        AndroidUtilities.cancelRunOnUIThread(this.destroyTextureViewRunnable);
        if (this.videoPlayerContainer == null) {
            if (Build.VERSION.SDK_INT >= 21) {
                FrameLayout frameLayout = new FrameLayout(getParentActivity()) { // from class: org.telegram.ui.ChatActivity.59
                    @Override // android.view.View
                    public void setTranslationY(float translationY) {
                        super.setTranslationY(translationY);
                        ChatActivity.this.contentView.invalidate();
                    }
                };
                this.videoPlayerContainer = frameLayout;
                frameLayout.setOutlineProvider(new ViewOutlineProvider() { // from class: org.telegram.ui.ChatActivity.60
                    @Override // android.view.ViewOutlineProvider
                    public void getOutline(View view, Outline outline) {
                        ImageReceiver imageReceiver = (ImageReceiver) view.getTag(R.id.parent_tag);
                        if (imageReceiver != null) {
                            int[] rad = imageReceiver.getRoundRadius();
                            int maxRad = 0;
                            for (int a = 0; a < 4; a++) {
                                maxRad = Math.max(maxRad, rad[a]);
                            }
                            outline.setRoundRect(0, 0, view.getMeasuredWidth(), view.getMeasuredHeight(), maxRad);
                            return;
                        }
                        outline.setOval(0, 0, AndroidUtilities.roundPlayingMessageSize, AndroidUtilities.roundPlayingMessageSize);
                    }
                });
                this.videoPlayerContainer.setClipToOutline(true);
            } else {
                this.videoPlayerContainer = new FrameLayout(getParentActivity()) { // from class: org.telegram.ui.ChatActivity.61
                    RectF rect = new RectF();

                    @Override // android.view.View
                    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
                        super.onSizeChanged(w, h, oldw, oldh);
                        ChatActivity.this.aspectPath.reset();
                        ImageReceiver imageReceiver = (ImageReceiver) getTag(R.id.parent_tag);
                        if (imageReceiver == null) {
                            ChatActivity.this.aspectPath.addCircle(w / 2, h / 2, w / 2, Path.Direction.CW);
                        } else {
                            int[] rad = imageReceiver.getRoundRadius();
                            int maxRad = 0;
                            for (int a = 0; a < 4; a++) {
                                maxRad = Math.max(maxRad, rad[a]);
                            }
                            this.rect.set(0.0f, 0.0f, w, h);
                            ChatActivity.this.aspectPath.addRoundRect(this.rect, AndroidUtilities.dp(4.0f), AndroidUtilities.dp(4.0f), Path.Direction.CW);
                        }
                        ChatActivity.this.aspectPath.toggleInverseFillType();
                    }

                    @Override // android.view.View
                    public void setTranslationY(float translationY) {
                        super.setTranslationY(translationY);
                        ChatActivity.this.contentView.invalidate();
                    }

                    @Override // android.view.View
                    public void setVisibility(int visibility) {
                        super.setVisibility(visibility);
                        if (visibility == 0) {
                            setLayerType(2, null);
                        }
                    }

                    @Override // android.view.ViewGroup, android.view.View
                    protected void dispatchDraw(Canvas canvas) {
                        super.dispatchDraw(canvas);
                        if (getTag() == null) {
                            canvas.drawPath(ChatActivity.this.aspectPath, ChatActivity.this.aspectPaint);
                        }
                    }
                };
                this.aspectPath = new Path();
                Paint paint = new Paint(1);
                this.aspectPaint = paint;
                paint.setColor(-16777216);
                this.aspectPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
            }
            this.videoPlayerContainer.setWillNotDraw(false);
            AspectRatioFrameLayout aspectRatioFrameLayout = new AspectRatioFrameLayout(getParentActivity());
            this.aspectRatioFrameLayout = aspectRatioFrameLayout;
            aspectRatioFrameLayout.setBackgroundColor(0);
            if (add) {
                this.videoPlayerContainer.addView(this.aspectRatioFrameLayout, LayoutHelper.createFrame(-1, -1, 17));
            }
            TextureView textureView = new TextureView(getParentActivity());
            this.videoTextureView = textureView;
            textureView.setOpaque(false);
            this.aspectRatioFrameLayout.addView(this.videoTextureView, LayoutHelper.createFrame(-1, -1.0f));
        }
        ViewGroup parent = (ViewGroup) this.videoPlayerContainer.getParent();
        if (parent != null && parent != this.contentView) {
            parent.removeView(this.videoPlayerContainer);
            parent = null;
        }
        if (parent == null) {
            this.contentView.addView(this.videoPlayerContainer, 1, new FrameLayout.LayoutParams(AndroidUtilities.roundPlayingMessageSize, AndroidUtilities.roundPlayingMessageSize));
        }
        this.videoPlayerContainer.setTag(null);
        this.aspectRatioFrameLayout.setDrawingReady(false);
        return this.videoTextureView;
    }

    /* renamed from: destroyTextureView */
    public void m1869lambda$new$0$orgtelegramuiChatActivity() {
        FrameLayout frameLayout = this.videoPlayerContainer;
        if (frameLayout == null || frameLayout.getParent() == null) {
            return;
        }
        this.chatListView.invalidateViews();
        this.aspectRatioFrameLayout.setDrawingReady(false);
        this.videoPlayerContainer.setTag(null);
        if (Build.VERSION.SDK_INT < 21) {
            this.videoPlayerContainer.setLayerType(0, null);
        }
        this.contentView.removeView(this.videoPlayerContainer);
    }

    private boolean hasSelectedNoforwardsMessage() {
        for (int i = 0; i < this.selectedMessagesIds.length; i++) {
            try {
                for (int j = 0; j < this.selectedMessagesIds[i].size(); j++) {
                    MessageObject msg = this.selectedMessagesIds[i].valueAt(j);
                    if (msg != null && msg.messageOwner != null && msg.messageOwner.noforwards) {
                        return true;
                    }
                }
            } catch (Exception e) {
                return false;
            }
        }
        return false;
    }

    public void openForward(boolean fromActionBar) {
        String str;
        if (getMessagesController().isChatNoForwards(this.currentChat) || hasSelectedNoforwardsMessage()) {
            if (getMessagesController().isChatNoForwards(this.currentChat)) {
                if (ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup) {
                    str = LocaleController.getString("ForwardsRestrictedInfoChannel", R.string.ForwardsRestrictedInfoChannel);
                } else {
                    str = LocaleController.getString("ForwardsRestrictedInfoGroup", R.string.ForwardsRestrictedInfoGroup);
                }
            } else {
                str = LocaleController.getString("ForwardsRestrictedInfoBot", R.string.ForwardsRestrictedInfoBot);
            }
            if (fromActionBar) {
                if (this.fwdRestrictedTopHint == null) {
                    SizeNotifierFrameLayout frameLayout = (SizeNotifierFrameLayout) this.fragmentView;
                    int index = frameLayout.indexOfChild(this.chatActivityEnterView);
                    if (index == -1) {
                        return;
                    }
                    HintView hintView = new HintView((Context) getParentActivity(), 7, true);
                    this.fwdRestrictedTopHint = hintView;
                    frameLayout.addView(hintView, index + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 12.0f, 0.0f, 12.0f, 0.0f));
                    this.fwdRestrictedTopHint.setAlpha(0.0f);
                    this.fwdRestrictedTopHint.setVisibility(4);
                }
                this.fwdRestrictedTopHint.setText(str);
                this.fwdRestrictedTopHint.showForView(this.actionBar.getActionMode().getItem(11), true);
                return;
            }
            if (this.fwdRestrictedBottomHint == null) {
                SizeNotifierFrameLayout frameLayout2 = (SizeNotifierFrameLayout) this.fragmentView;
                int index2 = frameLayout2.indexOfChild(this.chatActivityEnterView);
                if (index2 == -1) {
                    return;
                }
                HintView hintView2 = new HintView(getParentActivity(), 9);
                this.fwdRestrictedBottomHint = hintView2;
                frameLayout2.addView(hintView2, index2 + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 12.0f, 0.0f, 12.0f, 0.0f));
                this.fwdRestrictedBottomHint.setAlpha(0.0f);
                this.fwdRestrictedBottomHint.setVisibility(4);
            }
            this.fwdRestrictedBottomHint.setText(str);
            this.fwdRestrictedBottomHint.showForView(this.forwardButton, true);
            return;
        }
        int hasPoll = 0;
        boolean hasInvoice = false;
        for (int a = 0; a < 2; a++) {
            for (int b = 0; b < this.selectedMessagesIds[a].size(); b++) {
                MessageObject messageObject = this.selectedMessagesIds[a].valueAt(b);
                if (messageObject.isPoll()) {
                    hasPoll = messageObject.isPublicPoll() ? 2 : 1;
                    if (hasPoll == 2) {
                        break;
                    }
                } else if (messageObject.isInvoice()) {
                    hasInvoice = true;
                }
            }
            if (hasPoll == 2) {
                break;
            }
        }
        Bundle args = new Bundle();
        args.putBoolean("onlySelect", true);
        args.putInt("dialogsType", 3);
        args.putInt("messagesCount", this.canForwardMessagesCount);
        args.putInt("hasPoll", hasPoll);
        args.putBoolean("hasInvoice", hasInvoice);
        DialogsActivity fragment = new DialogsActivity(args);
        fragment.setDelegate(this);
        presentFragment(fragment);
    }

    private void showBottomOverlayProgress(final boolean show, boolean animated) {
        if (!show || this.bottomOverlayProgress.getTag() == null) {
            if (!show && this.bottomOverlayProgress.getTag() == null) {
                return;
            }
            AnimatorSet animatorSet = this.bottomOverlayAnimation;
            Integer num = null;
            if (animatorSet != null) {
                animatorSet.cancel();
                this.bottomOverlayAnimation = null;
            }
            RadialProgressView radialProgressView = this.bottomOverlayProgress;
            if (show) {
                num = 1;
            }
            radialProgressView.setTag(num);
            float f = 0.0f;
            int i = 4;
            float f2 = 0.1f;
            if (animated) {
                this.bottomOverlayAnimation = new AnimatorSet();
                if (show) {
                    this.bottomOverlayProgress.setVisibility(0);
                    this.bottomOverlayAnimation.playTogether(ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.SCALE_X, 0.1f), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.SCALE_Y, 0.1f), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.ALPHA, 0.0f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_X, 1.0f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_Y, 1.0f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.ALPHA, 1.0f));
                    this.bottomOverlayAnimation.setStartDelay(200L);
                } else {
                    this.bottomOverlayChatText.setVisibility(0);
                    this.bottomOverlayAnimation.playTogether(ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_X, 0.1f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_Y, 0.1f), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.ALPHA, 0.0f), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.SCALE_X, 1.0f), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.SCALE_Y, 1.0f), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.ALPHA, 1.0f));
                }
                this.bottomOverlayAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.62
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animation) {
                        if (ChatActivity.this.bottomOverlayAnimation != null && ChatActivity.this.bottomOverlayAnimation.equals(animation)) {
                            if (!show) {
                                ChatActivity.this.bottomOverlayProgress.setVisibility(4);
                            } else {
                                ChatActivity.this.bottomOverlayChatText.setVisibility(4);
                            }
                        }
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationCancel(Animator animation) {
                        if (ChatActivity.this.bottomOverlayAnimation != null && ChatActivity.this.bottomOverlayAnimation.equals(animation)) {
                            ChatActivity.this.bottomOverlayAnimation = null;
                        }
                    }
                });
                this.bottomOverlayAnimation.setDuration(150L);
                this.bottomOverlayAnimation.start();
                return;
            }
            this.bottomOverlayProgress.setVisibility(show ? 0 : 4);
            this.bottomOverlayProgress.setScaleX(show ? 1.0f : 0.1f);
            this.bottomOverlayProgress.setScaleY(show ? 1.0f : 0.1f);
            this.bottomOverlayProgress.setAlpha(1.0f);
            UnreadCounterTextView unreadCounterTextView = this.bottomOverlayChatText;
            if (!show) {
                i = 0;
            }
            unreadCounterTextView.setVisibility(i);
            this.bottomOverlayChatText.setScaleX(show ? 0.1f : 1.0f);
            UnreadCounterTextView unreadCounterTextView2 = this.bottomOverlayChatText;
            if (!show) {
                f2 = 1.0f;
            }
            unreadCounterTextView2.setScaleY(f2);
            UnreadCounterTextView unreadCounterTextView3 = this.bottomOverlayChatText;
            if (!show) {
                f = 1.0f;
            }
            unreadCounterTextView3.setAlpha(f);
        }
    }

    /* renamed from: sendBotInlineResult */
    public void m1816lambda$createView$45$orgtelegramuiChatActivity(TLRPC.BotInlineResult result, boolean notify, int scheduleDate) {
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView == null) {
            return;
        }
        long uid = mentionsContainerView.getAdapter().getContextBotId();
        HashMap<String, String> params = new HashMap<>();
        params.put("id", result.id);
        params.put("query_id", "" + result.query_id);
        params.put("bot", "" + uid);
        params.put("bot_name", this.mentionContainer.getAdapter().getContextBotName());
        SendMessagesHelper.prepareSendingBotContextResult(getAccountInstance(), result, params, this.dialog_id, this.replyingMessageObject, getThreadMessage(), notify, scheduleDate);
        this.chatActivityEnterView.setFieldText("");
        hideFieldPanel(false);
        getMediaDataController().increaseInlineRaiting(uid);
    }

    private void checkBotCommands() {
        TLRPC.Chat chat;
        boolean z = false;
        URLSpanBotCommand.enabled = false;
        TLRPC.User user = this.currentUser;
        if (user != null && user.bot) {
            URLSpanBotCommand.enabled = !UserObject.isReplyUser(this.currentUser);
            return;
        }
        TLRPC.ChatFull chatFull = this.chatInfo;
        if (chatFull instanceof TLRPC.TL_chatFull) {
            for (int a = 0; a < this.chatInfo.participants.participants.size(); a++) {
                TLRPC.ChatParticipant participant = this.chatInfo.participants.participants.get(a);
                TLRPC.User user2 = getMessagesController().getUser(Long.valueOf(participant.user_id));
                if (user2 != null && user2.bot) {
                    URLSpanBotCommand.enabled = true;
                    return;
                }
            }
        } else if (chatFull instanceof TLRPC.TL_channelFull) {
            if (!chatFull.bot_info.isEmpty() && (chat = this.currentChat) != null && chat.megagroup) {
                z = true;
            }
            URLSpanBotCommand.enabled = z;
        }
    }

    public MessageObject.GroupedMessages getValidGroupedMessage(MessageObject message) {
        if (message.getGroupId() == 0) {
            return null;
        }
        MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(message.getGroupId());
        if (groupedMessages == null) {
            return groupedMessages;
        }
        if (groupedMessages.messages.size() <= 1 || groupedMessages.positions.get(message) == null) {
            return null;
        }
        return groupedMessages;
    }

    public void jumpToDate(int date) {
        TLRPC.Message message;
        if (this.messages.isEmpty()) {
            return;
        }
        MessageObject firstMessage = this.messages.get(0);
        ArrayList<MessageObject> arrayList = this.messages;
        int i = 1;
        MessageObject lastMessage = arrayList.get(arrayList.size() - 1);
        if ((firstMessage.messageOwner.date >= date && lastMessage.messageOwner.date <= date) || (lastMessage.messageOwner.date >= date && this.endReached[0])) {
            int a = this.messages.size() - 1;
            while (true) {
                if (a < 0) {
                    break;
                }
                MessageObject message2 = this.messages.get(a);
                if (message2.messageOwner.date >= date && message2.getId() != 0) {
                    scrollToMessageId(message2.getId(), 0, false, message2.getDialogId() == this.mergeDialogId ? 1 : 0, true, 0);
                } else {
                    a--;
                }
            }
        } else if (!DialogObject.isEncryptedDialog(this.dialog_id)) {
            int scrollDirection = -1;
            int end = this.chatLayoutManager.findLastVisibleItemPosition();
            int i2 = this.chatLayoutManager.findFirstVisibleItemPosition();
            while (true) {
                if (i2 > end) {
                    break;
                } else if (i2 < this.chatAdapter.messagesStartRow || i2 >= this.chatAdapter.messagesEndRow || (message = this.messages.get(i2 - this.chatAdapter.messagesStartRow).messageOwner) == null) {
                    i2++;
                } else {
                    boolean scrollDown = message.date < date;
                    if (isSecretChat()) {
                        scrollDown = !scrollDown;
                    }
                    if (scrollDown) {
                        i = 0;
                    }
                    scrollDirection = i;
                }
            }
            this.chatScrollHelper.setScrollDirection(scrollDirection);
            AlertDialog alertDialog = this.progressDialog;
            if (alertDialog != null) {
                alertDialog.dismiss();
            }
            updatePinnedListButton(false);
            AlertDialog alertDialog2 = new AlertDialog(getParentActivity(), 3, this.themeDelegate);
            this.progressDialog = alertDialog2;
            alertDialog2.setOnCancelListener(this.postponedScrollCancelListener);
            this.progressDialog.showDelayed(1000L);
            int i3 = this.lastLoadIndex;
            this.postponedScrollToLastMessageQueryIndex = i3;
            this.waitingForLoad.add(Integer.valueOf(i3));
            this.postponedScrollMessageId = 0;
            this.postponedScrollIsCanceled = false;
            MessagesController messagesController = getMessagesController();
            long j = this.dialog_id;
            long j2 = this.mergeDialogId;
            int i4 = this.classGuid;
            int i5 = this.chatMode;
            int i6 = this.threadMessageId;
            int i7 = this.replyMaxReadId;
            int i8 = this.lastLoadIndex;
            this.lastLoadIndex = i8 + 1;
            messagesController.loadMessages(j, j2, false, 30, 0, date, true, 0, i4, 4, 0, i5, i6, i7, i8);
            this.floatingDateView.setAlpha(0.0f);
            this.floatingDateView.setTag(null);
        }
    }

    public void processInlineBotContextPM(TLRPC.TL_inlineBotSwitchPM object) {
        MentionsContainerView mentionsContainerView;
        TLRPC.User user;
        if (object == null || (mentionsContainerView = this.mentionContainer) == null || (user = mentionsContainerView.getAdapter().getContextBotUser()) == null) {
            return;
        }
        this.chatActivityEnterView.setFieldText("");
        if (this.dialog_id == user.id) {
            this.inlineReturn = this.dialog_id;
            getMessagesController().sendBotStart(this.currentUser, object.start_param);
            return;
        }
        Bundle args = new Bundle();
        args.putLong("user_id", user.id);
        args.putString("inline_query", object.start_param);
        args.putLong("inline_return", this.dialog_id);
        if (!getMessagesController().checkCanOpenChat(args, this)) {
            return;
        }
        presentFragment(new ChatActivity(args));
    }

    private void createChatAttachView() {
        if (getParentActivity() != null && this.chatAttachAlert == null) {
            ChatAttachAlert chatAttachAlert = new ChatAttachAlert(getParentActivity(), this, false, false, this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.63
                @Override // org.telegram.ui.Components.ChatAttachAlert, org.telegram.ui.ActionBar.BottomSheet
                public void dismissInternal() {
                    if (ChatActivity.this.chatAttachAlert != null && ChatActivity.this.chatAttachAlert.isShowing()) {
                        AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ChatActivity.this.classGuid);
                    }
                    super.dismissInternal();
                    ChatActivity.this.onEditTextDialogClose(false, true);
                }

                @Override // org.telegram.ui.ActionBar.BottomSheet
                public void onDismissAnimationStart() {
                    ChatActivity.this.chatAttachAlert.setFocusable(false);
                    ChatActivity.this.chatActivityEnterView.getEditField().requestFocus();
                    if (ChatActivity.this.chatAttachAlert != null && ChatActivity.this.chatAttachAlert.isShowing()) {
                        AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ChatActivity.this.classGuid);
                    }
                    ChatActivity.this.onEditTextDialogClose(false, false);
                }
            };
            this.chatAttachAlert = chatAttachAlert;
            chatAttachAlert.setDelegate(new ChatAttachAlert.ChatAttachViewDelegate() { // from class: org.telegram.ui.ChatActivity.64
                @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
                public /* synthetic */ void openAvatarsSearch() {
                    ChatAttachAlert.ChatAttachViewDelegate.CC.$default$openAvatarsSearch(this);
                }

                @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
                public void didPressedButton(int button, boolean arg, boolean notify, int scheduleDate, boolean forceDocument) {
                    if (ChatActivity.this.getParentActivity() == null || ChatActivity.this.chatAttachAlert == null) {
                        return;
                    }
                    ChatActivity chatActivity = ChatActivity.this;
                    chatActivity.editingMessageObject = chatActivity.chatAttachAlert.getEditingMessageObject();
                    if (button == 8 || button == 7 || (button == 4 && !ChatActivity.this.chatAttachAlert.getPhotoLayout().getSelectedPhotos().isEmpty())) {
                        if (button != 8) {
                            ChatActivity.this.chatAttachAlert.dismiss(true);
                        }
                        HashMap<Object, Object> selectedPhotos = ChatActivity.this.chatAttachAlert.getPhotoLayout().getSelectedPhotos();
                        ArrayList<Object> selectedPhotosOrder = ChatActivity.this.chatAttachAlert.getPhotoLayout().getSelectedPhotosOrder();
                        if (!selectedPhotos.isEmpty()) {
                            for (int i = 0; i < Math.ceil(selectedPhotos.size() / 10.0f); i++) {
                                int count = Math.min(10, selectedPhotos.size() - (i * 10));
                                ArrayList<SendMessagesHelper.SendingMediaInfo> photos = new ArrayList<>();
                                for (int a = 0; a < count; a++) {
                                    if ((i * 10) + a < selectedPhotosOrder.size()) {
                                        MediaController.PhotoEntry photoEntry = (MediaController.PhotoEntry) selectedPhotos.get(selectedPhotosOrder.get((i * 10) + a));
                                        SendMessagesHelper.SendingMediaInfo info = new SendMessagesHelper.SendingMediaInfo();
                                        if (!photoEntry.isVideo && photoEntry.imagePath != null) {
                                            info.path = photoEntry.imagePath;
                                        } else if (photoEntry.path != null) {
                                            info.path = photoEntry.path;
                                        }
                                        info.thumbPath = photoEntry.thumbPath;
                                        info.isVideo = photoEntry.isVideo;
                                        info.caption = photoEntry.caption != null ? photoEntry.caption.toString() : null;
                                        info.entities = photoEntry.entities;
                                        info.masks = photoEntry.stickers;
                                        info.ttl = photoEntry.ttl;
                                        info.videoEditedInfo = photoEntry.editedInfo;
                                        info.canDeleteAfter = photoEntry.canDeleteAfter;
                                        photos.add(info);
                                        photoEntry.reset();
                                    }
                                }
                                if (i == 0) {
                                    ChatActivity.this.fillEditingMediaWithCaption(photos.get(0).caption, photos.get(0).entities);
                                }
                                SendMessagesHelper.prepareSendingMedia(ChatActivity.this.getAccountInstance(), photos, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, ChatActivity.this.getThreadMessage(), null, button == 4 || forceDocument, arg, ChatActivity.this.editingMessageObject, notify, scheduleDate);
                            }
                            ChatActivity.this.afterMessageSend();
                            ChatActivity.this.chatActivityEnterView.setFieldText("");
                        }
                        if (scheduleDate != 0) {
                            if (ChatActivity.this.scheduledMessagesCount == -1) {
                                ChatActivity.this.scheduledMessagesCount = 0;
                            }
                            ChatActivity.access$26912(ChatActivity.this, selectedPhotos.size());
                            ChatActivity.this.updateScheduledInterface(true);
                            return;
                        }
                        return;
                    }
                    if (ChatActivity.this.chatAttachAlert != null) {
                        ChatActivity.this.chatAttachAlert.dismissWithButtonClick(button);
                    }
                    ChatActivity.this.processSelectedAttach(button);
                }

                @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
                public View getRevealView() {
                    return ChatActivity.this.chatActivityEnterView.getAttachButton();
                }

                @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
                public void didSelectBot(TLRPC.User user) {
                    if (ChatActivity.this.chatActivityEnterView == null || user == null || TextUtils.isEmpty(user.username)) {
                        return;
                    }
                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    chatActivityEnterView.setFieldText("@" + user.username + " ");
                    ChatActivity.this.chatActivityEnterView.openKeyboard();
                }

                @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
                public void onCameraOpened() {
                    ChatActivity.this.chatActivityEnterView.closeKeyboard();
                }

                @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
                public boolean needEnterComment() {
                    return ChatActivity.this.needEnterText();
                }

                @Override // org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate
                public void doOnIdle(Runnable runnable) {
                    ChatActivity.this.m1899x4c8be4fe(runnable);
                }
            });
        }
    }

    public boolean needEnterText() {
        boolean keyboardVisible = this.chatActivityEnterView.isKeyboardVisible();
        if (keyboardVisible) {
            this.chatActivityEnterView.showEmojiView();
            this.openKeyboardOnAttachMenuClose = true;
        }
        AndroidUtilities.setAdjustResizeToNothing(getParentActivity(), this.classGuid);
        this.fragmentView.requestLayout();
        return keyboardVisible;
    }

    public void onEditTextDialogClose(boolean resetAdjust, boolean reset) {
        if (this.openKeyboardOnAttachMenuClose) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda41
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1874lambda$onEditTextDialogClose$86$orgtelegramuiChatActivity();
                }
            }, 50L);
            if (reset) {
                this.openKeyboardOnAttachMenuClose = false;
            }
        }
        if (resetAdjust) {
            AndroidUtilities.requestAdjustResize(getParentActivity(), this.classGuid);
        }
    }

    /* renamed from: lambda$onEditTextDialogClose$86$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1874lambda$onEditTextDialogClose$86$orgtelegramuiChatActivity() {
        this.chatActivityEnterView.openKeyboard();
    }

    /* renamed from: doOnIdle */
    public void m1899x4c8be4fe(Runnable runnable) {
        NotificationCenter.getInstance(this.currentAccount).doOnIdle(runnable);
    }

    public void performHistoryClear(final boolean revoke, boolean canDeleteHistory) {
        this.clearingHistory = true;
        this.undoView.showWithAction(this.dialog_id, 0, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda106
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1902lambda$performHistoryClear$87$orgtelegramuiChatActivity(revoke);
            }
        }, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda45
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1903lambda$performHistoryClear$88$orgtelegramuiChatActivity();
            }
        });
        this.chatAdapter.notifyDataSetChanged();
    }

    /* renamed from: lambda$performHistoryClear$87$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1902lambda$performHistoryClear$87$orgtelegramuiChatActivity(boolean revoke) {
        if (!this.pinnedMessageIds.isEmpty()) {
            SharedPreferences preferences = MessagesController.getNotificationsSettings(this.currentAccount);
            SharedPreferences.Editor edit2 = preferences.edit();
            edit2.putInt("pin_" + this.dialog_id, this.pinnedMessageIds.get(0).intValue()).commit();
            this.pinnedMessageIds.clear();
            this.pinnedMessageObjects.clear();
            this.currentPinnedMessageId = 0;
            this.loadedPinnedMessagesCount = 0;
            this.totalPinnedMessagesCount = 0;
            updatePinnedMessageView(true);
        }
        getMessagesController().deleteDialog(this.dialog_id, 1, revoke);
        this.clearingHistory = false;
        clearHistory(false, null);
        this.chatAdapter.notifyDataSetChanged();
    }

    /* renamed from: lambda$performHistoryClear$88$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1903lambda$performHistoryClear$88$orgtelegramuiChatActivity() {
        this.clearingHistory = false;
        this.chatAdapter.notifyDataSetChanged();
    }

    public long getDialogId() {
        return this.dialog_id;
    }

    public int getDialogFolderId() {
        return this.dialogFolderId;
    }

    public int getDialogFilterId() {
        return this.dialogFilterId;
    }

    public boolean openedWithLivestream() {
        return this.livestream;
    }

    public UndoView getUndoView() {
        return this.undoView;
    }

    public long getMergeDialogId() {
        return this.mergeDialogId;
    }

    public boolean hasReportSpam() {
        BlurredFrameLayout blurredFrameLayout = this.topChatPanelView;
        return (blurredFrameLayout == null || blurredFrameLayout.getTag() != null || this.reportSpamButton.getVisibility() == 8) ? false : true;
    }

    public boolean isReport() {
        return this.reportType >= 0;
    }

    public void setChatInvite(TLRPC.ChatInvite invite) {
        this.chatInvite = invite;
    }

    public void setBotUser(String value) {
        if (this.inlineReturn != 0) {
            getMessagesController().sendBotStart(this.currentUser, value);
            return;
        }
        this.botUser = value;
        updateBottomOverlay();
    }

    public void afterMessageSend() {
        hideFieldPanel(false);
        if (this.chatMode == 0) {
            getMediaDataController().cleanDraft(this.dialog_id, this.threadMessageId, true);
        }
    }

    private void toggleMesagesSearchListView() {
        RecyclerListView recyclerListView = this.messagesSearchListView;
        if (recyclerListView != null) {
            showMessagesSearchListView(recyclerListView.getTag() == null);
        }
    }

    public void showMessagesSearchListView(final boolean show) {
        RecyclerListView recyclerListView = this.messagesSearchListView;
        if (recyclerListView != null) {
            if (show && recyclerListView.getTag() != null) {
                return;
            }
            if (!show && this.messagesSearchListView.getTag() == null) {
                return;
            }
            AnimatorSet animatorSet = this.messagesSearchListViewAnimation;
            Integer num = null;
            if (animatorSet != null) {
                animatorSet.cancel();
                this.messagesSearchListViewAnimation = null;
            }
            if (show) {
                this.messagesSearchListView.setVisibility(0);
            }
            RecyclerListView recyclerListView2 = this.messagesSearchListView;
            if (show) {
                num = 1;
            }
            recyclerListView2.setTag(num);
            AnimatorSet animatorSet2 = new AnimatorSet();
            this.messagesSearchListViewAnimation = animatorSet2;
            Animator[] animatorArr = new Animator[1];
            RecyclerListView recyclerListView3 = this.messagesSearchListView;
            Property property = View.ALPHA;
            float[] fArr = new float[1];
            fArr[0] = show ? 1.0f : 0.0f;
            animatorArr[0] = ObjectAnimator.ofFloat(recyclerListView3, property, fArr);
            animatorSet2.playTogether(animatorArr);
            this.messagesSearchListViewAnimation.setInterpolator(CubicBezierInterpolator.EASE_IN);
            this.messagesSearchListViewAnimation.setDuration(180L);
            this.messagesSearchListViewAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.65
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animation) {
                    if (animation.equals(ChatActivity.this.messagesSearchListViewAnimation)) {
                        ChatActivity.this.messagesSearchListViewAnimation = null;
                        if (!show) {
                            ChatActivity.this.messagesSearchListView.setVisibility(8);
                        }
                    }
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationCancel(Animator animation) {
                    if (animation.equals(ChatActivity.this.messagesSearchListViewAnimation)) {
                        ChatActivity.this.messagesSearchListViewAnimation = null;
                    }
                }
            });
            this.messagesSearchListViewAnimation.start();
        }
    }

    public boolean playFirstUnreadVoiceMessage() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || !chatActivityEnterView.isRecordingAudioVideo()) {
            for (int a = this.messages.size() - 1; a >= 0; a--) {
                MessageObject messageObject = this.messages.get(a);
                if ((messageObject.isVoice() || messageObject.isRoundVideo()) && messageObject.isContentUnread() && !messageObject.isOut()) {
                    MediaController.getInstance().setVoiceMessagesPlaylist(MediaController.getInstance().playMessage(messageObject) ? createVoiceMessagesPlaylist(messageObject, true) : null, true);
                    return true;
                }
            }
            int a2 = Build.VERSION.SDK_INT;
            if (a2 < 23 || getParentActivity() == null || getParentActivity().checkSelfPermission("android.permission.RECORD_AUDIO") == 0) {
                return false;
            }
            getParentActivity().requestPermissions(new String[]{"android.permission.RECORD_AUDIO"}, 3);
            return true;
        }
        return true;
    }

    public void openScheduledMessages() {
        if (this.parentLayout == null || this.parentLayout.getLastFragment() != this) {
            return;
        }
        Bundle bundle = new Bundle();
        TLRPC.EncryptedChat encryptedChat = this.currentEncryptedChat;
        if (encryptedChat != null) {
            bundle.putInt("enc_id", encryptedChat.id);
        } else {
            TLRPC.Chat chat = this.currentChat;
            if (chat != null) {
                bundle.putLong(ChatReactionsEditActivity.KEY_CHAT_ID, chat.id);
            } else {
                bundle.putLong("user_id", this.currentUser.id);
            }
        }
        bundle.putInt("chatMode", 1);
        ChatActivity fragment = new ChatActivity(bundle);
        fragment.chatActivityDelegate = new ChatActivityDelegate() { // from class: org.telegram.ui.ChatActivity.66
            @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void onReport() {
                ChatActivityDelegate.CC.$default$onReport(this);
            }

            @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void onUnpin(boolean z, boolean z2) {
                ChatActivityDelegate.CC.$default$onUnpin(this, z, z2);
            }

            @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
            public void openReplyMessage(int mid) {
                ChatActivity.this.scrollToMessageId(mid, 0, true, 0, true, 0);
            }

            @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
            public void openSearch(String text) {
                ChatActivity.this.openSearchWithText(text);
            }
        };
        presentFragment(fragment, false);
    }

    private void initStickers() {
        if (this.chatActivityEnterView == null || getParentActivity() == null || this.stickersAdapter != null) {
            return;
        }
        this.stickersListView.setPadding(AndroidUtilities.dp(18.0f), 0, AndroidUtilities.dp(18.0f), 0);
        RecyclerListView recyclerListView = this.stickersListView;
        StickersAdapter stickersAdapter = new StickersAdapter(getParentActivity(), new StickersAdapter.StickersAdapterDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda150
            @Override // org.telegram.ui.Adapters.StickersAdapter.StickersAdapterDelegate
            public final void needChangePanelVisibility(boolean z) {
                ChatActivity.this.m1865lambda$initStickers$89$orgtelegramuiChatActivity(z);
            }
        }, this.themeDelegate);
        this.stickersAdapter = stickersAdapter;
        recyclerListView.setAdapter(stickersAdapter);
        RecyclerListView recyclerListView2 = this.stickersListView;
        RecyclerListView.OnItemClickListener onItemClickListener = new RecyclerListView.OnItemClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda165
            @Override // org.telegram.ui.Components.RecyclerListView.OnItemClickListener
            public final void onItemClick(View view, int i) {
                ChatActivity.this.m1866lambda$initStickers$90$orgtelegramuiChatActivity(view, i);
            }
        };
        this.stickersOnItemClickListener = onItemClickListener;
        recyclerListView2.setOnItemClickListener(onItemClickListener);
    }

    /* renamed from: lambda$initStickers$89$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1865lambda$initStickers$89$orgtelegramuiChatActivity(final boolean show) {
        if (show) {
            int newPadding = this.stickersAdapter.isShowingKeywords() ? AndroidUtilities.dp(24.0f) : 0;
            if (newPadding != this.stickersListView.getPaddingTop() || this.stickersPanel.getTag() == null) {
                this.stickersListView.setPadding(AndroidUtilities.dp(18.0f), newPadding, AndroidUtilities.dp(18.0f), 0);
                this.stickersListView.scrollToPosition(0);
                boolean isRtl = this.chatActivityEnterView.isRtlText();
                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) this.stickersPanelArrow.getLayoutParams();
                layoutParams.gravity = (isRtl ? 5 : 3) | 80;
                this.stickersPanelArrow.requestLayout();
            }
        }
        if (!show || this.stickersPanel.getTag() == null) {
            if (!show && this.stickersPanel.getTag() == null) {
                return;
            }
            if (show) {
                this.stickersPanel.setVisibility(this.allowStickersPanel ? 0 : 4);
                this.stickersPanel.setTag(1);
            } else {
                this.stickersPanel.setTag(null);
            }
            AnimatorSet animatorSet = this.runningAnimation;
            if (animatorSet != null) {
                animatorSet.cancel();
                this.runningAnimation = null;
            }
            if (this.stickersPanel.getVisibility() != 4) {
                AnimatorSet animatorSet2 = new AnimatorSet();
                this.runningAnimation = animatorSet2;
                Animator[] animatorArr = new Animator[1];
                FrameLayout frameLayout = this.stickersPanel;
                Property property = View.ALPHA;
                float[] fArr = new float[2];
                float f = 0.0f;
                fArr[0] = show ? 0.0f : 1.0f;
                if (show) {
                    f = 1.0f;
                }
                fArr[1] = f;
                animatorArr[0] = ObjectAnimator.ofFloat(frameLayout, property, fArr);
                animatorSet2.playTogether(animatorArr);
                this.runningAnimation.setDuration(150L);
                this.runningAnimationIndex = getNotificationCenter().setAnimationInProgress(this.runningAnimationIndex, null);
                this.runningAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.67
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animation) {
                        ChatActivity.this.getNotificationCenter().onAnimationFinish(ChatActivity.this.runningAnimationIndex);
                        if (ChatActivity.this.runningAnimation != null && ChatActivity.this.runningAnimation.equals(animation)) {
                            if (!show) {
                                ChatActivity.this.stickersAdapter.clearSearch();
                                ChatActivity.this.stickersPanel.setVisibility(8);
                                if (ContentPreviewViewer.getInstance().isVisible()) {
                                    ContentPreviewViewer.getInstance().close();
                                }
                                ContentPreviewViewer.getInstance().reset();
                            }
                            ChatActivity.this.runningAnimation = null;
                        }
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationCancel(Animator animation) {
                        if (ChatActivity.this.runningAnimation != null && ChatActivity.this.runningAnimation.equals(animation)) {
                            ChatActivity.this.runningAnimation = null;
                        }
                    }
                });
                this.runningAnimation.start();
            } else if (!show) {
                this.stickersPanel.setVisibility(8);
            }
        }
    }

    /* renamed from: lambda$initStickers$90$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1866lambda$initStickers$90$orgtelegramuiChatActivity(View view, int position) {
        Object item = this.stickersAdapter.getItem(position);
        if (item instanceof String) {
            String emoji = (String) item;
            SpannableString string = new SpannableString(emoji);
            Emoji.replaceEmoji(string, this.chatActivityEnterView.getEditField().getPaint().getFontMetricsInt(), AndroidUtilities.dp(20.0f), false);
            this.chatActivityEnterView.setFieldText(string, false);
        }
    }

    public void shareMyContact(final int type, final MessageObject messageObject) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("ShareYouPhoneNumberTitle", R.string.ShareYouPhoneNumberTitle));
        TLRPC.User user = this.currentUser;
        if (user != null) {
            if (user.bot) {
                builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfoBot", R.string.AreYouSureShareMyContactInfoBot));
            } else {
                PhoneFormat phoneFormat = PhoneFormat.getInstance();
                builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureShareMyContactInfoUser", R.string.AreYouSureShareMyContactInfoUser, phoneFormat.format("+" + getUserConfig().getCurrentUser().phone), ContactsController.formatName(this.currentUser.first_name, this.currentUser.last_name))));
            }
        } else {
            builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfo", R.string.AreYouSureShareMyContactInfo));
        }
        builder.setPositiveButton(LocaleController.getString("ShareContact", R.string.ShareContact), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda185
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.m1945lambda$shareMyContact$92$orgtelegramuiChatActivity(type, messageObject, dialogInterface, i);
            }
        });
        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
        showDialog(builder.create());
    }

    /* renamed from: lambda$shareMyContact$92$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1945lambda$shareMyContact$92$orgtelegramuiChatActivity(int type, MessageObject messageObject, DialogInterface dialogInterface, int i) {
        if (type == 1) {
            TLRPC.TL_contacts_acceptContact req = new TLRPC.TL_contacts_acceptContact();
            req.id = getMessagesController().getInputUser(this.currentUser);
            getConnectionsManager().sendRequest(req, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda132
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    ChatActivity.this.m1944lambda$shareMyContact$91$orgtelegramuiChatActivity(tLObject, tL_error);
                }
            });
            return;
        }
        SendMessagesHelper.getInstance(this.currentAccount).sendMessage(getUserConfig().getCurrentUser(), this.dialog_id, messageObject, getThreadMessage(), (TLRPC.ReplyMarkup) null, (HashMap<String, String>) null, true, 0);
        if (this.chatMode == 0) {
            moveScrollToLastMessage(false);
        }
        hideFieldPanel(false);
    }

    /* renamed from: lambda$shareMyContact$91$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1944lambda$shareMyContact$91$orgtelegramuiChatActivity(TLObject response, TLRPC.TL_error error) {
        if (error != null) {
            return;
        }
        getMessagesController().processUpdates((TLRPC.Updates) response, false);
    }

    public void showVoiceHint(boolean hide, boolean video) {
        ChatActivityEnterView chatActivityEnterView;
        String str;
        int i;
        if (getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        if ((hide && this.voiceHintTextView == null) || this.chatMode != 0 || (chatActivityEnterView = this.chatActivityEnterView) == null || chatActivityEnterView.getAudioVideoButtonContainer() == null || this.chatActivityEnterView.getAudioVideoButtonContainer().getVisibility() != 0) {
            return;
        }
        if (this.voiceHintTextView == null) {
            SizeNotifierFrameLayout frameLayout = (SizeNotifierFrameLayout) this.fragmentView;
            int index = frameLayout.indexOfChild(this.chatActivityEnterView);
            if (index == -1) {
                return;
            }
            HintView hintView = new HintView(getParentActivity(), 9, this.themeDelegate);
            this.voiceHintTextView = hintView;
            frameLayout.addView(hintView, index + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 10.0f, 0.0f, 10.0f, 0.0f));
        }
        if (hide) {
            this.voiceHintTextView.hide();
            return;
        }
        if (this.chatActivityEnterView.hasRecordVideo()) {
            HintView hintView2 = this.voiceHintTextView;
            if (video) {
                i = R.string.HoldToVideo;
                str = "HoldToVideo";
            } else {
                i = R.string.HoldToAudio;
                str = "HoldToAudio";
            }
            hintView2.setText(LocaleController.getString(str, i));
        } else {
            this.voiceHintTextView.setText(LocaleController.getString("HoldToAudioOnly", R.string.HoldToAudioOnly));
        }
        this.voiceHintTextView.showForView(this.chatActivityEnterView.getAudioVideoButtonContainer(), true);
    }

    public boolean checkSlowMode(View view) {
        CharSequence time = this.chatActivityEnterView.getSlowModeTimer();
        if (time != null) {
            showSlowModeHint(view, true, time);
            return true;
        }
        return false;
    }

    public void hideHints(boolean scroll) {
        if (!scroll) {
            HintView hintView = this.slowModeHint;
            if (hintView != null) {
                hintView.hide();
            }
            HintView hintView2 = this.searchAsListHint;
            if (hintView2 != null) {
                hintView2.hide();
            }
            HintView hintView3 = this.scheduledOrNoSoundHint;
            if (hintView3 != null) {
                hintView3.hide();
            }
        }
        HintView hintView4 = this.fwdRestrictedBottomHint;
        if (hintView4 != null) {
            hintView4.hide();
        }
        HintView hintView5 = this.fwdRestrictedTopHint;
        if (hintView5 != null) {
            hintView5.hide();
        }
        HintView hintView6 = this.noSoundHintView;
        if (hintView6 != null) {
            hintView6.hide();
        }
        HintView hintView7 = this.forwardHintView;
        if (hintView7 != null) {
            hintView7.hide();
        }
        HintView hintView8 = this.pollHintView;
        if (hintView8 != null) {
            hintView8.hide();
        }
        HintView hintView9 = this.timerHintView;
        if (hintView9 != null) {
            hintView9.hide();
        }
        ChecksHintView checksHintView = this.checksHintView;
        if (checksHintView != null) {
            checksHintView.hide();
        }
    }

    public void showSlowModeHint(View view, boolean show, CharSequence time) {
        HintView hintView;
        if (getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        if (!show && ((hintView = this.slowModeHint) == null || hintView.getVisibility() != 0)) {
            return;
        }
        this.slowModeHint.setText(AndroidUtilities.replaceTags(LocaleController.formatString("SlowModeHint", R.string.SlowModeHint, time)));
        if (show) {
            this.slowModeHint.showForView(view, true);
        }
    }

    public void showTimerHint() {
        String time;
        if (getParentActivity() == null || this.fragmentView == null || this.chatInfo == null) {
            return;
        }
        if (this.timerHintView == null) {
            HintView hintView = new HintView(getParentActivity(), 7, true, this.themeDelegate);
            this.timerHintView = hintView;
            hintView.setAlpha(0.0f);
            this.timerHintView.setVisibility(4);
            this.timerHintView.setShowingDuration(4000L);
            this.contentView.addView(this.timerHintView, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
        }
        if (this.chatInfo.ttl_period > 86400) {
            time = LocaleController.formatPluralString("Days", this.chatInfo.ttl_period / 86400, new Object[0]);
        } else if (this.chatInfo.ttl_period >= 3600) {
            time = LocaleController.formatPluralString("Hours", this.chatInfo.ttl_period / 3600, new Object[0]);
        } else if (this.chatInfo.ttl_period >= 60) {
            time = LocaleController.formatPluralString("Minutes", this.chatInfo.ttl_period / 60, new Object[0]);
        } else {
            time = LocaleController.formatPluralString("Seconds", this.chatInfo.ttl_period, new Object[0]);
        }
        this.timerHintView.setText(LocaleController.formatString("AutoDeleteSetInfo", R.string.AutoDeleteSetInfo, time));
        this.timerHintView.showForView(this.avatarContainer.getTimeItem(), true);
    }

    private void showSearchAsListHint() {
        if (getParentActivity() == null || this.fragmentView == null || this.searchCountText == null) {
            return;
        }
        if (this.searchAsListHint == null) {
            HintView hintView = new HintView(getParentActivity(), 3, this.themeDelegate);
            this.searchAsListHint = hintView;
            hintView.setAlpha(0.0f);
            this.searchAsListHint.setVisibility(4);
            this.searchAsListHint.setText(LocaleController.getString("TapToViewAsList", R.string.TapToViewAsList));
            this.contentView.addView(this.searchAsListHint, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
        }
        this.searchAsListHint.showForView(this.searchCountText, true);
    }

    private void showScheduledOrNoSoundHint() {
        TLRPC.ChatFull chatFull;
        boolean disableNoSound = UserObject.isUserSelf(this.currentUser) || ((chatFull = this.chatInfo) != null && chatFull.slowmode_next_send_date > 0 && this.chatMode == 0);
        if (SharedConfig.scheduledOrNoSoundHintShows >= 3 || System.currentTimeMillis() % 4 != 0 || disableNoSound) {
            return;
        }
        AndroidUtilities.cancelRunOnUIThread(this.showScheduledOrNoSoundRunnable);
        AndroidUtilities.runOnUIThread(this.showScheduledOrNoSoundRunnable, 200L);
    }

    public void showMediaBannedHint() {
        SizeNotifierFrameLayout frameLayout;
        int index;
        if (getParentActivity() == null || this.currentChat == null || this.fragmentView == null) {
            return;
        }
        HintView hintView = this.mediaBanTooltip;
        if ((hintView != null && hintView.getVisibility() == 0) || (index = (frameLayout = (SizeNotifierFrameLayout) this.fragmentView).indexOfChild(this.chatActivityEnterView)) == -1) {
            return;
        }
        if (this.mediaBanTooltip == null) {
            HintView hintView2 = new HintView(getParentActivity(), 9, this.themeDelegate);
            this.mediaBanTooltip = hintView2;
            hintView2.setVisibility(8);
            frameLayout.addView(this.mediaBanTooltip, index + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 10.0f, 0.0f, 10.0f, 0.0f));
        }
        if (ChatObject.isActionBannedByDefault(this.currentChat, 7)) {
            this.mediaBanTooltip.setText(LocaleController.getString("GlobalAttachMediaRestricted", R.string.GlobalAttachMediaRestricted));
        } else if (this.currentChat.banned_rights == null) {
            return;
        } else {
            if (AndroidUtilities.isBannedForever(this.currentChat.banned_rights)) {
                this.mediaBanTooltip.setText(LocaleController.getString("AttachMediaRestrictedForever", R.string.AttachMediaRestrictedForever));
            } else {
                this.mediaBanTooltip.setText(LocaleController.formatString("AttachMediaRestricted", R.string.AttachMediaRestricted, LocaleController.formatDateForBan(this.currentChat.banned_rights.until_date)));
            }
        }
        this.mediaBanTooltip.showForView(this.chatActivityEnterView.getSendButton(), true);
    }

    public void showNoSoundHint() {
        ChatMessageCell messageCell;
        MessageObject messageObject;
        if (this.scrollingChatListView || SharedConfig.noSoundHintShowed || this.chatListView == null || getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        HintView hintView = this.noSoundHintView;
        if (hintView != null && hintView.getTag() != null) {
            return;
        }
        if (this.noSoundHintView == null) {
            SizeNotifierFrameLayout frameLayout = (SizeNotifierFrameLayout) this.fragmentView;
            int index = frameLayout.indexOfChild(this.chatActivityEnterView);
            if (index == -1) {
                return;
            }
            HintView hintView2 = new HintView(getParentActivity(), 0, this.themeDelegate);
            this.noSoundHintView = hintView2;
            hintView2.setShowingDuration(10000L);
            frameLayout.addView(this.noSoundHintView, index + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
            this.noSoundHintView.setAlpha(0.0f);
            this.noSoundHintView.setVisibility(4);
        }
        int count = this.chatListView.getChildCount();
        for (int a = 0; a < count; a++) {
            View child = this.chatListView.getChildAt(a);
            if ((child instanceof ChatMessageCell) && (messageObject = (messageCell = (ChatMessageCell) child).getMessageObject()) != null && messageObject.isVideo()) {
                ImageReceiver imageReceiver = messageCell.getPhotoImage();
                AnimatedFileDrawable animation = imageReceiver.getAnimation();
                if (animation != null && animation.getCurrentProgressMs() >= 3000 && this.noSoundHintView.showForMessageCell(messageCell, true)) {
                    SharedConfig.setNoSoundHintShowed(true);
                    return;
                }
            }
        }
    }

    private void checkChecksHint() {
        if (getMessagesController().pendingSuggestions.contains("NEWCOMER_TICKS")) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda61
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.showChecksHint();
                }
            }, 1000L);
        }
    }

    public void showChecksHint() {
        ChatMessageCell messageCell;
        MessageObject messageObject;
        if (this.scrollingChatListView || this.chatListView == null || getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        ChecksHintView checksHintView = this.checksHintView;
        if (checksHintView != null && checksHintView.getTag() != null) {
            return;
        }
        if (this.checksHintView == null) {
            SizeNotifierFrameLayout frameLayout = (SizeNotifierFrameLayout) this.fragmentView;
            int index = frameLayout.indexOfChild(this.chatActivityEnterView);
            if (index == -1) {
                return;
            }
            ChecksHintView checksHintView2 = new ChecksHintView(getParentActivity(), this.themeDelegate);
            this.checksHintView = checksHintView2;
            frameLayout.addView(checksHintView2, index + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 10.0f, 0.0f, 10.0f, 0.0f));
            this.checksHintView.setAlpha(0.0f);
            this.checksHintView.setVisibility(4);
        }
        int count = this.chatListView.getChildCount();
        for (int a = 0; a < count; a++) {
            View child = this.chatListView.getChildAt(a);
            if ((child instanceof ChatMessageCell) && (messageObject = (messageCell = (ChatMessageCell) child).getMessageObject()) != null && messageObject.isOutOwner() && messageObject.isSent() && this.checksHintView.showForMessageCell(messageCell, true)) {
                getMessagesController().removeSuggestion(0L, "NEWCOMER_TICKS");
                return;
            }
        }
    }

    public void showForwardHint(ChatMessageCell cell) {
        if (this.scrollingChatListView || this.chatListView == null || getParentActivity() == null || this.fragmentView == null) {
            return;
        }
        if (this.forwardHintView == null) {
            SizeNotifierFrameLayout frameLayout = (SizeNotifierFrameLayout) this.fragmentView;
            int index = frameLayout.indexOfChild(this.chatActivityEnterView);
            if (index == -1) {
                return;
            }
            HintView hintView = new HintView(getParentActivity(), 1, this.themeDelegate);
            this.forwardHintView = hintView;
            frameLayout.addView(hintView, index + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
            this.forwardHintView.setAlpha(0.0f);
            this.forwardHintView.setVisibility(4);
        }
        this.forwardHintView.showForMessageCell(cell, true);
    }

    private void showTextSelectionHint(MessageObject messageObject) {
        CharSequence text;
        if (getParentActivity() == null || getMessagesController().isChatNoForwards(messageObject.getChatId())) {
            return;
        }
        if (messageObject != null && messageObject.messageOwner != null && messageObject.messageOwner.noforwards) {
            return;
        }
        boolean canShowText = false;
        if (messageObject.textLayoutBlocks != null && !messageObject.textLayoutBlocks.isEmpty()) {
            text = messageObject.messageText;
            if (messageObject.textLayoutBlocks.size() > 1) {
                canShowText = true;
            }
        } else {
            text = messageObject.caption;
        }
        if (!canShowText && text != null) {
            canShowText = text.length() > 200;
        }
        if (!canShowText || SharedConfig.textSelectionHintShows > 2 || this.textSelectionHintWasShowed || this.lastTouchY > this.chatActivityEnterView.getTop() - AndroidUtilities.dp(60.0f)) {
            return;
        }
        this.textSelectionHintWasShowed = true;
        SharedConfig.increaseTextSelectionHintShowed();
        if (this.textSelectionHint == null) {
            TextSelectionHint textSelectionHint = new TextSelectionHint(getParentActivity(), this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.68
                /* JADX INFO: Access modifiers changed from: protected */
                @Override // org.telegram.ui.Components.TextSelectionHint, android.view.View
                public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                    super.onMeasure(widthMeasureSpec, heightMeasureSpec);
                    updatePosition();
                }

                /* JADX INFO: Access modifiers changed from: protected */
                @Override // org.telegram.ui.Components.TextSelectionHint, android.view.View
                public void onDraw(Canvas canvas) {
                    super.onDraw(canvas);
                    updatePosition();
                }

                public void updatePosition() {
                    int start = -(getMeasuredHeight() + AndroidUtilities.dp(16.0f));
                    int end = ChatActivity.this.chatActivityEnterView.getTop() - ChatActivity.this.contentView.getMeasuredHeight();
                    setTranslationY(end - ((end + start) * (1.0f - getPrepareProgress())));
                }
            };
            this.textSelectionHint = textSelectionHint;
            this.contentView.addView(textSelectionHint, LayoutHelper.createFrame(-2, 56.0f, 83, 8.0f, 0.0f, 8.0f, 8.0f));
        }
        this.textSelectionHint.show();
    }

    private boolean showGifHint() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || chatActivityEnterView.getVisibility() != 0) {
            return false;
        }
        SharedPreferences preferences = MessagesController.getGlobalMainSettings();
        if (preferences.getBoolean("gifhint", false)) {
            return false;
        }
        preferences.edit().putBoolean("gifhint", true).commit();
        if (getParentActivity() == null || this.fragmentView == null || this.gifHintTextView != null) {
            return false;
        }
        if (!this.allowContextBotPanelSecond) {
            ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
            if (chatActivityEnterView2 != null) {
                chatActivityEnterView2.setOpenGifsTabFirst();
            }
            return false;
        }
        SizeNotifierFrameLayout frameLayout = (SizeNotifierFrameLayout) this.fragmentView;
        int index = frameLayout.indexOfChild(this.chatActivityEnterView);
        if (index == -1) {
            return false;
        }
        this.chatActivityEnterView.setOpenGifsTabFirst();
        View view = new View(getParentActivity());
        this.emojiButtonRed = view;
        view.setBackgroundResource(R.drawable.redcircle);
        frameLayout.addView(this.emojiButtonRed, index + 1, LayoutHelper.createFrame(10, 10.0f, 83, 30.0f, 0.0f, 0.0f, 27.0f));
        HintView hintView = new HintView(getParentActivity(), 9, this.themeDelegate);
        this.gifHintTextView = hintView;
        hintView.setText(LocaleController.getString("TapHereGifs", R.string.TapHereGifs));
        frameLayout.addView(this.gifHintTextView, index + 1, LayoutHelper.createFrame(-2, -2.0f, 83, 5.0f, 0.0f, 5.0f, 3.0f));
        AnimatorSet AnimatorSet = new AnimatorSet();
        AnimatorSet.playTogether(ObjectAnimator.ofFloat(this.gifHintTextView, View.ALPHA, 0.0f, 1.0f), ObjectAnimator.ofFloat(this.emojiButtonRed, View.ALPHA, 0.0f, 1.0f));
        AnimatorSet.addListener(new AnonymousClass69());
        AnimatorSet.setDuration(300L);
        AnimatorSet.start();
        View emojiButton = this.chatActivityEnterView.getEmojiButton();
        if (emojiButton != null) {
            this.gifHintTextView.showForView(emojiButton, true);
        }
        return true;
    }

    /* renamed from: org.telegram.ui.ChatActivity$69 */
    /* loaded from: classes4.dex */
    public class AnonymousClass69 extends AnimatorListenerAdapter {
        AnonymousClass69() {
            ChatActivity.this = this$0;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animation) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$69$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.AnonymousClass69.this.m2013lambda$onAnimationEnd$0$orgtelegramuiChatActivity$69();
                }
            }, AdaptiveTrackSelection.DEFAULT_MIN_TIME_BETWEEN_BUFFER_REEVALUTATION_MS);
        }

        /* renamed from: lambda$onAnimationEnd$0$org-telegram-ui-ChatActivity$69 */
        public /* synthetic */ void m2013lambda$onAnimationEnd$0$orgtelegramuiChatActivity$69() {
            if (ChatActivity.this.gifHintTextView == null) {
                return;
            }
            AnimatorSet AnimatorSet = new AnimatorSet();
            AnimatorSet.playTogether(ObjectAnimator.ofFloat(ChatActivity.this.gifHintTextView, View.ALPHA, 0.0f));
            AnimatorSet.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.69.1
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animation) {
                    if (ChatActivity.this.gifHintTextView != null) {
                        ChatActivity.this.gifHintTextView.setVisibility(8);
                    }
                }
            });
            AnimatorSet.setDuration(300L);
            AnimatorSet.start();
        }
    }

    public void openAttachMenu() {
        if (getParentActivity() != null) {
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null && !TextUtils.isEmpty(chatActivityEnterView.getSlowModeTimer())) {
                return;
            }
            createChatAttachView();
            this.chatAttachAlert.getPhotoLayout().loadGalleryPhotos();
            if (Build.VERSION.SDK_INT == 21 || Build.VERSION.SDK_INT == 22) {
                this.chatActivityEnterView.closeKeyboard();
            }
            TLRPC.Chat chat = this.currentChat;
            if (chat != null && !ChatObject.hasAdminRights(chat) && this.currentChat.slowmode_enabled) {
                this.chatAttachAlert.setMaxSelectedPhotos(10, true);
            } else {
                this.chatAttachAlert.setMaxSelectedPhotos(-1, true);
            }
            this.chatAttachAlert.init();
            this.chatAttachAlert.getCommentTextView().setText(this.chatActivityEnterView.getFieldText());
            this.chatAttachAlert.parentThemeDelegate = this.themeDelegate;
            showDialog(this.chatAttachAlert);
        }
    }

    public void checkAutoDownloadMessages(boolean scrollUp) {
        TLRPC.Document document;
        int canDownload;
        int cacheType;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView == null) {
            return;
        }
        int count = recyclerListView.getChildCount();
        int firstMessagePosition = -1;
        int lastMessagePosition = -1;
        for (int a = 0; a < count; a++) {
            View child = this.chatListView.getChildAt(a);
            if (child instanceof ChatMessageCell) {
                RecyclerView.ViewHolder holder = this.chatListView.findContainingViewHolder(child);
                if (holder != null) {
                    int p = holder.getAdapterPosition();
                    if (firstMessagePosition == -1) {
                        firstMessagePosition = p;
                    }
                    lastMessagePosition = p;
                }
                ChatMessageCell cell = (ChatMessageCell) child;
                MessageObject object = cell.getMessageObject();
                if (object != null && !object.mediaExists && object.isSent() && !object.loadingCancelled && (document = object.getDocument()) != null && !MessageObject.isStickerDocument(document) && !MessageObject.isAnimatedStickerDocument(document, true) && !MessageObject.isGifDocument(document) && !MessageObject.isRoundVideoDocument(document) && (canDownload = getDownloadController().canDownloadMedia(object.messageOwner)) != 0) {
                    if (canDownload == 2) {
                        if (this.currentEncryptedChat == null && !object.shouldEncryptPhotoOrVideo() && object.canStreamVideo()) {
                            getFileLoader().loadFile(document, object, 0, 10);
                        }
                    } else {
                        if (object.isWallpaper() || object.isTheme()) {
                            cacheType = 1;
                        } else if (MessageObject.isVideoDocument(document) && object.shouldEncryptPhotoOrVideo()) {
                            cacheType = 2;
                        } else {
                            cacheType = 0;
                        }
                        getFileLoader().loadFile(document, object, 0, cacheType);
                        cell.updateButtonState(false, true, false);
                    }
                }
            }
        }
        if (firstMessagePosition != -1) {
            if (scrollUp) {
                int lastPosition = lastMessagePosition;
                int firstMessagePosition2 = lastMessagePosition;
                int firstMessagePosition3 = Math.min(firstMessagePosition2 + 10, this.chatAdapter.messagesEndRow);
                int N = this.messages.size();
                for (int a2 = lastPosition; a2 < firstMessagePosition3; a2++) {
                    int n = a2 - this.chatAdapter.messagesStartRow;
                    if (n >= 0 && n < N) {
                        checkAutoDownloadMessage(this.messages.get(n));
                    }
                }
            } else {
                int lastPosition2 = firstMessagePosition - 20;
                int lastPosition3 = Math.max(lastPosition2, this.chatAdapter.messagesStartRow);
                int N2 = this.messages.size();
                for (int a3 = firstMessagePosition - 1; a3 >= lastPosition3; a3--) {
                    int n2 = a3 - this.chatAdapter.messagesStartRow;
                    if (n2 >= 0 && n2 < N2) {
                        checkAutoDownloadMessage(this.messages.get(n2));
                    }
                }
            }
        }
        showNoSoundHint();
    }

    private void checkAutoDownloadMessage(MessageObject object) {
        if (object.mediaExists) {
            return;
        }
        TLRPC.Message message = object.messageOwner;
        int canDownload = getDownloadController().canDownloadMedia(message);
        if (canDownload == 0) {
            return;
        }
        TLRPC.Document document = object.getDocument();
        TLRPC.PhotoSize photo = document == null ? FileLoader.getClosestPhotoSizeWithSize(object.photoThumbs, AndroidUtilities.getPhotoSize()) : null;
        if (document == null && photo == null) {
            return;
        }
        int i = 2;
        if (canDownload == 2 || (canDownload == 1 && object.isVideo())) {
            if (document != null && this.currentEncryptedChat == null && !object.shouldEncryptPhotoOrVideo() && object.canStreamVideo()) {
                getFileLoader().loadFile(document, object, 0, 10);
            }
        } else if (document != null) {
            FileLoader fileLoader = getFileLoader();
            if (!MessageObject.isVideoDocument(document) || !object.shouldEncryptPhotoOrVideo()) {
                i = 0;
            }
            fileLoader.loadFile(document, object, 0, i);
        } else {
            getFileLoader().loadFile(ImageLocation.getForObject(photo, object.photoThumbsObject), object, null, 0, object.shouldEncryptPhotoOrVideo() ? 2 : 0);
        }
    }

    public void showFloatingDateView(boolean scroll) {
        ChatActionCell chatActionCell = this.floatingDateView;
        if (chatActionCell == null) {
            return;
        }
        if (chatActionCell.getTag() == null) {
            AnimatorSet animatorSet = this.floatingDateAnimation;
            if (animatorSet != null) {
                animatorSet.cancel();
            }
            this.floatingDateView.setTag(1);
            AnimatorSet animatorSet2 = new AnimatorSet();
            this.floatingDateAnimation = animatorSet2;
            animatorSet2.setDuration(150L);
            this.floatingDateAnimation.playTogether(ObjectAnimator.ofFloat(this.floatingDateView, View.ALPHA, 1.0f));
            this.floatingDateAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.70
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animation) {
                    if (animation.equals(ChatActivity.this.floatingDateAnimation)) {
                        ChatActivity.this.floatingDateAnimation = null;
                    }
                }
            });
            this.floatingDateAnimation.start();
        }
        if (!scroll) {
            invalidateMessagesVisiblePart();
            this.hideDateDelay = 1000;
        }
    }

    public void hideFloatingDateView(boolean animated) {
        if (this.floatingDateView.getTag() == null || this.currentFloatingDateOnScreen) {
            return;
        }
        if (!this.scrollingFloatingDate || this.currentFloatingTopIsNotMessage) {
            this.floatingDateView.setTag(null);
            if (animated) {
                AnimatorSet animatorSet = new AnimatorSet();
                this.floatingDateAnimation = animatorSet;
                animatorSet.setDuration(150L);
                this.floatingDateAnimation.playTogether(ObjectAnimator.ofFloat(this.floatingDateView, View.ALPHA, 0.0f));
                this.floatingDateAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.71
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animation) {
                        if (animation.equals(ChatActivity.this.floatingDateAnimation)) {
                            ChatActivity.this.floatingDateAnimation = null;
                        }
                    }
                });
                this.floatingDateAnimation.setStartDelay(this.hideDateDelay);
                this.floatingDateAnimation.start();
            } else {
                AnimatorSet animatorSet2 = this.floatingDateAnimation;
                if (animatorSet2 != null) {
                    animatorSet2.cancel();
                    this.floatingDateAnimation = null;
                }
                this.floatingDateView.setAlpha(0.0f);
            }
            this.hideDateDelay = 500;
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onRemoveFromParent() {
        MessageObject messageObject = MediaController.getInstance().getPlayingMessageObject();
        if (messageObject != null && messageObject.isVideo()) {
            MediaController.getInstance().cleanupPlayer(true, true);
        } else {
            MediaController.getInstance().setTextureView(this.videoTextureView, null, null, false);
        }
    }

    public void setIgnoreAttachOnPause(boolean value) {
        this.ignoreAttachOnPause = value;
    }

    public ChatActivityEnterView getChatActivityEnterViewForStickers() {
        TLRPC.Chat chat;
        if (this.bottomOverlayChat.getVisibility() == 0 || ((chat = this.currentChat) != null && !ChatObject.canSendStickers(chat))) {
            return null;
        }
        return this.chatActivityEnterView;
    }

    public ChatActivityEnterView getChatActivityEnterView() {
        return this.chatActivityEnterView;
    }

    public boolean isKeyboardVisible() {
        return this.contentView.getKeyboardHeight() > AndroidUtilities.dp(20.0f);
    }

    public void checkScrollForLoad(boolean scroll) {
        int checkLoadCount;
        if (this.chatLayoutManager == null || this.paused || this.chatAdapter.isFrozen) {
            return;
        }
        int firstVisibleItem = this.chatLayoutManager.findFirstVisibleItemPosition();
        int visibleItemCount = firstVisibleItem == -1 ? 0 : Math.abs(this.chatLayoutManager.findLastVisibleItemPosition() - firstVisibleItem) + 1;
        int totalItemCount = this.chatAdapter.getItemCount();
        if (scroll) {
            checkLoadCount = 25;
        } else {
            checkLoadCount = 5;
        }
        if ((totalItemCount - firstVisibleItem) - visibleItemCount <= checkLoadCount && !this.loading) {
            boolean[] zArr = this.endReached;
            if (!zArr[0]) {
                this.loading = true;
                this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                if (this.messagesByDays.size() != 0) {
                    MessagesController messagesController = getMessagesController();
                    long j = this.dialog_id;
                    long j2 = this.mergeDialogId;
                    int i = this.maxMessageId[0];
                    boolean z = !this.cacheEndReached[0];
                    int i2 = this.minDate[0];
                    int i3 = this.classGuid;
                    int i4 = this.chatMode;
                    int i5 = this.threadMessageId;
                    int i6 = this.replyMaxReadId;
                    int i7 = this.lastLoadIndex;
                    this.lastLoadIndex = i7 + 1;
                    messagesController.loadMessages(j, j2, false, 50, i, 0, z, i2, i3, 0, 0, i4, i5, i6, i7);
                } else {
                    MessagesController messagesController2 = getMessagesController();
                    long j3 = this.dialog_id;
                    long j4 = this.mergeDialogId;
                    boolean z2 = !this.cacheEndReached[0];
                    int i8 = this.minDate[0];
                    int i9 = this.classGuid;
                    int i10 = this.chatMode;
                    int i11 = this.threadMessageId;
                    int i12 = this.replyMaxReadId;
                    int i13 = this.lastLoadIndex;
                    this.lastLoadIndex = i13 + 1;
                    messagesController2.loadMessages(j3, j4, false, 50, 0, 0, z2, i8, i9, 0, 0, i10, i11, i12, i13);
                }
            } else if (this.mergeDialogId != 0 && !zArr[1]) {
                this.loading = true;
                this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                MessagesController messagesController3 = getMessagesController();
                long j5 = this.mergeDialogId;
                int i14 = this.maxMessageId[1];
                boolean z3 = !this.cacheEndReached[1];
                int i15 = this.minDate[1];
                int i16 = this.classGuid;
                int i17 = this.chatMode;
                int i18 = this.threadMessageId;
                int i19 = this.replyMaxReadId;
                int i20 = this.lastLoadIndex;
                this.lastLoadIndex = i20 + 1;
                messagesController3.loadMessages(j5, 0L, false, 50, i14, 0, z3, i15, i16, 0, 0, i17, i18, i19, i20);
            }
        }
        if (visibleItemCount > 0 && !this.loadingForward && firstVisibleItem <= 10) {
            if (this.mergeDialogId != 0 && !this.forwardEndReached[1]) {
                this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                MessagesController messagesController4 = getMessagesController();
                long j6 = this.mergeDialogId;
                int i21 = this.minMessageId[1];
                int i22 = this.maxDate[1];
                int i23 = this.classGuid;
                int i24 = this.chatMode;
                int i25 = this.threadMessageId;
                int i26 = this.replyMaxReadId;
                int i27 = this.lastLoadIndex;
                this.lastLoadIndex = i27 + 1;
                messagesController4.loadMessages(j6, 0L, false, 50, i21, 0, true, i22, i23, 1, 0, i24, i25, i26, i27);
                this.loadingForward = true;
            } else if (!this.forwardEndReached[0]) {
                this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
                MessagesController messagesController5 = getMessagesController();
                long j7 = this.dialog_id;
                long j8 = this.mergeDialogId;
                int i28 = this.minMessageId[0];
                int i29 = this.maxDate[0];
                int i30 = this.classGuid;
                int i31 = this.chatMode;
                int i32 = this.threadMessageId;
                int i33 = this.replyMaxReadId;
                int i34 = this.lastLoadIndex;
                this.lastLoadIndex = i34 + 1;
                messagesController5.loadMessages(j7, j8, false, 50, i28, 0, true, i29, i30, 1, 0, i31, i32, i33, i34);
                this.loadingForward = true;
            }
        }
    }

    public void processSelectedAttach(int which) {
        boolean allowGifs;
        boolean z = false;
        if (which == 0) {
            if (Build.VERSION.SDK_INT >= 23 && getParentActivity().checkSelfPermission("android.permission.CAMERA") != 0) {
                getParentActivity().requestPermissions(new String[]{"android.permission.CAMERA"}, 19);
                return;
            }
            try {
                Intent takePictureIntent = new Intent("android.media.action.IMAGE_CAPTURE");
                File image = AndroidUtilities.generatePicturePath();
                if (image != null) {
                    if (Build.VERSION.SDK_INT >= 24) {
                        takePictureIntent.putExtra("output", FileProvider.getUriForFile(getParentActivity(), "org.telegram.messenger.beta.provider", image));
                        takePictureIntent.addFlags(2);
                        takePictureIntent.addFlags(1);
                    } else {
                        takePictureIntent.putExtra("output", Uri.fromFile(image));
                    }
                    this.currentPicturePath = image.getAbsolutePath();
                }
                startActivityForResult(takePictureIntent, 0);
            } catch (Exception e) {
                FileLog.e(e);
            }
        } else if (which == 1) {
            if (Build.VERSION.SDK_INT >= 23 && getParentActivity().checkSelfPermission("android.permission.READ_EXTERNAL_STORAGE") != 0) {
                try {
                    getParentActivity().requestPermissions(new String[]{"android.permission.READ_EXTERNAL_STORAGE"}, 4);
                    return;
                } catch (Throwable th) {
                    return;
                }
            }
            if (ChatObject.isChannel(this.currentChat) && this.currentChat.banned_rights != null && this.currentChat.banned_rights.send_gifs) {
                allowGifs = false;
            } else {
                allowGifs = true;
            }
            PhotoAlbumPickerActivity fragment = new PhotoAlbumPickerActivity(PhotoAlbumPickerActivity.SELECT_TYPE_ALL, allowGifs, true, this);
            TLRPC.Chat chat = this.currentChat;
            if (chat != null && !ChatObject.hasAdminRights(chat) && this.currentChat.slowmode_enabled) {
                fragment.setMaxSelectedPhotos(10, true);
            } else {
                MessageObject messageObject = this.editingMessageObject;
                int i = messageObject != null ? 1 : 0;
                if (messageObject == null) {
                    z = true;
                }
                fragment.setMaxSelectedPhotos(i, z);
            }
            fragment.setDelegate(new PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate() { // from class: org.telegram.ui.ChatActivity.72
                @Override // org.telegram.ui.PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate
                public void didSelectPhotos(ArrayList<SendMessagesHelper.SendingMediaInfo> photos, boolean notify, int scheduleDate) {
                }

                @Override // org.telegram.ui.PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate
                public void startPhotoSelectActivity() {
                    try {
                        Intent videoPickerIntent = new Intent();
                        videoPickerIntent.setType("video/*");
                        videoPickerIntent.setAction("android.intent.action.GET_CONTENT");
                        videoPickerIntent.putExtra("android.intent.extra.sizeLimit", FileLoader.DEFAULT_MAX_FILE_SIZE);
                        Intent photoPickerIntent = new Intent("android.intent.action.PICK");
                        photoPickerIntent.setType("image/*");
                        Intent chooserIntent = Intent.createChooser(photoPickerIntent, null);
                        chooserIntent.putExtra("android.intent.extra.INITIAL_INTENTS", new Intent[]{videoPickerIntent});
                        ChatActivity.this.startActivityForResult(chooserIntent, 1);
                    } catch (Exception e2) {
                        FileLog.e(e2);
                    }
                }
            });
            presentFragment(fragment);
        } else if (which == 2) {
            if (Build.VERSION.SDK_INT >= 23 && getParentActivity().checkSelfPermission("android.permission.CAMERA") != 0) {
                try {
                    getParentActivity().requestPermissions(new String[]{"android.permission.CAMERA"}, 20);
                    return;
                } catch (Throwable th2) {
                    return;
                }
            }
            try {
                Intent takeVideoIntent = new Intent("android.media.action.VIDEO_CAPTURE");
                File video = AndroidUtilities.generateVideoPath();
                if (video != null) {
                    if (Build.VERSION.SDK_INT >= 24) {
                        takeVideoIntent.putExtra("output", FileProvider.getUriForFile(getParentActivity(), "org.telegram.messenger.beta.provider", video));
                        takeVideoIntent.addFlags(2);
                        takeVideoIntent.addFlags(1);
                    } else if (Build.VERSION.SDK_INT >= 18) {
                        takeVideoIntent.putExtra("output", Uri.fromFile(video));
                    }
                    takeVideoIntent.putExtra("android.intent.extra.sizeLimit", FileLoader.DEFAULT_MAX_FILE_SIZE);
                    this.currentPicturePath = video.getAbsolutePath();
                }
                startActivityForResult(takeVideoIntent, 2);
            } catch (Exception e2) {
                FileLog.e(e2);
            }
        }
    }

    public boolean allowSendGifs() {
        if (ChatObject.isChannel(this.currentChat) && this.currentChat.banned_rights != null && this.currentChat.banned_rights.send_gifs) {
            return false;
        }
        return true;
    }

    public void openPollCreate(Boolean quiz) {
        PollCreateActivity pollCreateActivity = new PollCreateActivity(this, quiz);
        pollCreateActivity.setDelegate(new PollCreateActivity.PollCreateActivityDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda174
            @Override // org.telegram.ui.PollCreateActivity.PollCreateActivityDelegate
            public final void sendPoll(TLRPC.TL_messageMediaPoll tL_messageMediaPoll, HashMap hashMap, boolean z, int i) {
                ChatActivity.this.m1901lambda$openPollCreate$93$orgtelegramuiChatActivity(tL_messageMediaPoll, hashMap, z, i);
            }
        });
        presentFragment(pollCreateActivity);
    }

    /* renamed from: lambda$openPollCreate$93$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1901lambda$openPollCreate$93$orgtelegramuiChatActivity(TLRPC.TL_messageMediaPoll poll, HashMap params, boolean notify, int scheduleDate) {
        getSendMessagesHelper().sendMessage(poll, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC.ReplyMarkup) null, (HashMap<String, String>) params, notify, scheduleDate);
        afterMessageSend();
    }

    @Override // org.telegram.ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public void didSelectFiles(ArrayList<String> files, String caption, ArrayList<MessageObject> fmessages, boolean notify, int scheduleDate) {
        String caption2;
        fillEditingMediaWithCaption(caption, null);
        if (!fmessages.isEmpty() && !TextUtils.isEmpty(caption)) {
            SendMessagesHelper.getInstance(this.currentAccount).sendMessage(caption, this.dialog_id, null, null, null, true, null, null, null, true, 0, null);
            caption2 = null;
        } else {
            caption2 = caption;
        }
        getSendMessagesHelper().sendMessage(fmessages, this.dialog_id, false, false, true, 0);
        SendMessagesHelper.prepareSendingDocuments(getAccountInstance(), files, files, null, caption2, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, this.editingMessageObject, notify, scheduleDate);
        afterMessageSend();
    }

    @Override // org.telegram.ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public void didSelectPhotos(ArrayList<SendMessagesHelper.SendingMediaInfo> photos, boolean notify, int scheduleDate) {
        fillEditingMediaWithCaption(photos.get(0).caption, photos.get(0).entities);
        SendMessagesHelper.prepareSendingMedia(getAccountInstance(), photos, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, true, false, this.editingMessageObject, notify, scheduleDate);
        afterMessageSend();
        if (scheduleDate != 0) {
            if (this.scheduledMessagesCount == -1) {
                this.scheduledMessagesCount = 0;
            }
            this.scheduledMessagesCount += photos.size();
            updateScheduledInterface(true);
        }
    }

    public void didSelectSearchPhotos(ArrayList<SendMessagesHelper.SendingMediaInfo> photos, boolean notify, int scheduleDate) {
        boolean hasNoGifs;
        if (photos.isEmpty()) {
            return;
        }
        int a = 0;
        while (true) {
            if (a >= photos.size()) {
                hasNoGifs = false;
                break;
            }
            SendMessagesHelper.SendingMediaInfo info = photos.get(a);
            if (info.inlineResult != null || info.videoEditedInfo != null) {
                a++;
            } else {
                hasNoGifs = true;
                break;
            }
        }
        if (!hasNoGifs && !TextUtils.isEmpty(photos.get(0).caption)) {
            SendMessagesHelper.getInstance(this.currentAccount).sendMessage(photos.get(0).caption, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, false, photos.get(0).entities, null, null, notify, scheduleDate, null);
        }
        int a2 = 0;
        while (a2 < photos.size()) {
            SendMessagesHelper.SendingMediaInfo info2 = photos.get(a2);
            if (info2.inlineResult != null && info2.videoEditedInfo == null) {
                SendMessagesHelper.prepareSendingBotContextResult(getAccountInstance(), info2.inlineResult, info2.params, this.dialog_id, this.replyingMessageObject, getThreadMessage(), notify, scheduleDate);
                photos.remove(a2);
                a2--;
            }
            a2++;
        }
        if (!photos.isEmpty()) {
            fillEditingMediaWithCaption(photos.get(0).caption, photos.get(0).entities);
            SendMessagesHelper.prepareSendingMedia(getAccountInstance(), photos, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, false, true, this.editingMessageObject, notify, scheduleDate);
            afterMessageSend();
            if (scheduleDate != 0) {
                if (this.scheduledMessagesCount == -1) {
                    this.scheduledMessagesCount = 0;
                }
                this.scheduledMessagesCount += photos.size();
                updateScheduledInterface(true);
            }
        }
    }

    @Override // org.telegram.ui.Components.ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate
    public void startDocumentSelectActivity() {
        try {
            Intent photoPickerIntent = new Intent("android.intent.action.GET_CONTENT");
            if (Build.VERSION.SDK_INT >= 18) {
                photoPickerIntent.putExtra("android.intent.extra.ALLOW_MULTIPLE", true);
            }
            photoPickerIntent.setType("*/*");
            startActivityForResult(photoPickerIntent, 21);
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean dismissDialogOnPause(Dialog dialog) {
        return dialog != this.chatAttachAlert && super.dismissDialogOnPause(dialog);
    }

    public void searchLinks(final CharSequence charSequence, final boolean force) {
        TLRPC.WebPage webPage;
        if (this.currentEncryptedChat == null || getMessagesController().secretWebpagePreview != 0) {
            MessageObject messageObject = this.editingMessageObject;
            if (messageObject != null && !messageObject.isWebpage()) {
                return;
            }
            if (force && (webPage = this.foundWebPage) != null) {
                if (webPage.url != null) {
                    int index = TextUtils.indexOf(charSequence, this.foundWebPage.url);
                    char lastChar = 0;
                    boolean lenEqual = false;
                    boolean z = true;
                    if (index == -1) {
                        if (this.foundWebPage.display_url != null) {
                            index = TextUtils.indexOf(charSequence, this.foundWebPage.display_url);
                            if (index == -1 || this.foundWebPage.display_url.length() + index != charSequence.length()) {
                                z = false;
                            }
                            lenEqual = z;
                            lastChar = (index == -1 || lenEqual) ? (char) 0 : charSequence.charAt(this.foundWebPage.display_url.length() + index);
                        }
                    } else {
                        if (this.foundWebPage.url.length() + index != charSequence.length()) {
                            z = false;
                        }
                        lenEqual = z;
                        lastChar = !lenEqual ? charSequence.charAt(this.foundWebPage.url.length() + index) : (char) 0;
                    }
                    if (index != -1 && (lenEqual || lastChar == ' ' || lastChar == ',' || lastChar == '.' || lastChar == '!' || lastChar == '/')) {
                        return;
                    }
                }
                this.pendingLinkSearchString = null;
                this.foundUrls = null;
                showFieldPanelForWebPage(false, this.foundWebPage, false);
            }
            final MessagesController messagesController = getMessagesController();
            Utilities.searchQueue.postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda78
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1935lambda$searchLinks$100$orgtelegramuiChatActivity(charSequence, messagesController, force);
                }
            });
        }
    }

    /* renamed from: lambda$searchLinks$100$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1935lambda$searchLinks$100$orgtelegramuiChatActivity(final CharSequence charSequence, final MessagesController messagesController, final boolean force) {
        CharSequence textToCheck;
        URLSpanReplacement[] spans;
        if (this.linkSearchRequestId != 0) {
            getConnectionsManager().cancelRequest(this.linkSearchRequestId, true);
            this.linkSearchRequestId = 0;
        }
        ArrayList<CharSequence> urls = null;
        try {
            Matcher m = AndroidUtilities.WEB_URL.matcher(charSequence);
            while (m.find()) {
                if (m.start() <= 0 || charSequence.charAt(m.start() - 1) != '@') {
                    if (urls == null) {
                        urls = new ArrayList<>();
                    }
                    urls.add(charSequence.subSequence(m.start(), m.end()));
                }
            }
            if ((charSequence instanceof Spannable) && (spans = (URLSpanReplacement[]) ((Spannable) charSequence).getSpans(0, charSequence.length(), URLSpanReplacement.class)) != null && spans.length > 0) {
                if (urls == null) {
                    urls = new ArrayList<>();
                }
                for (URLSpanReplacement uRLSpanReplacement : spans) {
                    urls.add(uRLSpanReplacement.getURL());
                }
            }
            if (urls != null && this.foundUrls != null && urls.size() == this.foundUrls.size()) {
                boolean clear = true;
                for (int a = 0; a < urls.size(); a++) {
                    if (!TextUtils.equals(urls.get(a), this.foundUrls.get(a))) {
                        clear = false;
                    }
                }
                if (clear) {
                    return;
                }
            }
            this.foundUrls = urls;
        } catch (Exception e) {
            FileLog.e(e);
            String text = charSequence.toString().toLowerCase();
            if (charSequence.length() < 13 || (!text.contains("http://") && !text.contains("https://"))) {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda53
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.m1937lambda$searchLinks$95$orgtelegramuiChatActivity();
                    }
                });
                return;
            }
            textToCheck = charSequence;
        }
        if (urls == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda52
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1936lambda$searchLinks$94$orgtelegramuiChatActivity();
                }
            });
            return;
        }
        textToCheck = TextUtils.join(" ", urls);
        if (this.currentEncryptedChat != null && messagesController.secretWebpagePreview == 2) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda86
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1939lambda$searchLinks$97$orgtelegramuiChatActivity(messagesController, charSequence, force);
                }
            });
            return;
        }
        final TLRPC.TL_messages_getWebPagePreview req = new TLRPC.TL_messages_getWebPagePreview();
        if (textToCheck instanceof String) {
            req.message = (String) textToCheck;
        } else {
            req.message = textToCheck.toString();
        }
        this.linkSearchRequestId = getConnectionsManager().sendRequest(req, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda140
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                ChatActivity.this.m1941lambda$searchLinks$99$orgtelegramuiChatActivity(req, tLObject, tL_error);
            }
        });
        getConnectionsManager().bindRequestToGuid(this.linkSearchRequestId, this.classGuid);
    }

    /* renamed from: lambda$searchLinks$94$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1936lambda$searchLinks$94$orgtelegramuiChatActivity() {
        TLRPC.WebPage webPage = this.foundWebPage;
        if (webPage != null) {
            showFieldPanelForWebPage(false, webPage, false);
            this.foundWebPage = null;
        }
    }

    /* renamed from: lambda$searchLinks$95$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1937lambda$searchLinks$95$orgtelegramuiChatActivity() {
        TLRPC.WebPage webPage = this.foundWebPage;
        if (webPage != null) {
            showFieldPanelForWebPage(false, webPage, false);
            this.foundWebPage = null;
        }
    }

    /* renamed from: lambda$searchLinks$97$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1939lambda$searchLinks$97$orgtelegramuiChatActivity(final MessagesController messagesController, final CharSequence charSequence, final boolean force) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda190
            @Override // android.content.DialogInterface.OnClickListener
            public final void onClick(DialogInterface dialogInterface, int i) {
                ChatActivity.this.m1938lambda$searchLinks$96$orgtelegramuiChatActivity(messagesController, charSequence, force, dialogInterface, i);
            }
        });
        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
        builder.setMessage(LocaleController.getString("SecretLinkPreviewAlert", R.string.SecretLinkPreviewAlert));
        showDialog(builder.create());
        messagesController.secretWebpagePreview = 0;
        MessagesController.getGlobalMainSettings().edit().putInt("secretWebpage2", messagesController.secretWebpagePreview).commit();
    }

    /* renamed from: lambda$searchLinks$96$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1938lambda$searchLinks$96$orgtelegramuiChatActivity(MessagesController messagesController, CharSequence charSequence, boolean force, DialogInterface dialog, int which) {
        messagesController.secretWebpagePreview = 1;
        MessagesController.getGlobalMainSettings().edit().putInt("secretWebpage2", getMessagesController().secretWebpagePreview).commit();
        this.foundUrls = null;
        searchLinks(charSequence, force);
    }

    /* renamed from: lambda$searchLinks$99$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1941lambda$searchLinks$99$orgtelegramuiChatActivity(final TLRPC.TL_messages_getWebPagePreview req, final TLObject response, final TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda100
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1940lambda$searchLinks$98$orgtelegramuiChatActivity(error, response, req);
            }
        });
    }

    /* renamed from: lambda$searchLinks$98$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1940lambda$searchLinks$98$orgtelegramuiChatActivity(TLRPC.TL_error error, TLObject response, TLRPC.TL_messages_getWebPagePreview req) {
        this.linkSearchRequestId = 0;
        if (error == null) {
            if (response instanceof TLRPC.TL_messageMediaWebPage) {
                TLRPC.WebPage webPage = ((TLRPC.TL_messageMediaWebPage) response).webpage;
                this.foundWebPage = webPage;
                if ((webPage instanceof TLRPC.TL_webPage) || (webPage instanceof TLRPC.TL_webPagePending)) {
                    if (webPage instanceof TLRPC.TL_webPagePending) {
                        this.pendingLinkSearchString = req.message;
                    }
                    if (this.currentEncryptedChat != null) {
                        TLRPC.WebPage webPage2 = this.foundWebPage;
                        if (webPage2 instanceof TLRPC.TL_webPagePending) {
                            webPage2.url = req.message;
                        }
                    }
                    showFieldPanelForWebPage(true, this.foundWebPage, false);
                    return;
                } else if (webPage != null) {
                    showFieldPanelForWebPage(false, webPage, false);
                    this.foundWebPage = null;
                    return;
                } else {
                    return;
                }
            }
            TLRPC.WebPage webPage3 = this.foundWebPage;
            if (webPage3 != null) {
                showFieldPanelForWebPage(false, webPage3, false);
                this.foundWebPage = null;
            }
        }
    }

    private void forwardMessages(ArrayList<MessageObject> arrayList, boolean fromMyName, boolean hideCaption, boolean notify, int scheduleDate) {
        if (arrayList == null || arrayList.isEmpty()) {
            return;
        }
        boolean z = false;
        boolean z2 = scheduleDate != 0;
        if (this.chatMode == 1) {
            z = true;
        }
        if (z2 == z) {
            this.waitingForSendingMessageLoad = true;
        }
        int result = getSendMessagesHelper().sendMessage(arrayList, this.dialog_id, fromMyName, hideCaption, notify, scheduleDate);
        AlertsCreator.showSendMediaAlert(result, this, this.themeDelegate);
        if (result != 0) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda38
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1861lambda$forwardMessages$101$orgtelegramuiChatActivity();
                }
            });
        }
    }

    /* renamed from: lambda$forwardMessages$101$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1861lambda$forwardMessages$101$orgtelegramuiChatActivity() {
        this.waitingForSendingMessageLoad = false;
        hideFieldPanel(true);
    }

    public boolean shouldShowImport() {
        return this.openImport;
    }

    public void setOpenImport() {
        this.openImport = true;
    }

    private void checkBotKeyboard() {
        MessageObject messageObject;
        if (this.chatActivityEnterView == null || (messageObject = this.botButtons) == null || this.userBlocked) {
            return;
        }
        if (messageObject.messageOwner.reply_markup instanceof TLRPC.TL_replyKeyboardForceReply) {
            SharedPreferences preferences = MessagesController.getMainSettings(this.currentAccount);
            if (preferences.getInt("answered_" + this.dialog_id, 0) == this.botButtons.getId()) {
                return;
            }
            if (this.replyingMessageObject == null || this.chatActivityEnterView.getFieldText() == null) {
                MessageObject messageObject2 = this.botButtons;
                this.botReplyButtons = messageObject2;
                this.chatActivityEnterView.setButtons(messageObject2);
                showFieldPanelForReply(this.botButtons);
                return;
            }
            return;
        }
        MessageObject messageObject3 = this.replyingMessageObject;
        if (messageObject3 != null && this.botReplyButtons == messageObject3) {
            this.botReplyButtons = null;
            hideFieldPanel(true);
        }
        this.chatActivityEnterView.setButtons(this.botButtons);
    }

    public void hideFieldPanel(boolean animated) {
        showFieldPanel(false, null, null, null, null, true, 0, false, animated);
    }

    public void hideFieldPanel(boolean notify, int scheduleDate, boolean animated) {
        showFieldPanel(false, null, null, null, null, notify, scheduleDate, false, animated);
    }

    public void showFieldPanelForWebPage(boolean show, TLRPC.WebPage webPage, boolean cancel) {
        showFieldPanel(show, null, null, null, webPage, true, 0, cancel, true);
    }

    public void showFieldPanelForForward(boolean show, ArrayList<MessageObject> messageObjectsToForward) {
        showFieldPanel(show, null, null, messageObjectsToForward, null, true, 0, false, true);
    }

    public void showFieldPanelForReply(MessageObject messageObjectToReply) {
        showFieldPanel(true, messageObjectToReply, null, null, null, true, 0, false, true);
    }

    public void showFieldPanelForEdit(boolean show, MessageObject messageObjectToEdit) {
        showFieldPanel(show, null, messageObjectToEdit, null, null, true, 0, false, true);
    }

    /* JADX WARN: Removed duplicated region for block: B:290:0x06c9  */
    /* JADX WARN: Removed duplicated region for block: B:291:0x06d9  */
    /* JADX WARN: Removed duplicated region for block: B:313:0x075b  */
    /* JADX WARN: Removed duplicated region for block: B:363:0x0879  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void showFieldPanel(boolean r31, org.telegram.messenger.MessageObject r32, org.telegram.messenger.MessageObject r33, java.util.ArrayList<org.telegram.messenger.MessageObject> r34, org.telegram.tgnet.TLRPC.WebPage r35, boolean r36, int r37, boolean r38, boolean r39) {
        /*
            Method dump skipped, instructions count: 2613
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.showFieldPanel(boolean, org.telegram.messenger.MessageObject, org.telegram.messenger.MessageObject, java.util.ArrayList, org.telegram.tgnet.TLRPC$WebPage, boolean, int, boolean, boolean):void");
    }

    /* renamed from: lambda$showFieldPanel$102$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1948lambda$showFieldPanel$102$orgtelegramuiChatActivity() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.openKeyboard();
        }
    }

    /* renamed from: lambda$showFieldPanel$103$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1949lambda$showFieldPanel$103$orgtelegramuiChatActivity() {
        this.showTapForForwardingOptionsHit = !this.showTapForForwardingOptionsHit;
        this.replyObjectTextView.setPivotX(0.0f);
        this.replyObjectHintTextView.setPivotX(0.0f);
        if (this.showTapForForwardingOptionsHit) {
            this.replyObjectTextView.animate().alpha(0.0f).scaleX(0.98f).scaleY(0.98f).setDuration(150L).start();
            this.replyObjectHintTextView.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f).setDuration(150L).start();
        } else {
            this.replyObjectTextView.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f).setDuration(150L).start();
            this.replyObjectHintTextView.animate().alpha(0.0f).scaleX(0.98f).scaleY(0.98f).setDuration(150L).start();
        }
        AndroidUtilities.runOnUIThread(this.tapForForwardingOptionsHitRunnable, 6000L);
    }

    private void moveScrollToLastMessage(boolean skipSponsored) {
        if (this.chatListView != null && !this.messages.isEmpty() && !this.pinchToZoomHelper.isInOverlayMode()) {
            int position = 0;
            if (skipSponsored) {
                position = 0 + getSponsoredMessagesCount();
            }
            this.chatLayoutManager.scrollToPositionWithOffset(position, 0);
            this.chatListView.stopScroll();
        }
    }

    public Runnable sendSecretMessageRead(final MessageObject messageObject, boolean readNow) {
        if (messageObject == null || messageObject.isOut() || !messageObject.isSecretMedia() || messageObject.messageOwner.destroyTime != 0 || messageObject.messageOwner.ttl <= 0) {
            return null;
        }
        messageObject.messageOwner.destroyTime = messageObject.messageOwner.ttl + getConnectionsManager().getCurrentTime();
        if (!readNow) {
            return new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda81
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1942lambda$sendSecretMessageRead$104$orgtelegramuiChatActivity(messageObject);
                }
            };
        }
        if (this.currentEncryptedChat != null) {
            getMessagesController().markMessageAsRead(this.dialog_id, messageObject.messageOwner.random_id, messageObject.messageOwner.ttl);
        } else {
            getMessagesController().markMessageAsRead2(this.dialog_id, messageObject.getId(), null, messageObject.messageOwner.ttl, 0L);
        }
        return null;
    }

    /* renamed from: lambda$sendSecretMessageRead$104$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1942lambda$sendSecretMessageRead$104$orgtelegramuiChatActivity(MessageObject messageObject) {
        if (this.currentEncryptedChat != null) {
            getMessagesController().markMessageAsRead(this.dialog_id, messageObject.messageOwner.random_id, messageObject.messageOwner.ttl);
        } else {
            getMessagesController().markMessageAsRead2(this.dialog_id, messageObject.getId(), null, messageObject.messageOwner.ttl, 0L);
        }
    }

    private void clearChatData() {
        this.messages.clear();
        this.messagesByDays.clear();
        this.waitingForLoad.clear();
        this.groupedMessagesMap.clear();
        this.threadMessageAdded = false;
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter != null) {
            showProgressView(chatActivityAdapter.botInfoRow < 0);
        }
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            recyclerListView.setEmptyView(null);
        }
        for (int a = 0; a < 2; a++) {
            this.messagesDict[a].clear();
            if (this.currentEncryptedChat == null) {
                this.maxMessageId[a] = Integer.MAX_VALUE;
                this.minMessageId[a] = Integer.MIN_VALUE;
            } else {
                this.maxMessageId[a] = Integer.MIN_VALUE;
                this.minMessageId[a] = Integer.MAX_VALUE;
            }
            this.maxDate[a] = Integer.MIN_VALUE;
            this.minDate[a] = 0;
            this.endReached[a] = false;
            this.cacheEndReached[a] = false;
            this.forwardEndReached[a] = true;
        }
        this.first = true;
        this.firstLoading = true;
        this.loading = true;
        this.loadingForward = false;
        this.waitingForReplyMessageLoad = false;
        this.startLoadFromMessageId = 0;
        this.showScrollToMessageError = false;
        this.last_message_id = 0;
        this.unreadMessageObject = null;
        this.createUnreadMessageAfterId = 0;
        this.createUnreadMessageAfterIdLoading = false;
        this.needSelectFromMessageId = false;
        ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
        if (chatActivityAdapter2 != null) {
            chatActivityAdapter2.notifyDataSetChanged(false);
        }
    }

    public void scrollToLastMessage(boolean skipSponsored) {
        if (!this.chatListView.isFastScrollAnimationRunning()) {
            this.forceNextPinnedMessageId = 0;
            this.nextScrollToMessageId = 0;
            this.forceScrollToFirst = false;
            this.chatScrollHelper.setScrollDirection(0);
            if (this.forwardEndReached[0] && this.first_unread_id == 0 && this.startLoadFromMessageId == 0) {
                if (this.chatLayoutManager.findFirstCompletelyVisibleItemPosition() == 0) {
                    this.canShowPagedownButton = false;
                    updatePagedownButtonVisibility(true);
                    removeSelectedMessageHighlight();
                    updateVisibleRows();
                    return;
                }
                this.chatAdapter.updateRowsSafe();
                this.chatScrollHelperCallback.scrollTo = null;
                int position = 0;
                if (skipSponsored) {
                    while (position < this.messages.size() && this.messages.get(position).isSponsored()) {
                        position++;
                    }
                }
                this.chatScrollHelper.scrollToPosition(position, 0, true, true);
                return;
            }
            AlertDialog alertDialog = this.progressDialog;
            if (alertDialog != null) {
                alertDialog.dismiss();
            }
            updatePinnedListButton(false);
            AlertDialog alertDialog2 = new AlertDialog(getParentActivity(), 3, this.themeDelegate);
            this.progressDialog = alertDialog2;
            alertDialog2.setOnCancelListener(this.postponedScrollCancelListener);
            this.progressDialog.showDelayed(1000L);
            this.postponedScrollToLastMessageQueryIndex = this.lastLoadIndex;
            this.postponedScrollMessageId = 0;
            this.postponedScrollIsCanceled = false;
            this.waitingForLoad.clear();
            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
            MessagesController messagesController = getMessagesController();
            long j = this.dialog_id;
            long j2 = this.mergeDialogId;
            int i = this.classGuid;
            int i2 = this.chatMode;
            int i3 = this.threadMessageId;
            int i4 = this.replyMaxReadId;
            int i5 = this.lastLoadIndex;
            this.lastLoadIndex = i5 + 1;
            messagesController.loadMessages(j, j2, false, 30, 0, 0, true, 0, i, 0, 0, i2, i3, i4, i5);
        }
    }

    public void updateTextureViewPosition(boolean needScroll) {
        MessageObject messageObject;
        if (this.fragmentView == null || this.paused) {
            return;
        }
        boolean foundTextureViewMessage = false;
        int count = this.chatListView.getChildCount();
        int a = 0;
        while (true) {
            if (a >= count) {
                break;
            }
            View view = this.chatListView.getChildAt(a);
            if (view instanceof ChatMessageCell) {
                ChatMessageCell messageCell = (ChatMessageCell) view;
                MessageObject messageObject2 = messageCell.getMessageObject();
                if (this.videoPlayerContainer != null && ((messageObject2.isRoundVideo() || messageObject2.isVideo()) && MediaController.getInstance().isPlayingMessage(messageObject2))) {
                    ImageReceiver imageReceiver = messageCell.getPhotoImage();
                    this.videoPlayerContainer.setTranslationX(imageReceiver.getImageX() + messageCell.getX());
                    float translationY = ((messageCell.getY() + imageReceiver.getImageY()) + this.chatListView.getY()) - this.videoPlayerContainer.getTop();
                    this.videoPlayerContainer.setTranslationY(translationY);
                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) this.videoPlayerContainer.getLayoutParams();
                    if (messageObject2.isRoundVideo()) {
                        this.videoPlayerContainer.setTag(R.id.parent_tag, null);
                        if (layoutParams.width != AndroidUtilities.roundPlayingMessageSize || layoutParams.height != AndroidUtilities.roundPlayingMessageSize) {
                            int i = AndroidUtilities.roundPlayingMessageSize;
                            layoutParams.height = i;
                            layoutParams.width = i;
                            this.aspectRatioFrameLayout.setResizeMode(0);
                            this.videoPlayerContainer.setLayoutParams(layoutParams);
                        }
                        float scale = (AndroidUtilities.roundPlayingMessageSize + (AndroidUtilities.roundMessageInset * 2)) / AndroidUtilities.roundPlayingMessageSize;
                        float transitionScale = messageCell.getPhotoImage().getImageWidth() / AndroidUtilities.roundPlayingMessageSize;
                        if (this.videoPlayerContainer.getScaleX() != transitionScale) {
                            this.videoPlayerContainer.invalidate();
                            this.fragmentView.invalidate();
                        }
                        this.videoPlayerContainer.setPivotX(0.0f);
                        this.videoPlayerContainer.setPivotY(0.0f);
                        this.videoPlayerContainer.setScaleX(transitionScale);
                        this.videoPlayerContainer.setScaleY(transitionScale);
                        this.videoTextureView.setScaleX(scale);
                        this.videoTextureView.setScaleY(scale);
                    } else {
                        this.videoPlayerContainer.setTag(R.id.parent_tag, imageReceiver);
                        if (layoutParams.width != imageReceiver.getImageWidth() || layoutParams.height != imageReceiver.getImageHeight()) {
                            this.aspectRatioFrameLayout.setResizeMode(3);
                            layoutParams.width = (int) imageReceiver.getImageWidth();
                            layoutParams.height = (int) imageReceiver.getImageHeight();
                            this.videoPlayerContainer.setLayoutParams(layoutParams);
                        }
                        this.videoTextureView.setScaleX(1.0f);
                        this.videoTextureView.setScaleY(1.0f);
                    }
                    this.fragmentView.invalidate();
                    this.videoPlayerContainer.invalidate();
                    foundTextureViewMessage = true;
                }
            }
            a++;
        }
        if (!needScroll || this.videoPlayerContainer == null || (messageObject = MediaController.getInstance().getPlayingMessageObject()) == null || messageObject.eventId != 0) {
            return;
        }
        if (foundTextureViewMessage) {
            MediaController.getInstance().setCurrentVideoVisible(true);
            if (!messageObject.isRoundVideo() && !this.scrollToVideo) {
                this.chatListView.invalidate();
            }
        } else if (this.checkTextureViewPosition && messageObject.isVideo()) {
            MediaController.getInstance().cleanupPlayer(true, true);
        } else {
            this.videoPlayerContainer.setTranslationY((-AndroidUtilities.roundPlayingMessageSize) - 100);
            this.fragmentView.invalidate();
            if (messageObject.isRoundVideo() || messageObject.isVideo()) {
                if (this.checkTextureViewPosition || PipRoundVideoView.getInstance() != null) {
                    MediaController.getInstance().setCurrentVideoVisible(false);
                } else {
                    scrollToMessageId(messageObject.getId(), 0, false, 0, true, 0);
                }
            }
        }
    }

    public void invalidateMessagesVisiblePart() {
        this.invalidateMessagesVisiblePart = true;
        if (this.fragmentView != null) {
            this.fragmentView.invalidate();
        }
    }

    private Integer findClosest(ArrayList<Integer> arrayList, int target, int[] index) {
        if (arrayList.isEmpty()) {
            return 0;
        }
        Integer val = arrayList.get(0);
        if (target >= val.intValue()) {
            index[0] = 0;
            return val;
        }
        int n = arrayList.size();
        Integer val2 = arrayList.get(n - 1);
        if (target <= val2.intValue()) {
            index[0] = n - 1;
            return val2;
        }
        int i = 0;
        int j = n;
        int mid = 0;
        while (i < j) {
            mid = (i + j) / 2;
            Integer val3 = arrayList.get(mid);
            if (val3.intValue() == target) {
                index[0] = mid;
                return val3;
            } else if (target < val3.intValue()) {
                if (mid > 0) {
                    Integer val22 = arrayList.get(mid - 1);
                    if (target > val22.intValue()) {
                        index[0] = mid - 1;
                        return val22;
                    }
                }
                i = mid + 1;
            } else if (mid > 0 && target < arrayList.get(mid - 1).intValue()) {
                index[0] = mid;
                return val3;
            } else {
                j = mid;
            }
        }
        index[0] = mid;
        return arrayList.get(mid);
    }

    /* JADX WARN: Removed duplicated region for block: B:133:0x033b  */
    /* JADX WARN: Removed duplicated region for block: B:148:0x0439  */
    /* JADX WARN: Removed duplicated region for block: B:153:0x044b  */
    /* JADX WARN: Removed duplicated region for block: B:156:0x0455  */
    /* JADX WARN: Removed duplicated region for block: B:159:0x045d  */
    /* JADX WARN: Removed duplicated region for block: B:302:0x073e  */
    /* JADX WARN: Removed duplicated region for block: B:305:0x0751  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void updateMessagesVisiblePart(boolean r63) {
        /*
            Method dump skipped, instructions count: 3233
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.updateMessagesVisiblePart(boolean):void");
    }

    /* renamed from: lambda$updateMessagesVisiblePart$105$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1975xf8c4a93c(MessageObject finalMessage) {
        if (finalMessage.isVideo()) {
            openPhotoViewerForMessage(null, finalMessage);
        } else {
            MediaController.getInstance().playMessage(finalMessage);
        }
    }

    public void inlineUpdate1() {
        int i = this.prevSetUnreadCount;
        int i2 = this.newUnreadMessageCount;
        if (i != i2) {
            this.prevSetUnreadCount = i2;
            this.pagedownButtonCounter.setCount(i2, this.openAnimationEnded);
        }
    }

    public void inlineUpdate2() {
        int i = this.prevSetUnreadCount;
        int i2 = this.newUnreadMessageCount;
        if (i != i2) {
            this.prevSetUnreadCount = i2;
            this.pagedownButtonCounter.setCount(i2, true);
        }
    }

    public void toggleMute(boolean instant) {
        boolean muted = getMessagesController().isDialogMuted(this.dialog_id);
        if (!muted) {
            if (instant) {
                getNotificationsController().muteDialog(this.dialog_id, true);
                return;
            }
            BottomSheet alert = AlertsCreator.createMuteAlert(this, this.dialog_id, this.themeDelegate);
            alert.setCalcMandatoryInsets(isKeyboardVisible());
            showDialog(alert);
            return;
        }
        getNotificationsController().muteDialog(this.dialog_id, false);
        if (!instant) {
            BulletinFactory.createMuteBulletin(this, false, this.themeDelegate).show();
        }
    }

    private int getScrollOffsetForMessage(MessageObject object) {
        return getScrollOffsetForMessage(getHeightForMessage(object));
    }

    private int getScrollOffsetForMessage(int messageHeight) {
        return (int) Math.max(-AndroidUtilities.dp(2.0f), (((this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset) - this.chatListViewPaddingTop) - messageHeight) / 2.0f);
    }

    private int getHeightForMessage(MessageObject object) {
        boolean z = true;
        if (this.dummyMessageCell == null) {
            this.dummyMessageCell = new ChatMessageCell(getParentActivity(), true, this.themeDelegate);
        }
        this.dummyMessageCell.isChat = this.currentChat != null || UserObject.isUserSelf(this.currentUser);
        ChatMessageCell chatMessageCell = this.dummyMessageCell;
        TLRPC.User user = this.currentUser;
        chatMessageCell.isBot = user != null && user.bot;
        ChatMessageCell chatMessageCell2 = this.dummyMessageCell;
        if (!ChatObject.isChannel(this.currentChat) || !this.currentChat.megagroup) {
            z = false;
        }
        chatMessageCell2.isMegagroup = z;
        return this.dummyMessageCell.computeHeight(object, this.groupedMessagesMap.get(object.getGroupId()));
    }

    public void startMessageUnselect() {
        Runnable runnable = this.unselectRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        Runnable runnable2 = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda59
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1965lambda$startMessageUnselect$106$orgtelegramuiChatActivity();
            }
        };
        this.unselectRunnable = runnable2;
        AndroidUtilities.runOnUIThread(runnable2, 1000L);
    }

    /* renamed from: lambda$startMessageUnselect$106$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1965lambda$startMessageUnselect$106$orgtelegramuiChatActivity() {
        this.highlightMessageId = Integer.MAX_VALUE;
        updateVisibleRows();
        this.unselectRunnable = null;
    }

    public void removeSelectedMessageHighlight() {
        Runnable runnable = this.unselectRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
            this.unselectRunnable = null;
        }
        this.highlightMessageId = Integer.MAX_VALUE;
    }

    /* JADX WARN: Code restructure failed: missing block: B:100:0x01c7, code lost:
        r40.scrollByTouch = false;
        r40.chatListView.smoothScrollBy(0, r7);
        r40.chatListView.setOverScrollMode(2);
     */
    /* JADX WARN: Code restructure failed: missing block: B:94:0x0194, code lost:
        r7 = (int) ((r7.getTop() - r40.chatListViewPaddingTop) - getScrollOffsetForMessage(r7.getHeight()));
        r12 = (r40.chatListView.computeVerticalScrollRange() - r40.chatListView.computeVerticalScrollOffset()) - r40.chatListView.computeVerticalScrollExtent();
     */
    /* JADX WARN: Code restructure failed: missing block: B:95:0x01bf, code lost:
        if (r12 >= 0) goto L97;
     */
    /* JADX WARN: Code restructure failed: missing block: B:96:0x01c1, code lost:
        r12 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:97:0x01c2, code lost:
        if (r7 <= r12) goto L99;
     */
    /* JADX WARN: Code restructure failed: missing block: B:98:0x01c4, code lost:
        r7 = r12;
     */
    /* JADX WARN: Code restructure failed: missing block: B:99:0x01c5, code lost:
        if (r7 == 0) goto L101;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void scrollToMessageId(int r41, int r42, boolean r43, int r44, boolean r45, int r46) {
        /*
            Method dump skipped, instructions count: 821
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.scrollToMessageId(int, int, boolean, int, boolean, int):void");
    }

    /* renamed from: lambda$scrollToMessageId$107$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1933lambda$scrollToMessageId$107$orgtelegramuiChatActivity() {
        int i = this.nextScrollToMessageId;
        if (i != 0) {
            scrollToMessageId(i, this.nextScrollFromMessageId, this.nextScrollSelect, this.nextScrollLoadIndex, this.nextScrollForce, this.nextScrollForcePinnedMessageId);
            this.nextScrollToMessageId = 0;
        }
    }

    /* renamed from: lambda$scrollToMessageId$108$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1934lambda$scrollToMessageId$108$orgtelegramuiChatActivity(DialogInterface dialogInterface) {
        showPinnedProgress(false);
    }

    private void showPinnedProgress(boolean show) {
        if (show) {
            if (this.updatePinnedProgressRunnable == null) {
                Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda58
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.m1957lambda$showPinnedProgress$109$orgtelegramuiChatActivity();
                    }
                };
                this.updatePinnedProgressRunnable = runnable;
                AndroidUtilities.runOnUIThread(runnable, 100L);
                return;
            }
            return;
        }
        Runnable runnable2 = this.updatePinnedProgressRunnable;
        if (runnable2 != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable2);
        }
        this.updatePinnedProgressRunnable = null;
        this.pinnedProgressIsShowing = false;
        updatePinnedListButton(true);
    }

    /* renamed from: lambda$showPinnedProgress$109$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1957lambda$showPinnedProgress$109$orgtelegramuiChatActivity() {
        this.pinnedProgressIsShowing = true;
        updatePinnedListButton(true);
    }

    public void updatePagedownButtonVisibility(boolean animated) {
        if (this.pagedownButton == null) {
            return;
        }
        boolean show = this.canShowPagedownButton && !this.textSelectionHelper.isSelectionMode() && !this.chatActivityEnterView.isRecordingAudioVideo();
        if (show) {
            if (animated && (this.openAnimationStartTime == 0 || SystemClock.elapsedRealtime() < this.openAnimationStartTime + 150)) {
                animated = false;
            }
            this.pagedownButtonShowedByScroll = false;
            if (this.pagedownButton.getTag() == null) {
                ValueAnimator valueAnimator = this.pagedownButtonAnimation;
                if (valueAnimator != null) {
                    valueAnimator.removeAllListeners();
                    this.pagedownButtonAnimation.cancel();
                    this.pagedownButtonAnimation = null;
                }
                this.pagedownButton.setTag(1);
                if (animated) {
                    this.pagedownButton.setVisibility(0);
                    ValueAnimator ofFloat = ValueAnimator.ofFloat(this.pagedownButtonEnterProgress, 1.0f);
                    this.pagedownButtonAnimation = ofFloat;
                    ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda257
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                            ChatActivity.this.m1976xf7a14cba(valueAnimator2);
                        }
                    });
                    this.pagedownButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.73
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animation) {
                            ChatActivity.this.pagedownButtonEnterProgress = 1.0f;
                            ChatActivity.this.contentView.invalidate();
                        }
                    });
                    this.pagedownButtonAnimation.setDuration(200L);
                    this.pagedownButtonAnimation.start();
                    return;
                }
                this.pagedownButtonEnterProgress = 1.0f;
                this.contentView.invalidate();
                this.pagedownButton.setVisibility(0);
                return;
            }
            return;
        }
        this.returnToMessageId = 0;
        this.newUnreadMessageCount = 0;
        if (this.pagedownButton.getTag() != null) {
            this.pagedownButton.setTag(null);
            ValueAnimator valueAnimator2 = this.pagedownButtonAnimation;
            if (valueAnimator2 != null) {
                valueAnimator2.removeAllListeners();
                this.pagedownButtonAnimation.cancel();
                this.pagedownButtonAnimation = null;
            }
            if (animated) {
                this.pagedownButton.setVisibility(0);
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.pagedownButtonEnterProgress, 0.0f);
                this.pagedownButtonAnimation = ofFloat2;
                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda11
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator3) {
                        ChatActivity.this.m1977xf84df859(valueAnimator3);
                    }
                });
                this.pagedownButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.74
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animation) {
                        ChatActivity.this.pagedownButtonEnterProgress = 0.0f;
                        ChatActivity.this.pagedownButton.setVisibility(4);
                        ChatActivity.this.contentView.invalidate();
                    }
                });
                this.pagedownButtonAnimation.setDuration(200L);
                this.pagedownButtonAnimation.start();
                return;
            }
            this.pagedownButtonEnterProgress = 0.0f;
            this.pagedownButton.setVisibility(4);
        }
    }

    /* renamed from: lambda$updatePagedownButtonVisibility$110$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1976xf7a14cba(ValueAnimator valueAnimator) {
        this.pagedownButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* renamed from: lambda$updatePagedownButtonVisibility$111$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1977xf84df859(ValueAnimator valueAnimator) {
        this.pagedownButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    public void showMentionDownButton(boolean show, boolean animated) {
        FrameLayout frameLayout = this.mentiondownButton;
        if (frameLayout == null) {
            return;
        }
        if (show) {
            if (frameLayout.getTag() == null) {
                ValueAnimator valueAnimator = this.mentiondownButtonAnimation;
                if (valueAnimator != null) {
                    valueAnimator.removeAllListeners();
                    this.mentiondownButtonAnimation.cancel();
                    this.mentiondownButtonAnimation = null;
                }
                if (animated) {
                    this.mentiondownButton.setVisibility(0);
                    this.mentiondownButton.setTag(1);
                    ValueAnimator ofFloat = ValueAnimator.ofFloat(this.mentionsButtonEnterProgress, 1.0f);
                    this.mentiondownButtonAnimation = ofFloat;
                    ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda213
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                            ChatActivity.this.m1954lambda$showMentionDownButton$112$orgtelegramuiChatActivity(valueAnimator2);
                        }
                    });
                    this.mentiondownButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.75
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animation) {
                            ChatActivity.this.mentionsButtonEnterProgress = 1.0f;
                            ChatActivity.this.contentView.invalidate();
                        }
                    });
                    this.mentiondownButtonAnimation.setDuration(200L);
                    this.mentiondownButtonAnimation.start();
                    return;
                }
                this.mentionsButtonEnterProgress = 1.0f;
                this.contentView.invalidate();
                return;
            }
            return;
        }
        this.returnToMessageId = 0;
        if (frameLayout.getTag() != null) {
            this.mentiondownButton.setTag(null);
            ValueAnimator valueAnimator2 = this.mentiondownButtonAnimation;
            if (valueAnimator2 != null) {
                valueAnimator2.removeAllListeners();
                this.mentiondownButtonAnimation.cancel();
                this.mentiondownButtonAnimation = null;
            }
            if (animated) {
                ValueAnimator ofFloat2 = ValueAnimator.ofFloat(this.mentionsButtonEnterProgress, 0.0f);
                this.mentiondownButtonAnimation = ofFloat2;
                ofFloat2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda224
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator3) {
                        ChatActivity.this.m1955lambda$showMentionDownButton$113$orgtelegramuiChatActivity(valueAnimator3);
                    }
                });
                this.mentiondownButtonAnimation.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.76
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animation) {
                        ChatActivity.this.mentionsButtonEnterProgress = 0.0f;
                        ChatActivity.this.mentiondownButton.setVisibility(4);
                        ChatActivity.this.contentView.invalidate();
                    }
                });
                this.mentiondownButtonAnimation.setDuration(200L);
                this.mentiondownButtonAnimation.start();
                return;
            }
            this.mentionsButtonEnterProgress = 0.0f;
            this.mentiondownButton.setVisibility(4);
        }
    }

    /* renamed from: lambda$showMentionDownButton$112$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1954lambda$showMentionDownButton$112$orgtelegramuiChatActivity(ValueAnimator valueAnimator) {
        this.mentionsButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    /* renamed from: lambda$showMentionDownButton$113$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1955lambda$showMentionDownButton$113$orgtelegramuiChatActivity(ValueAnimator valueAnimator) {
        this.mentionsButtonEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        this.contentView.invalidate();
    }

    private void updateSecretStatus() {
        ChatActivityEnterView chatActivityEnterView;
        if (this.bottomOverlay == null) {
            return;
        }
        boolean hideKeyboard = false;
        TLRPC.Chat chat = this.currentChat;
        if (chat != null && !ChatObject.canSendMessages(chat) && !this.currentChat.gigagroup && (!ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup)) {
            if (this.currentChat.default_banned_rights != null && this.currentChat.default_banned_rights.send_messages) {
                this.bottomOverlayText.setText(LocaleController.getString("GlobalSendMessageRestricted", R.string.GlobalSendMessageRestricted));
            } else if (AndroidUtilities.isBannedForever(this.currentChat.banned_rights)) {
                this.bottomOverlayText.setText(LocaleController.getString("SendMessageRestrictedForever", R.string.SendMessageRestrictedForever));
            } else {
                this.bottomOverlayText.setText(LocaleController.formatString("SendMessageRestricted", R.string.SendMessageRestricted, LocaleController.formatDateForBan(this.currentChat.banned_rights.until_date)));
            }
            this.bottomOverlay.setVisibility(0);
            AnimatorSet animatorSet = this.mentionListAnimation;
            if (animatorSet != null) {
                animatorSet.cancel();
                this.mentionListAnimation = null;
            }
            this.mentionContainer.setVisibility(8);
            this.mentionContainer.setTag(null);
            updateMessageListAccessibilityVisibility();
            hideKeyboard = true;
            StickersAdapter stickersAdapter = this.stickersAdapter;
            if (stickersAdapter != null) {
                stickersAdapter.hide();
            }
        } else {
            TLRPC.EncryptedChat encryptedChat = this.currentEncryptedChat;
            if (encryptedChat == null || this.bigEmptyView == null) {
                this.bottomOverlay.setVisibility(4);
                if (this.stickersAdapter != null && (chatActivityEnterView = this.chatActivityEnterView) != null && chatActivityEnterView.hasText()) {
                    this.stickersAdapter.searchEmojiByKeyword(this.chatActivityEnterView.getFieldText());
                    return;
                }
                return;
            }
            if (encryptedChat instanceof TLRPC.TL_encryptedChatRequested) {
                this.bottomOverlayText.setText(LocaleController.getString("EncryptionProcessing", R.string.EncryptionProcessing));
                this.bottomOverlay.setVisibility(0);
                this.chatActivityEnterView.setVisibility(4);
                hideKeyboard = true;
            } else if (encryptedChat instanceof TLRPC.TL_encryptedChatWaiting) {
                TextView textView = this.bottomOverlayText;
                textView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, "<b>" + this.currentUser.first_name + "</b>")));
                this.bottomOverlay.setVisibility(0);
                this.chatActivityEnterView.setVisibility(4);
                hideKeyboard = true;
            } else if (encryptedChat instanceof TLRPC.TL_encryptedChatDiscarded) {
                this.bottomOverlayText.setText(LocaleController.getString("EncryptionRejected", R.string.EncryptionRejected));
                this.bottomOverlay.setVisibility(0);
                this.chatActivityEnterView.setVisibility(4);
                this.chatActivityEnterView.setFieldText("");
                getMediaDataController().cleanDraft(this.dialog_id, this.threadMessageId, false);
                hideKeyboard = true;
            } else if (encryptedChat instanceof TLRPC.TL_encryptedChat) {
                this.bottomOverlay.setVisibility(4);
                if (!this.inPreviewMode) {
                    this.chatActivityEnterView.setVisibility(0);
                }
            }
            checkRaiseSensors();
            checkActionBarMenu(false);
        }
        if (this.inPreviewMode) {
            this.bottomOverlay.setVisibility(4);
        }
        if (hideKeyboard) {
            this.chatActivityEnterView.hidePopup(false);
            if (getParentActivity() != null) {
                AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
            }
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onRequestPermissionsResultFragment(int requestCode, String[] permissions, int[] grantResults) {
        boolean allGranted;
        ChatAttachAlert chatAttachAlert;
        ChatAttachAlert chatAttachAlert2;
        ChatAttachAlert chatAttachAlert3;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.onRequestPermissionsResultFragment(requestCode, permissions, grantResults);
        }
        MentionsContainerView mentionsContainerView = this.mentionContainer;
        if (mentionsContainerView != null && mentionsContainerView.getAdapter() != null) {
            this.mentionContainer.getAdapter().onRequestPermissionsResultFragment(requestCode, permissions, grantResults);
        }
        if (requestCode == 4 && (chatAttachAlert3 = this.chatAttachAlert) != null) {
            chatAttachAlert3.getPhotoLayout().checkStorage();
        } else if ((requestCode == 5 || requestCode == 30) && (chatAttachAlert2 = this.chatAttachAlert) != null) {
            chatAttachAlert2.onRequestPermissionsResultFragment(requestCode, permissions, grantResults);
        } else {
            boolean z = true;
            if ((requestCode == 17 || requestCode == 18) && (chatAttachAlert = this.chatAttachAlert) != null) {
                ChatAttachAlertPhotoLayout photoLayout = chatAttachAlert.getPhotoLayout();
                if (grantResults.length <= 0 || grantResults[0] != 0) {
                    z = false;
                }
                photoLayout.checkCamera(z);
                this.chatAttachAlert.getPhotoLayout().checkStorage();
            } else if (requestCode == 21) {
                if (getParentActivity() != null && grantResults != null && grantResults.length != 0 && grantResults[0] != 0) {
                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                    builder.setMessage(LocaleController.getString("PermissionNoAudioVideoWithHint", R.string.PermissionNoAudioVideoWithHint));
                    builder.setNegativeButton(LocaleController.getString("PermissionOpenSettings", R.string.PermissionOpenSettings), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda179
                        @Override // android.content.DialogInterface.OnClickListener
                        public final void onClick(DialogInterface dialogInterface, int i) {
                            ChatActivity.this.m1882x210ce453(dialogInterface, i);
                        }
                    });
                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                    builder.show();
                }
            } else if (requestCode == 19 && grantResults != null && grantResults.length > 0 && grantResults[0] == 0) {
                processSelectedAttach(0);
            } else if (requestCode == 20 && grantResults != null && grantResults.length > 0 && grantResults[0] == 0) {
                processSelectedAttach(2);
            } else if (((requestCode == 101 || requestCode == 102) && this.currentUser != null) || (requestCode == 103 && this.currentChat != null)) {
                int a = 0;
                while (true) {
                    if (a >= grantResults.length) {
                        allGranted = true;
                        break;
                    } else if (grantResults[a] == 0) {
                        a++;
                    } else {
                        allGranted = false;
                        break;
                    }
                }
                if (grantResults.length > 0 && allGranted) {
                    if (requestCode == 103) {
                        VoIPHelper.startCall(this.currentChat, null, null, this.createGroupCall, getParentActivity(), this, getAccountInstance());
                        return;
                    }
                    TLRPC.User user = this.currentUser;
                    boolean z2 = requestCode == 102;
                    TLRPC.UserFull userFull = this.userInfo;
                    VoIPHelper.startCall(user, z2, userFull != null && userFull.video_calls_available, getParentActivity(), getMessagesController().getUserFull(this.currentUser.id), getAccountInstance());
                    return;
                }
                VoIPHelper.permissionDenied(getParentActivity(), null, requestCode);
            }
        }
    }

    /* renamed from: lambda$onRequestPermissionsResultFragment$114$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1882x210ce453(DialogInterface dialog, int which) {
        try {
            Intent intent = new Intent("android.settings.APPLICATION_DETAILS_SETTINGS");
            intent.setData(Uri.parse("package:" + ApplicationLoader.applicationContext.getPackageName()));
            getParentActivity().startActivity(intent);
        } catch (Exception e) {
            FileLog.e(e);
        }
    }

    private void checkActionBarMenu(boolean animated) {
        TLRPC.ChatFull chatFull;
        TLRPC.User user;
        TLRPC.UserFull userFull;
        TLRPC.ChatFull chatFull2;
        TLRPC.EncryptedChat encryptedChat = this.currentEncryptedChat;
        int i = 8;
        if ((encryptedChat != null && !(encryptedChat instanceof TLRPC.TL_encryptedChat)) || ((this.currentChat != null && (this.chatMode != 0 || this.threadMessageId != 0 || (chatFull2 = this.chatInfo) == null || chatFull2.ttl_period == 0)) || ((user = this.currentUser) != null && (UserObject.isDeleted(user) || (this.currentEncryptedChat == null && ((userFull = this.userInfo) == null || userFull.ttl_period == 0)))))) {
            View view = this.timeItem2;
            if (view != null) {
                view.setVisibility(8);
            }
            ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
            if (chatAvatarContainer != null) {
                chatAvatarContainer.hideTimeItem(animated);
            }
        } else {
            View view2 = this.timeItem2;
            if (view2 != null) {
                view2.setVisibility(0);
            }
            ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
            if (chatAvatarContainer2 != null) {
                chatAvatarContainer2.showTimeItem(animated);
            }
        }
        ChatAvatarContainer chatAvatarContainer3 = this.avatarContainer;
        if (chatAvatarContainer3 != null) {
            TLRPC.EncryptedChat encryptedChat2 = this.currentEncryptedChat;
            if (encryptedChat2 != null) {
                chatAvatarContainer3.setTime(encryptedChat2.ttl, animated);
            } else {
                TLRPC.UserFull userFull2 = this.userInfo;
                if (userFull2 != null) {
                    chatAvatarContainer3.setTime(userFull2.ttl_period, animated);
                } else {
                    TLRPC.ChatFull chatFull3 = this.chatInfo;
                    if (chatFull3 != null) {
                        chatAvatarContainer3.setTime(chatFull3.ttl_period, animated);
                    }
                }
            }
        }
        if (this.clearHistoryItem != null && (chatFull = this.chatInfo) != null) {
            boolean visible = chatFull.can_delete_channel || !ChatObject.isChannel(this.currentChat) || (this.currentChat.megagroup && TextUtils.isEmpty(this.currentChat.username));
            ActionBarMenuSubItem actionBarMenuSubItem = this.clearHistoryItem;
            if (visible) {
                i = 0;
            }
            actionBarMenuSubItem.setVisibility(i);
        }
        checkAndUpdateAvatar();
    }

    public int getMessageType(MessageObject messageObject) {
        String mime;
        String mime2;
        if (messageObject == null) {
            return -1;
        }
        if (this.currentEncryptedChat == null) {
            if (messageObject.isEditing()) {
                return -1;
            }
            if (messageObject.getId() <= 0 && messageObject.isOut()) {
                if (!messageObject.isSendError()) {
                    return -1;
                }
                return !messageObject.isMediaEmpty() ? 0 : 20;
            } else if (messageObject.isAnimatedEmoji()) {
                return 2;
            } else {
                if (messageObject.type == 6) {
                    return -1;
                }
                if (messageObject.type == 10 || messageObject.type == 11) {
                    return messageObject.getId() == 0 ? -1 : 1;
                } else if (messageObject.isVoice()) {
                    return 2;
                } else {
                    if (messageObject.isSticker() || messageObject.isAnimatedSticker()) {
                        TLRPC.InputStickerSet inputStickerSet = messageObject.getInputStickerSet();
                        return inputStickerSet instanceof TLRPC.TL_inputStickerSetID ? !getMediaDataController().isStickerPackInstalled(inputStickerSet.id) ? 7 : 9 : (!(inputStickerSet instanceof TLRPC.TL_inputStickerSetShortName) || getMediaDataController().isStickerPackInstalled(inputStickerSet.short_name)) ? 9 : 7;
                    }
                    if (!messageObject.isRoundVideo() && ((messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) || messageObject.getDocument() != null || messageObject.isMusic() || messageObject.isVideo())) {
                        boolean canSave = false;
                        if (!TextUtils.isEmpty(messageObject.messageOwner.attachPath)) {
                            File f = new File(messageObject.messageOwner.attachPath);
                            if (f.exists()) {
                                canSave = true;
                            }
                        }
                        if (!canSave && messageObject.mediaExists) {
                            canSave = true;
                        }
                        if (canSave) {
                            if (messageObject.getDocument() != null && !messageObject.isMusic() && (mime2 = messageObject.getDocument().mime_type) != null) {
                                if (messageObject.getDocumentName().toLowerCase().endsWith("attheme")) {
                                    return 10;
                                }
                                if (mime2.endsWith("/xml")) {
                                    return 5;
                                }
                                if ((!messageObject.isNewGif() && mime2.endsWith("/mp4")) || mime2.endsWith("/png") || mime2.endsWith("/jpg") || mime2.endsWith("/jpeg")) {
                                    return 6;
                                }
                            }
                            return 4;
                        }
                    } else if (messageObject.type == 12) {
                        return 8;
                    } else {
                        if (messageObject.isMediaEmpty()) {
                            return 3;
                        }
                    }
                    return 2;
                }
            }
        } else if (messageObject.isSending()) {
            return -1;
        } else {
            if (messageObject.isAnimatedEmoji()) {
                return 2;
            }
            if (messageObject.type == 6) {
                return -1;
            }
            if (messageObject.isSendError()) {
                return !messageObject.isMediaEmpty() ? 0 : 20;
            } else if (messageObject.type == 10 || messageObject.type == 11) {
                return (messageObject.getId() == 0 || messageObject.isSending()) ? -1 : 1;
            } else if (messageObject.isVoice()) {
                return 2;
            } else {
                if (!messageObject.isAnimatedEmoji() && (messageObject.isSticker() || messageObject.isAnimatedSticker())) {
                    TLRPC.InputStickerSet inputStickerSet2 = messageObject.getInputStickerSet();
                    if ((inputStickerSet2 instanceof TLRPC.TL_inputStickerSetShortName) && !getMediaDataController().isStickerPackInstalled(inputStickerSet2.short_name)) {
                        return 7;
                    }
                } else if (!messageObject.isRoundVideo() && ((messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) || messageObject.getDocument() != null || messageObject.isMusic() || messageObject.isVideo())) {
                    boolean canSave2 = false;
                    if (!TextUtils.isEmpty(messageObject.messageOwner.attachPath)) {
                        File f2 = new File(messageObject.messageOwner.attachPath);
                        if (f2.exists()) {
                            canSave2 = true;
                        }
                    }
                    if (!canSave2) {
                        File f3 = FileLoader.getInstance(this.currentAccount).getPathToMessage(messageObject.messageOwner);
                        if (f3.exists()) {
                            canSave2 = true;
                        }
                    }
                    if (canSave2) {
                        if (messageObject.getDocument() != null && (mime = messageObject.getDocument().mime_type) != null && mime.endsWith("text/xml")) {
                            return 5;
                        }
                        if (messageObject.messageOwner.ttl <= 0) {
                            return 4;
                        }
                    }
                } else if (messageObject.type == 12) {
                    return 8;
                } else {
                    if (messageObject.isMediaEmpty()) {
                        return 3;
                    }
                }
                return 2;
            }
        }
    }

    public void addToSelectedMessages(MessageObject messageObject, boolean outside) {
        addToSelectedMessages(messageObject, outside, true);
    }

    /* JADX WARN: Removed duplicated region for block: B:367:0x0610  */
    /* JADX WARN: Removed duplicated region for block: B:374:0x0636  */
    /* JADX WARN: Removed duplicated region for block: B:382:0x06c0  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private void addToSelectedMessages(org.telegram.messenger.MessageObject r32, boolean r33, boolean r34) {
        /*
            Method dump skipped, instructions count: 1912
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.addToSelectedMessages(org.telegram.messenger.MessageObject, boolean, boolean):void");
    }

    public void processRowSelect(View view, boolean outside, float touchX, float touchY) {
        MessageObject message = null;
        if (view instanceof ChatMessageCell) {
            ChatMessageCell cell = (ChatMessageCell) view;
            message = cell.getMessageObject();
            cell.setLastTouchCoords(touchX, touchY);
        } else if (view instanceof ChatActionCell) {
            message = ((ChatActionCell) view).getMessageObject();
        }
        int type = getMessageType(message);
        if (type < 2 || type == 20) {
            return;
        }
        addToSelectedMessages(message, outside);
        updateActionModeTitle();
        updateVisibleRows();
    }

    public void updateActionModeTitle() {
        if (this.reportType < 0) {
            if (!this.actionBar.isActionModeShowed()) {
                return;
            }
            if (this.selectedMessagesIds[0].size() != 0 || this.selectedMessagesIds[1].size() != 0) {
                this.selectedMessagesCountTextView.setNumber(this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size(), true);
                return;
            }
            return;
        }
        int size = this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size();
        if (size == 0) {
            this.bottomOverlayChatText.setText(LocaleController.getString("ReportMessages", R.string.ReportMessages));
            this.bottomOverlayChatText.setAlpha(0.5f);
            this.bottomOverlayChatText.setEnabled(false);
            return;
        }
        this.bottomOverlayChatText.setText(LocaleController.formatString("ReportMessagesCount", R.string.ReportMessagesCount, LocaleController.formatPluralString("messages", size, new Object[0])).toUpperCase());
        this.bottomOverlayChatText.setAlpha(1.0f);
        this.bottomOverlayChatText.setEnabled(true);
    }

    private void updateTitle() {
        if (this.avatarContainer == null) {
            return;
        }
        if (isThreadChat()) {
            if (this.isComments) {
                if (this.threadMessageObject.hasReplies()) {
                    this.avatarContainer.setTitle(LocaleController.formatPluralString("Comments", this.threadMessageObject.getRepliesCount(), new Object[0]));
                } else {
                    this.avatarContainer.setTitle(LocaleController.getString("CommentsTitle", R.string.CommentsTitle));
                }
            } else {
                this.avatarContainer.setTitle(LocaleController.formatPluralString("Replies", this.threadMessageObject.getRepliesCount(), new Object[0]));
            }
        } else if (UserObject.isReplyUser(this.currentUser)) {
            this.avatarContainer.setTitle(LocaleController.getString("RepliesTitle", R.string.RepliesTitle));
        } else {
            int i = this.chatMode;
            if (i == 1) {
                if (UserObject.isUserSelf(this.currentUser)) {
                    this.avatarContainer.setTitle(LocaleController.getString("Reminders", R.string.Reminders));
                } else {
                    this.avatarContainer.setTitle(LocaleController.getString("ScheduledMessages", R.string.ScheduledMessages));
                }
            } else if (i == 2) {
                this.avatarContainer.setTitle(LocaleController.formatPluralString("PinnedMessagesCount", getPinnedMessagesCount(), new Object[0]));
            } else {
                TLRPC.Chat chat = this.currentChat;
                if (chat != null) {
                    this.avatarContainer.setTitle(chat.title, this.currentChat.scam, this.currentChat.fake, this.currentChat.verified, false);
                } else {
                    TLRPC.User user = this.currentUser;
                    if (user != null) {
                        if (user.self) {
                            this.avatarContainer.setTitle(LocaleController.getString("SavedMessages", R.string.SavedMessages));
                        } else if (!MessagesController.isSupportUser(this.currentUser) && getContactsController().contactsDict.get(Long.valueOf(this.currentUser.id)) == null && (getContactsController().contactsDict.size() != 0 || !getContactsController().isLoadingContacts())) {
                            if (!TextUtils.isEmpty(this.currentUser.phone)) {
                                ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
                                PhoneFormat phoneFormat = PhoneFormat.getInstance();
                                chatAvatarContainer.setTitle(phoneFormat.format("+" + this.currentUser.phone));
                            } else {
                                this.avatarContainer.setTitle(UserObject.getUserName(this.currentUser), this.currentUser.scam, this.currentUser.fake, this.currentUser.verified, getMessagesController().isPremiumUser(this.currentUser));
                            }
                        } else {
                            this.avatarContainer.setTitle(UserObject.getUserName(this.currentUser), this.currentUser.scam, this.currentUser.fake, this.currentUser.verified, getMessagesController().isPremiumUser(this.currentUser));
                        }
                    }
                }
            }
        }
        setParentActivityTitle(this.avatarContainer.getTitleTextView().getText());
    }

    public int getPinnedMessagesCount() {
        return Math.max(this.loadedPinnedMessagesCount, this.totalPinnedMessagesCount);
    }

    private void updateBotButtons() {
        TLRPC.User user;
        if (this.headerItem == null || (user = this.currentUser) == null || this.currentEncryptedChat != null || !user.bot) {
            return;
        }
        boolean hasHelp = false;
        boolean hasSettings = false;
        if (this.botInfo.size() != 0) {
            for (int b = 0; b < this.botInfo.size(); b++) {
                TLRPC.BotInfo info = this.botInfo.valueAt(b);
                for (int a = 0; a < info.commands.size(); a++) {
                    TLRPC.TL_botCommand command = info.commands.get(a);
                    if (command.command.toLowerCase().equals("help")) {
                        hasHelp = true;
                    } else if (command.command.toLowerCase().equals("settings")) {
                        hasSettings = true;
                    }
                    if (!hasSettings || !hasHelp) {
                    }
                }
            }
        }
        if (hasHelp) {
            this.headerItem.showSubItem(30);
        } else {
            this.headerItem.hideSubItem(30);
        }
        if (hasSettings) {
            this.headerItem.showSubItem(31);
        } else {
            this.headerItem.hideSubItem(31);
        }
    }

    public void updateTitleIcons() {
        updateTitleIcons(false);
    }

    private void updateTitleIcons(boolean forceToggleMuted) {
        ActionBarMenuSubItem actionBarMenuSubItem;
        if (this.avatarContainer == null || this.chatMode != 0) {
            return;
        }
        boolean isMuted = getMessagesController().isDialogMuted(this.dialog_id);
        if (forceToggleMuted) {
            isMuted = !isMuted;
        }
        Drawable rightIcon = null;
        if (!UserObject.isReplyUser(this.currentUser) && !isThreadChat() && isMuted) {
            rightIcon = getThemedDrawable(Theme.key_drawable_muteIconDrawable);
        }
        this.avatarContainer.setTitleIcons(this.currentEncryptedChat != null ? getThemedDrawable(Theme.key_drawable_lockIconDrawable) : null, rightIcon);
        if (!forceToggleMuted && (actionBarMenuSubItem = this.muteItem) != null) {
            if (isMuted) {
                actionBarMenuSubItem.getRightIcon().setVisibility(8);
                this.muteItem.setTextAndIcon(LocaleController.getString("Unmute", R.string.Unmute), R.drawable.msg_mute);
            } else {
                actionBarMenuSubItem.getRightIcon().setVisibility(0);
                if (getMessagesController().isDialogNotificationsSoundEnabled(this.dialog_id)) {
                    this.muteItem.setTextAndIcon(LocaleController.getString("Mute", R.string.Mute), R.drawable.msg_unmute);
                } else {
                    this.muteItem.setTextAndIcon(LocaleController.getString("Mute", R.string.Mute), R.drawable.msg_silent);
                }
            }
        }
        ChatNotificationsPopupWrapper chatNotificationsPopupWrapper = this.chatNotificationsPopupWrapper;
        if (chatNotificationsPopupWrapper != null) {
            chatNotificationsPopupWrapper.m2522x80790d7d(this.dialog_id);
        }
    }

    private void checkAndUpdateAvatar() {
        if (this.currentUser != null) {
            TLRPC.User user = getMessagesController().getUser(Long.valueOf(this.currentUser.id));
            if (user == null) {
                return;
            }
            this.currentUser = user;
        } else if (this.currentChat != null) {
            TLRPC.Chat chat = getMessagesController().getChat(Long.valueOf(this.currentChat.id));
            if (chat == null) {
                return;
            }
            this.currentChat = chat;
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.checkAndUpdateAvatar();
        }
    }

    public void openVideoEditor(String videoPath, String caption) {
        if (getParentActivity() == null) {
            fillEditingMediaWithCaption(caption, null);
            SendMessagesHelper.prepareSendingVideo(getAccountInstance(), videoPath, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, null, 0, this.editingMessageObject, true, 0, false);
            afterMessageSend();
            return;
        }
        final Bitmap thumb = SendMessagesHelper.createVideoThumbnail(videoPath, 1);
        PhotoViewer.getInstance().setParentActivity(getParentActivity(), this.themeDelegate);
        final ArrayList<Object> cameraPhoto = new ArrayList<>();
        MediaController.PhotoEntry entry = new MediaController.PhotoEntry(0, 0, 0L, videoPath, 0, true, 0, 0, 0L);
        entry.caption = caption;
        cameraPhoto.add(entry);
        PhotoViewer.getInstance().openPhotoForSelect(cameraPhoto, 0, 0, false, new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.80
            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public ImageReceiver.BitmapHolder getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
                return new ImageReceiver.BitmapHolder(thumb, (String) null, 0);
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public void sendButtonPressed(int index, VideoEditedInfo videoEditedInfo, boolean notify, int scheduleDate, boolean forceDocument) {
                ChatActivity.this.sendMedia((MediaController.PhotoEntry) cameraPhoto.get(0), videoEditedInfo, notify, scheduleDate, forceDocument);
            }

            @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
            public boolean canScrollAway() {
                return false;
            }
        }, this);
    }

    public boolean openPhotosEditor(ArrayList<SendMessagesHelper.SendingMediaInfo> photoPathes, CharSequence caption) {
        final ArrayList<MediaController.PhotoEntry> entries = new ArrayList<>();
        for (int a = 0; a < photoPathes.size(); a++) {
            SendMessagesHelper.SendingMediaInfo photoInfo = photoPathes.get(a);
            String path = null;
            if (photoInfo.path != null) {
                path = photoInfo.path;
            } else if (photoInfo.uri != null && 0 == 0) {
                try {
                    File file = AndroidUtilities.generatePicturePath(isSecretChat(), "");
                    InputStream in = ApplicationLoader.applicationContext.getContentResolver().openInputStream(photoInfo.uri);
                    FileOutputStream fos = new FileOutputStream(file);
                    byte[] buffer = new byte[8192];
                    while (true) {
                        int lengthRead = in.read(buffer);
                        if (lengthRead > 0) {
                            fos.write(buffer, 0, lengthRead);
                            fos.flush();
                        } else {
                            in.close();
                            fos.close();
                            path = file.getAbsolutePath();
                        }
                    }
                } catch (Exception e) {
                }
            }
            if (path != null) {
                int orientation = 0;
                try {
                    ExifInterface ei = new ExifInterface(path);
                    int exif = ei.getAttributeInt(ExifInterface.TAG_ORIENTATION, 1);
                    switch (exif) {
                        case 3:
                            orientation = 180;
                            break;
                        case 6:
                            orientation = 90;
                            break;
                        case 8:
                            orientation = 270;
                            break;
                    }
                } catch (Exception e2) {
                    FileLog.e(e2);
                }
                MediaController.PhotoEntry entry = new MediaController.PhotoEntry(0, 0, 0L, path, orientation, photoInfo.isVideo, 0, 0, 0L);
                if (a == photoPathes.size() - 1 && caption != null) {
                    entry.caption = caption;
                }
                entries.add(entry);
            }
        }
        if (entries.isEmpty()) {
            return false;
        }
        if (getParentActivity() == null) {
            fillEditingMediaWithCaption(caption, null);
            sendPhotosGroup(entries, false, 0, false);
            afterMessageSend();
        } else {
            final boolean[] checked = new boolean[entries.size()];
            Arrays.fill(checked, true);
            PhotoViewer.getInstance().setParentActivity(getParentActivity(), this.themeDelegate);
            PhotoViewer.getInstance().openPhotoForSelect(new ArrayList<>(entries), entries.size() - 1, 0, false, new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.81
                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public ImageReceiver.BitmapHolder getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
                    return null;
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public void sendButtonPressed(int index, VideoEditedInfo videoEditedInfo, boolean notify, int scheduleDate, boolean forceDocument) {
                    for (int i = entries.size() - 1; i >= 0; i--) {
                        if (!checked[i]) {
                            entries.remove(i);
                        }
                    }
                    ChatActivity.this.sendPhotosGroup(entries, notify, scheduleDate, forceDocument);
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public int setPhotoChecked(int index, VideoEditedInfo videoEditedInfo) {
                    return index;
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public boolean isPhotoChecked(int index) {
                    return checked[index];
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public boolean canScrollAway() {
                    return false;
                }
            }, this);
        }
        return true;
    }

    public void sendPhotosGroup(ArrayList<MediaController.PhotoEntry> entries, boolean notify, int scheduleDate, boolean forceDocument) {
        if (!entries.isEmpty()) {
            ArrayList<SendMessagesHelper.SendingMediaInfo> photos = new ArrayList<>();
            Iterator<MediaController.PhotoEntry> it = entries.iterator();
            while (it.hasNext()) {
                MediaController.PhotoEntry entry = it.next();
                SendMessagesHelper.SendingMediaInfo info = new SendMessagesHelper.SendingMediaInfo();
                if (!entry.isVideo && entry.imagePath != null) {
                    info.path = entry.imagePath;
                } else if (entry.path != null) {
                    info.path = entry.path;
                }
                info.thumbPath = entry.thumbPath;
                info.isVideo = entry.isVideo;
                info.caption = entry.caption != null ? entry.caption.toString() : null;
                info.entities = entry.entities;
                info.masks = entry.stickers;
                info.ttl = entry.ttl;
                info.videoEditedInfo = entry.editedInfo;
                info.canDeleteAfter = entry.canDeleteAfter;
                photos.add(info);
                entry.reset();
            }
            fillEditingMediaWithCaption(photos.get(0).caption, photos.get(0).entities);
            SendMessagesHelper.prepareSendingMedia(getAccountInstance(), photos, this.dialog_id, null, getThreadMessage(), null, forceDocument, true, null, notify, scheduleDate);
            afterMessageSend();
            this.chatActivityEnterView.setFieldText("");
        }
        if (scheduleDate != 0) {
            if (this.scheduledMessagesCount == -1) {
                this.scheduledMessagesCount = 0;
            }
            this.scheduledMessagesCount += entries.size();
            updateScheduledInterface(true);
        }
    }

    private void openEditingMessageInPhotoEditor() {
        File file;
        MessageObject messageObject = this.editingMessageObject;
        if (messageObject == null || !messageObject.canEditMedia() || this.editingMessageObjectReqId != 0) {
            return;
        }
        if (!this.editingMessageObject.isPhoto() && !this.editingMessageObject.isVideo()) {
            return;
        }
        final MessageObject object = this.editingMessageObject;
        File file2 = null;
        if (!TextUtils.isEmpty(object.messageOwner.attachPath)) {
            file2 = new File(object.messageOwner.attachPath);
            if (!file2.exists()) {
                file2 = null;
            }
        }
        if (file2 != null) {
            file = file2;
        } else {
            File file3 = FileLoader.getInstance(this.currentAccount).getPathToMessage(object.messageOwner);
            file = file3;
        }
        if (file.exists()) {
            PhotoViewer.getInstance().setParentActivity(getParentActivity(), this.themeDelegate);
            ArrayList<Object> photos = new ArrayList<>();
            final MediaController.PhotoEntry entry = new MediaController.PhotoEntry(0, 0, 0L, file.getAbsolutePath(), 0, object.isVideo(), 0, 0, 0L);
            entry.caption = this.chatActivityEnterView.getFieldText();
            photos.add(entry);
            PhotoViewer.getInstance().openPhotoForSelect(photos, 0, 2, false, new PhotoViewer.EmptyPhotoViewerProvider() { // from class: org.telegram.ui.ChatActivity.82
                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject2, TLRPC.FileLocation fileLocation, int index, boolean needPreview) {
                    return ChatActivity.this.getPlaceForPhoto(object, null, needPreview, true);
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public void sendButtonPressed(int index, VideoEditedInfo videoEditedInfo, boolean notify, int scheduleDate, boolean forceDocument) {
                    if (ChatActivity.this.editingMessageObject != object) {
                        return;
                    }
                    if (entry.isCropped || entry.isPainted || entry.isFiltered || videoEditedInfo != null) {
                        ChatActivity.this.sendMedia(entry, videoEditedInfo, notify, scheduleDate, forceDocument);
                    } else {
                        ChatActivity.this.chatActivityEnterView.doneEditingMessage();
                    }
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public boolean canCaptureMorePhotos() {
                    return false;
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public boolean allowSendingSubmenu() {
                    return false;
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public MessageObject getEditingMessageObject() {
                    MessageObject messageObject2 = ChatActivity.this.editingMessageObject;
                    MessageObject messageObject3 = object;
                    if (messageObject2 == messageObject3) {
                        return messageObject3;
                    }
                    return null;
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public void onCaptionChanged(CharSequence caption) {
                    if (ChatActivity.this.editingMessageObject == object) {
                        ChatActivity.this.chatActivityEnterView.setFieldText(caption, true);
                    }
                }

                @Override // org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider, org.telegram.ui.PhotoViewer.PhotoViewerProvider
                public boolean closeKeyboard() {
                    if (ChatActivity.this.chatActivityEnterView != null && ChatActivity.this.isKeyboardVisible()) {
                        ChatActivity.this.chatActivityEnterView.closeKeyboard();
                        return true;
                    }
                    return false;
                }
            }, this);
        }
    }

    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, boolean needPreview, boolean onlyIfVisible) {
        TLRPC.Chat chat;
        FrameLayout frameLayout;
        ChatActionCell cell;
        MessageObject message;
        ChatMessageCell cell2;
        MessageObject message2;
        int count = this.chatListView.getChildCount();
        int a = 0;
        while (true) {
            ClippingImageView clippingImageView = null;
            if (a < count) {
                ImageReceiver imageReceiver = null;
                View view = this.chatListView.getChildAt(a);
                if (view instanceof ChatMessageCell) {
                    if (messageObject != null && (message2 = (cell2 = (ChatMessageCell) view).getMessageObject()) != null && message2.getId() == messageObject.getId()) {
                        imageReceiver = cell2.getPhotoImage();
                    }
                } else if ((view instanceof ChatActionCell) && (message = (cell = (ChatActionCell) view).getMessageObject()) != null) {
                    if (messageObject != null) {
                        if (message.getId() == messageObject.getId()) {
                            imageReceiver = cell.getPhotoImage();
                        }
                    } else if (fileLocation != null && message.photoThumbs != null) {
                        int b = 0;
                        while (true) {
                            if (b >= message.photoThumbs.size()) {
                                break;
                            }
                            TLRPC.PhotoSize photoSize = message.photoThumbs.get(b);
                            if (photoSize.location == null || photoSize.location.volume_id != fileLocation.volume_id || photoSize.location.local_id != fileLocation.local_id) {
                                b++;
                            } else {
                                imageReceiver = cell.getPhotoImage();
                                break;
                            }
                        }
                    }
                }
                if (imageReceiver == null) {
                    a++;
                } else if (onlyIfVisible && view.getY() + imageReceiver.getImageY2() < this.chatListViewPaddingTop - AndroidUtilities.dp(4.0f)) {
                    return null;
                } else {
                    int[] coords = new int[2];
                    view.getLocationInWindow(coords);
                    PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
                    int i = 0;
                    object.viewX = coords[0];
                    int i2 = coords[1];
                    if (Build.VERSION.SDK_INT < 21) {
                        i = AndroidUtilities.statusBarHeight;
                    }
                    object.viewY = i2 - i;
                    object.parentView = this.chatListView;
                    if (!SharedConfig.smoothKeyboard && (frameLayout = this.pagedownButton) != null && frameLayout.getTag() != null && (view instanceof ChatMessageCell)) {
                        clippingImageView = this.animatingImageView;
                    }
                    object.animatingImageView = clippingImageView;
                    object.imageReceiver = imageReceiver;
                    if (needPreview) {
                        object.thumb = imageReceiver.getBitmapSafe();
                    }
                    object.radius = imageReceiver.getRoundRadius();
                    if ((view instanceof ChatActionCell) && (chat = this.currentChat) != null) {
                        object.dialogId = -chat.id;
                    }
                    object.clipTopAddition = (int) ((this.chatListViewPaddingTop - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f));
                    object.clipBottomAddition = this.blurredViewBottomOffset;
                    return object;
                }
            } else {
                return null;
            }
        }
    }

    private void showAttachmentError() {
        if (getParentActivity() == null) {
            return;
        }
        BulletinFactory.of(this).createErrorBulletin(LocaleController.getString("UnsupportedAttachment", R.string.UnsupportedAttachment), this.themeDelegate).show();
    }

    public void fillEditingMediaWithCaption(CharSequence caption, ArrayList<TLRPC.MessageEntity> entities) {
        if (this.editingMessageObject == null) {
            return;
        }
        if (!TextUtils.isEmpty(caption)) {
            this.editingMessageObject.editingMessage = caption;
            this.editingMessageObject.editingMessageEntities = entities;
            return;
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            this.editingMessageObject.editingMessage = chatActivityEnterView.getFieldText();
            if (this.editingMessageObject.editingMessage == null && !TextUtils.isEmpty(this.editingMessageObject.messageOwner.message)) {
                this.editingMessageObject.editingMessage = "";
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:17:0x0048  */
    /* JADX WARN: Removed duplicated region for block: B:18:0x0050  */
    /* JADX WARN: Removed duplicated region for block: B:27:0x0075  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x0091  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private void sendUriAsDocument(android.net.Uri r25) {
        /*
            r24 = this;
            r1 = r24
            if (r25 != 0) goto L5
            return
        L5:
            java.lang.String r2 = r25.toString()
            java.lang.String r0 = "com.google.android.apps.photos.contentprovider"
            boolean r0 = r2.contains(r0)
            r3 = 0
            if (r0 == 0) goto L3c
            java.lang.String r0 = "/1/"
            java.lang.String[] r0 = r2.split(r0)     // Catch: java.lang.Exception -> L38
            r4 = 1
            r0 = r0[r4]     // Catch: java.lang.Exception -> L38
            java.lang.String r4 = "/ACTUAL"
            int r4 = r0.indexOf(r4)     // Catch: java.lang.Exception -> L38
            r5 = -1
            if (r4 == r5) goto L34
            java.lang.String r5 = r0.substring(r3, r4)     // Catch: java.lang.Exception -> L38
            r0 = r5
            java.lang.String r5 = "UTF-8"
            java.lang.String r5 = java.net.URLDecoder.decode(r0, r5)     // Catch: java.lang.Exception -> L38
            android.net.Uri r6 = android.net.Uri.parse(r5)     // Catch: java.lang.Exception -> L38
            goto L36
        L34:
            r6 = r25
        L36:
            r0 = r6
            goto L3e
        L38:
            r0 = move-exception
            org.telegram.messenger.FileLog.e(r0)
        L3c:
            r0 = r25
        L3e:
            java.lang.String r4 = org.telegram.messenger.AndroidUtilities.getPath(r0)
            r5 = r4
            r6 = 0
            boolean r7 = org.telegram.messenger.BuildVars.NO_SCOPED_STORAGE
            if (r7 != 0) goto L50
            r6 = 1
            r21 = r4
            r22 = r5
            r23 = r6
            goto L6f
        L50:
            if (r4 != 0) goto L69
            java.lang.String r5 = r0.toString()
            java.lang.String r7 = "file"
            java.lang.String r4 = org.telegram.messenger.MediaController.copyFileToCache(r0, r7)
            if (r4 != 0) goto L62
            r24.showAttachmentError()
            return
        L62:
            r21 = r4
            r22 = r5
            r23 = r6
            goto L6f
        L69:
            r21 = r4
            r22 = r5
            r23 = r6
        L6f:
            r4 = 0
            r1.fillEditingMediaWithCaption(r4, r4)
            if (r23 == 0) goto L91
            org.telegram.messenger.AccountInstance r4 = r24.getAccountInstance()
            r5 = 0
            r6 = 0
            r8 = 0
            r9 = 0
            long r10 = r1.dialog_id
            org.telegram.messenger.MessageObject r12 = r1.replyingMessageObject
            org.telegram.messenger.MessageObject r13 = r24.getThreadMessage()
            r14 = 0
            org.telegram.messenger.MessageObject r15 = r1.editingMessageObject
            r16 = 1
            r17 = 0
            r7 = r0
            org.telegram.messenger.SendMessagesHelper.prepareSendingDocument(r4, r5, r6, r7, r8, r9, r10, r12, r13, r14, r15, r16, r17)
            goto Lb1
        L91:
            org.telegram.messenger.AccountInstance r7 = r24.getAccountInstance()
            r10 = 0
            r11 = 0
            r12 = 0
            long r13 = r1.dialog_id
            org.telegram.messenger.MessageObject r15 = r1.replyingMessageObject
            org.telegram.messenger.MessageObject r16 = r24.getThreadMessage()
            r17 = 0
            org.telegram.messenger.MessageObject r4 = r1.editingMessageObject
            r19 = 1
            r20 = 0
            r8 = r21
            r9 = r22
            r18 = r4
            org.telegram.messenger.SendMessagesHelper.prepareSendingDocument(r7, r8, r9, r10, r11, r12, r13, r15, r16, r17, r18, r19, r20)
        Lb1:
            r1.hideFieldPanel(r3)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.sendUriAsDocument(android.net.Uri):void");
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
        if (resultCode == -1) {
            if (requestCode == 0 || requestCode == 2) {
                createChatAttachView();
                ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
                if (chatAttachAlert != null) {
                    chatAttachAlert.getPhotoLayout().onActivityResultFragment(requestCode, data, this.currentPicturePath);
                }
                this.currentPicturePath = null;
            } else if (requestCode == 1) {
                if (data == null || data.getData() == null) {
                    showAttachmentError();
                    return;
                }
                final Uri uri = data.getData();
                if (uri.toString().contains("video")) {
                    String videoPath = null;
                    try {
                        videoPath = AndroidUtilities.getPath(uri);
                    } catch (Exception e) {
                        FileLog.e(e);
                    }
                    if (videoPath == null) {
                        showAttachmentError();
                    }
                    if (this.paused) {
                        this.startVideoEdit = videoPath;
                    } else {
                        openVideoEditor(videoPath, null);
                    }
                } else if (this.editingMessageObject == null && this.chatMode == 1) {
                    AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda151
                        @Override // org.telegram.ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                        public final void didSelectDate(boolean z, int i) {
                            ChatActivity.this.m1872lambda$onActivityResultFragment$115$orgtelegramuiChatActivity(uri, z, i);
                        }
                    }, this.themeDelegate);
                } else {
                    fillEditingMediaWithCaption(null, null);
                    SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), null, uri, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, null, null, null, 0, this.editingMessageObject, true, 0);
                }
                afterMessageSend();
            } else if (requestCode == 21) {
                if (data == null) {
                    showAttachmentError();
                    return;
                }
                if (data.getData() != null) {
                    sendUriAsDocument(data.getData());
                } else if (data.getClipData() != null) {
                    ClipData clipData = data.getClipData();
                    for (int i = 0; i < clipData.getItemCount(); i++) {
                        sendUriAsDocument(clipData.getItemAt(i).getUri());
                    }
                } else {
                    showAttachmentError();
                }
                ChatAttachAlert chatAttachAlert2 = this.chatAttachAlert;
                if (chatAttachAlert2 != null) {
                    chatAttachAlert2.dismiss();
                }
                afterMessageSend();
            }
        }
    }

    /* renamed from: lambda$onActivityResultFragment$115$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1872lambda$onActivityResultFragment$115$orgtelegramuiChatActivity(Uri uri, boolean notify, int scheduleDate) {
        fillEditingMediaWithCaption(null, null);
        SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), null, uri, this.dialog_id, this.replyingMessageObject, getThreadMessage(), null, null, null, null, 0, this.editingMessageObject, notify, scheduleDate);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void saveSelfArgs(Bundle args) {
        String str = this.currentPicturePath;
        if (str != null) {
            args.putString("path", str);
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void restoreSelfArgs(Bundle args) {
        this.currentPicturePath = args.getString("path");
    }

    private void removeUnreadPlane(boolean scrollToEnd) {
        MessageObject messageObject = this.unreadMessageObject;
        if (messageObject != null) {
            if (scrollToEnd) {
                boolean[] zArr = this.forwardEndReached;
                zArr[1] = true;
                zArr[0] = true;
                this.first_unread_id = 0;
                this.last_message_id = 0;
            }
            this.createUnreadMessageAfterId = 0;
            this.createUnreadMessageAfterIdLoading = false;
            removeMessageObject(messageObject);
            this.unreadMessageObject = null;
        }
    }

    /*  JADX ERROR: JadxRuntimeException in pass: BlockProcessor
        jadx.core.utils.exceptions.JadxRuntimeException: CFG modification limit reached, blocks count: 3161
        	at jadx.core.dex.visitors.blocks.BlockProcessor.processBlocksTree(BlockProcessor.java:70)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.visit(BlockProcessor.java:44)
        */
    @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
    public void didReceivedNotification(int r69, int r70, java.lang.Object... r71) {
        /*
            Method dump skipped, instructions count: 15013
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.didReceivedNotification(int, int, java.lang.Object[]):void");
    }

    /* renamed from: lambda$didReceivedNotification$116$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1856lambda$didReceivedNotification$116$orgtelegramuiChatActivity() {
        getNotificationCenter().onAnimationFinish(this.transitionAnimationIndex);
    }

    /* renamed from: lambda$didReceivedNotification$117$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1857lambda$didReceivedNotification$117$orgtelegramuiChatActivity() {
        getNotificationCenter().runDelayedNotifications();
        resumeDelayedFragmentAnimation();
        AndroidUtilities.cancelRunOnUIThread(this.fragmentTransitionRunnable);
        this.fragmentTransitionRunnable.run();
    }

    /* renamed from: lambda$didReceivedNotification$118$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1858lambda$didReceivedNotification$118$orgtelegramuiChatActivity(MessageObject obj, int maxReadId) {
        this.delayedReadRunnable = null;
        obj.messageOwner.replies.read_max_id = maxReadId;
    }

    public static /* synthetic */ void lambda$didReceivedNotification$120(Theme.ThemeAccent themeAccent, Theme.ThemeInfo themeInfo, boolean deleteTheme) {
        if (themeAccent != null) {
            Theme.ThemeAccent prevAccent = themeInfo.getAccent(false);
            NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, themeInfo, false, null, Integer.valueOf(themeAccent.id));
            if (deleteTheme) {
                Theme.deleteThemeAccent(themeInfo, prevAccent, true);
                return;
            }
            return;
        }
        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needSetDayNightTheme, themeInfo, false, null, -1);
    }

    /* renamed from: lambda$didReceivedNotification$121$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1859lambda$didReceivedNotification$121$orgtelegramuiChatActivity(int messageId) {
        playReactionAnimation(Integer.valueOf(messageId));
    }

    private void checkSecretMessageForLocation(MessageObject messageObject) {
        if (messageObject.type != 4 || this.locationAlertShown || SharedConfig.isSecretMapPreviewSet()) {
            return;
        }
        this.locationAlertShown = true;
        AlertsCreator.showSecretLocationAlert(getParentActivity(), this.currentAccount, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda21
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1763x2abb9642();
            }
        }, true, this.themeDelegate);
    }

    /* renamed from: lambda$checkSecretMessageForLocation$122$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1763x2abb9642() {
        int count = this.chatListView.getChildCount();
        for (int a = 0; a < count; a++) {
            View view = this.chatListView.getChildAt(a);
            if (view instanceof ChatMessageCell) {
                ChatMessageCell cell = (ChatMessageCell) view;
                MessageObject message = cell.getMessageObject();
                if (message.type == 4) {
                    cell.forceResetMessageObject();
                }
            }
        }
    }

    private void loadSendAsPeers(boolean animatedUpdate) {
        TLRPC.Chat chat;
        if (this.sendAsPeersObj != null || (chat = this.currentChat) == null || !ChatObject.canSendAsPeers(chat) || this.chatActivityEnterView == null) {
            return;
        }
        TLRPC.TL_channels_sendAsPeers sendAsPeers = getMessagesController().getSendAsPeers(this.dialog_id);
        this.sendAsPeersObj = sendAsPeers;
        if (sendAsPeers != null) {
            this.chatActivityEnterView.updateSendAsButton(animatedUpdate);
        }
    }

    private void addSponsoredMessages(boolean animated) {
        ArrayList<MessageObject> arrayList;
        if (this.sponsoredMessagesAdded || this.chatMode != 0 || !ChatObject.isChannel(this.currentChat) || !this.forwardEndReached[0] || getUserConfig().isPremium() || (arrayList = getMessagesController().getSponsoredMessages(this.dialog_id)) == null) {
            return;
        }
        for (int i = 0; i < arrayList.size(); i++) {
            MessageObject messageObject = arrayList.get(i);
            messageObject.resetLayout();
            long dialogId = MessageObject.getPeerId(messageObject.messageOwner.from_id);
            int messageId = 0;
            if (messageObject.sponsoredChannelPost != 0) {
                messageId = messageObject.sponsoredChannelPost;
            }
            getMessagesController().ensureMessagesLoaded(dialogId, messageId, null);
        }
        this.sponsoredMessagesAdded = true;
        processNewMessages(arrayList);
    }

    private void checkGroupCallJoin(boolean fromServer) {
        TLRPC.ChatFull chatFull;
        String str;
        ChatObject.Call call2 = this.groupCall;
        if (call2 == null || (str = this.voiceChatHash) == null || !this.openAnimationEnded) {
            if (this.voiceChatHash != null && fromServer && (chatFull = this.chatInfo) != null && chatFull.call == null && this.fragmentView != null && getParentActivity() != null) {
                BulletinFactory.of(this).createSimpleBulletin(R.raw.linkbroken, LocaleController.getString("LinkHashExpired", R.string.LinkHashExpired)).show();
                this.voiceChatHash = null;
            }
            this.lastCallCheckFromServer = !this.openAnimationEnded;
            return;
        }
        VoIPHelper.startCall(this.currentChat, null, str, this.createGroupCall, Boolean.valueOf(!call2.call.rtmp_stream), getParentActivity(), this, getAccountInstance());
        this.voiceChatHash = null;
    }

    private void checkWaitingForReplies() {
        MessageObject obj;
        int row;
        if (this.waitingForReplies.size() == 0) {
            return;
        }
        ArrayList<Integer> idsToRemove = null;
        LongSparseArray<MessageObject.GroupedMessages> newGroups = null;
        ArrayList<Integer> updatedRows = null;
        int N = this.waitingForReplies.size();
        for (int a = 0; a < N; a++) {
            MessageObject object = this.waitingForReplies.valueAt(a);
            if (object.replyMessageObject != null) {
                if (idsToRemove == null) {
                    idsToRemove = new ArrayList<>();
                }
                idsToRemove.add(Integer.valueOf(this.waitingForReplies.keyAt(a)));
                if (!(object.messageOwner.action instanceof TLRPC.TL_messageActionPinMessage) && object.replyMessageObject.messageOwner.fwd_from != null && MessageObject.getPeerId(object.replyMessageObject.messageOwner.fwd_from.saved_from_peer) == this.dialog_id && object.replyMessageObject.messageOwner.fwd_from.channel_post != 0 && (obj = this.messagesDict[0].get(object.replyMessageObject.messageOwner.fwd_from.channel_post)) != null && obj.messageOwner.replies != null) {
                    obj.messageOwner.replies.replies++;
                    obj.animateComments = true;
                    TLRPC.Peer peer = object.messageOwner.from_id;
                    if (peer == null) {
                        peer = object.messageOwner.peer_id;
                    }
                    int c = 0;
                    int N2 = obj.messageOwner.replies.recent_repliers.size();
                    while (true) {
                        if (c < N2) {
                            if (MessageObject.getPeerId(obj.messageOwner.replies.recent_repliers.get(c)) != MessageObject.getPeerId(peer)) {
                                c++;
                            } else {
                                obj.messageOwner.replies.recent_repliers.remove(c);
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                    obj.messageOwner.replies.recent_repliers.add(0, peer);
                    if (!object.isOut()) {
                        obj.messageOwner.replies.max_id = object.getId();
                    }
                    getMessagesStorage().updateRepliesCount(this.currentChat.id, obj.getId(), obj.messageOwner.replies.recent_repliers, obj.messageOwner.replies.max_id, 1);
                    if (!obj.hasValidGroupId()) {
                        if (this.chatAdapter != null && (row = this.messages.indexOf(obj)) >= 0) {
                            if (updatedRows == null) {
                                updatedRows = new ArrayList<>();
                            }
                            updatedRows.add(Integer.valueOf(this.chatAdapter.messagesStartRow + row));
                        }
                    } else {
                        MessageObject.GroupedMessages groupedMessages = this.groupedMessagesMap.get(obj.getGroupId());
                        if (groupedMessages != null) {
                            if (newGroups == null) {
                                newGroups = new LongSparseArray<>();
                            }
                            newGroups.put(groupedMessages.groupId, groupedMessages);
                            int N22 = groupedMessages.messages.size();
                            for (int b = 0; b < N22; b++) {
                                groupedMessages.messages.get(b).animateComments = true;
                            }
                        }
                    }
                }
            }
        }
        if (idsToRemove != null) {
            int N3 = idsToRemove.size();
            for (int a2 = 0; a2 < N3; a2++) {
                this.waitingForReplies.remove(idsToRemove.get(a2).intValue());
            }
        }
        if (this.chatAdapter != null) {
            if (newGroups != null) {
                int N4 = newGroups.size();
                for (int b2 = 0; b2 < N4; b2++) {
                    MessageObject.GroupedMessages groupedMessages2 = newGroups.valueAt(b2);
                    MessageObject messageObject = groupedMessages2.messages.get(groupedMessages2.messages.size() - 1);
                    int index = this.messages.indexOf(messageObject);
                    if (index >= 0) {
                        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                        chatActivityAdapter.notifyItemRangeChanged(chatActivityAdapter.messagesStartRow + index, groupedMessages2.messages.size());
                    }
                }
            }
            if (updatedRows != null) {
                int N5 = updatedRows.size();
                for (int b3 = 0; b3 < N5; b3++) {
                    this.chatAdapter.notifyItemChanged(updatedRows.get(b3).intValue());
                }
            }
        }
    }

    private void clearHistory(boolean overwrite, TLRPC.TL_updates_channelDifferenceTooLong differenceTooLong) {
        TLRPC.User user;
        if (overwrite) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("clear history by overwrite firstLoading=" + this.firstLoading + " minMessage=" + this.minMessageId[0] + " topMessage=" + differenceTooLong.dialog.top_message);
            }
            int i = differenceTooLong.dialog.top_message;
            int[] iArr = this.minMessageId;
            if (i > iArr[0]) {
                this.createUnreadMessageAfterId = Math.max(iArr[0] + 1, differenceTooLong.dialog.read_inbox_max_id);
            }
            this.forwardEndReached[0] = false;
            this.hideForwardEndReached = false;
            ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
            if (chatActivityAdapter != null && chatActivityAdapter.loadingDownRow < 0) {
                this.chatAdapter.notifyItemInserted(0);
            }
            this.newUnreadMessageCount = differenceTooLong.dialog.unread_count;
            this.newMentionsCount = differenceTooLong.dialog.unread_mentions_count;
            int i2 = this.prevSetUnreadCount;
            int i3 = this.newUnreadMessageCount;
            if (i2 != i3) {
                CounterView counterView = this.pagedownButtonCounter;
                if (counterView != null) {
                    counterView.setCount(i3, this.openAnimationEnded);
                }
                this.prevSetUnreadCount = this.newUnreadMessageCount;
                updatePagedownButtonVisibility(true);
            }
            if (this.newMentionsCount != differenceTooLong.dialog.unread_mentions_count) {
                int i4 = differenceTooLong.dialog.unread_mentions_count;
                this.newMentionsCount = i4;
                if (i4 <= 0) {
                    this.newMentionsCount = 0;
                    this.hasAllMentionsLocal = true;
                    showMentionDownButton(false, true);
                } else {
                    SimpleTextView simpleTextView = this.mentiondownButtonCounter;
                    if (simpleTextView != null) {
                        simpleTextView.setText(String.format("%d", Integer.valueOf(i4)));
                    }
                    showMentionDownButton(true, true);
                }
            }
            checkScrollForLoad(false);
            return;
        }
        this.messages.clear();
        this.waitingForLoad.clear();
        this.messagesByDays.clear();
        this.groupedMessagesMap.clear();
        this.threadMessageAdded = false;
        for (int a = 1; a >= 0; a--) {
            this.messagesDict[a].clear();
            if (this.currentEncryptedChat == null) {
                this.maxMessageId[a] = Integer.MAX_VALUE;
                this.minMessageId[a] = Integer.MIN_VALUE;
            } else {
                this.maxMessageId[a] = Integer.MIN_VALUE;
                this.minMessageId[a] = Integer.MAX_VALUE;
            }
            this.maxDate[a] = Integer.MIN_VALUE;
            this.minDate[a] = 0;
            this.selectedMessagesIds[a].clear();
            this.selectedMessagesCanCopyIds[a].clear();
            this.selectedMessagesCanStarIds[a].clear();
        }
        hideActionMode();
        updatePinnedMessageView(true);
        if (this.botButtons != null) {
            this.botButtons = null;
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.setButtons(null, false);
            }
        }
        if (this.progressView != null) {
            showProgressView(false);
            this.chatListView.setEmptyView(this.emptyViewContainer);
        }
        ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
        if (chatActivityAdapter2 != null) {
            chatActivityAdapter2.notifyDataSetChanged(false);
        }
        if (this.currentEncryptedChat == null && (user = this.currentUser) != null && user.bot && this.botUser == null) {
            this.botUser = "";
            updateBottomOverlay();
        }
    }

    public boolean processSwitchButton(TLRPC.TL_keyboardButtonSwitchInline button) {
        if (this.inlineReturn == 0 || button.same_peer || this.parentLayout == null) {
            return false;
        }
        String query = "@" + this.currentUser.username + " " + button.query;
        if (this.inlineReturn == this.dialog_id) {
            this.inlineReturn = 0L;
            this.chatActivityEnterView.setFieldText(query);
        } else {
            getMediaDataController().saveDraft(this.inlineReturn, 0, query, null, null, false);
            if (this.parentLayout.fragmentsStack.size() > 1) {
                BaseFragment prevFragment = this.parentLayout.fragmentsStack.get(this.parentLayout.fragmentsStack.size() - 2);
                if ((prevFragment instanceof ChatActivity) && ((ChatActivity) prevFragment).dialog_id == this.inlineReturn) {
                    finishFragment();
                } else {
                    Bundle bundle = new Bundle();
                    if (DialogObject.isEncryptedDialog(this.inlineReturn)) {
                        bundle.putInt("enc_id", DialogObject.getEncryptedChatId(this.inlineReturn));
                    } else if (DialogObject.isUserDialog(this.inlineReturn)) {
                        bundle.putLong("user_id", this.inlineReturn);
                    } else {
                        bundle.putLong(ChatReactionsEditActivity.KEY_CHAT_ID, -this.inlineReturn);
                    }
                    addToPulledDialogsMyself();
                    presentFragment(new ChatActivity(bundle), true);
                }
            }
        }
        return true;
    }

    private void showGigagroupConvertAlert() {
        if (this.chatInfo != null && !this.paused && this.currentChat.creator && this.currentChat.megagroup && !this.currentChat.gigagroup && this.chatInfo.pending_suggestions.contains("CONVERT_GIGAGROUP") && this.visibleDialog == null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda57
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1952x538ab9df();
                }
            }, 1000L);
        }
    }

    /* renamed from: lambda$showGigagroupConvertAlert$125$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1952x538ab9df() {
        if (this.chatInfo != null && !this.paused && this.currentChat.creator && this.currentChat.megagroup && !this.currentChat.gigagroup && this.chatInfo.pending_suggestions.contains("CONVERT_GIGAGROUP") && this.visibleDialog == null) {
            SharedPreferences preferences = MessagesController.getNotificationsSettings(this.currentAccount);
            int lastShowTime = preferences.getInt("group_convert_time", 0);
            int timeout = BuildVars.DEBUG_PRIVATE_VERSION ? 120 : 604800;
            int currentTime = getConnectionsManager().getCurrentTime();
            if (Math.abs(currentTime - lastShowTime) >= timeout && this.visibleDialog == null && getParentActivity() != null) {
                preferences.edit().putInt("group_convert_time", currentTime).commit();
                showDialog(AlertsCreator.createGigagroupConvertAlert(getParentActivity(), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda183
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i) {
                        ChatActivity.this.m1950x523162a1(dialogInterface, i);
                    }
                }, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda184
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i) {
                        ChatActivity.this.m1951x52de0e40(dialogInterface, i);
                    }
                }).create());
            }
        }
    }

    /* renamed from: org.telegram.ui.ChatActivity$83 */
    /* loaded from: classes4.dex */
    public class AnonymousClass83 extends GigagroupConvertAlert {
        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass83(Context context, BaseFragment parentFragment) {
            super(context, parentFragment);
            ChatActivity.this = this$0;
        }

        @Override // org.telegram.ui.Components.GigagroupConvertAlert
        protected void onCovert() {
            ChatActivity.this.getMessagesController().convertToGigaGroup(ChatActivity.this.getParentActivity(), ChatActivity.this.currentChat, ChatActivity.this, new MessagesStorage.BooleanCallback() { // from class: org.telegram.ui.ChatActivity$83$$ExternalSyntheticLambda0
                @Override // org.telegram.messenger.MessagesStorage.BooleanCallback
                public final void run(boolean z) {
                    ChatActivity.AnonymousClass83.this.m2014lambda$onCovert$0$orgtelegramuiChatActivity$83(z);
                }
            });
        }

        /* renamed from: lambda$onCovert$0$org-telegram-ui-ChatActivity$83 */
        public /* synthetic */ void m2014lambda$onCovert$0$orgtelegramuiChatActivity$83(boolean result) {
            if (result) {
                ChatActivity.this.undoView.showWithAction(0L, 76, (Runnable) null);
            }
        }

        @Override // org.telegram.ui.Components.GigagroupConvertAlert
        protected void onCancel() {
            ChatActivity.this.undoView.showWithAction(0L, 75, (Runnable) null);
            ChatActivity.this.getMessagesController().removeSuggestion(ChatActivity.this.dialog_id, "CONVERT_GIGAGROUP");
        }
    }

    /* renamed from: lambda$showGigagroupConvertAlert$123$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1950x523162a1(DialogInterface dialog, int which) {
        showDialog(new AnonymousClass83(getParentActivity(), this));
    }

    /* renamed from: lambda$showGigagroupConvertAlert$124$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1951x52de0e40(DialogInterface dialog, int which) {
        this.undoView.showWithAction(0L, 75, (Runnable) null);
    }

    private void addReplyMessageOwner(MessageObject obj, Integer oldId) {
        if (obj.replyMessageObject == null) {
            return;
        }
        int id = obj.replyMessageObject.getId();
        ArrayList<Integer> ids = this.replyMessageOwners.get(id);
        if (ids == null) {
            ids = new ArrayList<>();
            this.replyMessageOwners.put(id, ids);
        }
        int id2 = obj.getId();
        if (!ids.contains(Integer.valueOf(id2))) {
            ids.add(Integer.valueOf(id2));
        }
        if (oldId.intValue() != 0) {
            ids.remove(oldId);
        }
    }

    private void updateReplyMessageOwners(int id, MessageObject update) {
        ArrayList<Integer> ids = this.replyMessageOwners.get(id);
        if (ids == null) {
            return;
        }
        MessageObject emptyMessage = update == null ? new MessageObject(this.currentAccount, new TLRPC.TL_messageEmpty(), false, false) : null;
        int N = ids.size();
        for (int a = 0; a < N; a++) {
            MessageObject object = this.messagesDict[0].get(ids.get(a).intValue());
            if (object != null) {
                if (update == null) {
                    object.replyMessageObject = emptyMessage;
                } else {
                    object.replyMessageObject = update;
                }
                ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                if (chatActivityAdapter != null) {
                    chatActivityAdapter.updateRowWithMessageObject(object, true);
                }
            }
        }
        if (update == null) {
            this.replyMessageOwners.remove(id);
        }
    }

    private void rotateMotionBackgroundDrawable() {
        MotionBackgroundDrawable motionDrawable;
        Drawable wallpaper = this.themeDelegate.getWallpaperDrawable();
        if (this.fragmentView != null) {
            wallpaper = ((SizeNotifierFrameLayout) this.fragmentView).getBackgroundImage();
        }
        if (wallpaper instanceof MotionBackgroundDrawable) {
            ((MotionBackgroundDrawable) wallpaper).switchToNextPosition();
        }
        Drawable drawable = getThemedDrawable(Theme.key_drawable_msgOut);
        if ((drawable instanceof Theme.MessageDrawable) && (motionDrawable = ((Theme.MessageDrawable) drawable).getMotionBackgroundDrawable()) != null) {
            motionDrawable.switchToNextPosition();
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:176:0x0331, code lost:
        if (r38.currentUser.id == r2) goto L177;
     */
    /* JADX WARN: Removed duplicated region for block: B:420:0x075c  */
    /* JADX WARN: Removed duplicated region for block: B:462:0x0839  */
    /* JADX WARN: Removed duplicated region for block: B:470:0x0858  */
    /* JADX WARN: Removed duplicated region for block: B:473:0x086e  */
    /* JADX WARN: Removed duplicated region for block: B:484:0x08a2  */
    /* JADX WARN: Removed duplicated region for block: B:617:0x0b7c  */
    /* JADX WARN: Removed duplicated region for block: B:618:0x0b83  */
    /* JADX WARN: Removed duplicated region for block: B:744:0x0889 A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private void processNewMessages(java.util.ArrayList<org.telegram.messenger.MessageObject> r39) {
        /*
            Method dump skipped, instructions count: 3477
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.processNewMessages(java.util.ArrayList):void");
    }

    /* renamed from: lambda$processNewMessages$126$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1907lambda$processNewMessages$126$orgtelegramuiChatActivity(int mid) {
        scrollToMessageId(mid, 0, false, 0, true, 0);
    }

    private int getSponsoredMessagesCount() {
        int sponsoredMessagesCount = 0;
        while (sponsoredMessagesCount < this.messages.size() && this.messages.get(sponsoredMessagesCount).isSponsored()) {
            sponsoredMessagesCount++;
        }
        return sponsoredMessagesCount;
    }

    /* JADX WARN: Code restructure failed: missing block: B:48:0x00e7, code lost:
        if (r15 == r43.groupedMessagesMap.get(r14.getGroupId())) goto L49;
     */
    /* JADX WARN: Removed duplicated region for block: B:128:0x02ab  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x00f5  */
    /* JADX WARN: Removed duplicated region for block: B:63:0x0139  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private void processDeletedMessages(java.util.ArrayList<java.lang.Integer> r44, long r45) {
        /*
            Method dump skipped, instructions count: 1279
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.processDeletedMessages(java.util.ArrayList, long):void");
    }

    private void replaceMessageObjects(ArrayList<MessageObject> messageObjects, int loadIndex, boolean remove) {
        ChatActivityAdapter chatActivityAdapter;
        MessageObject.GroupedMessages groupedMessages;
        int idx;
        ArrayList<MessageObject> arrayList = messageObjects;
        LongSparseArray<MessageObject.GroupedMessages> newGroups = null;
        int a = 0;
        while (a < messageObjects.size()) {
            MessageObject messageObject = arrayList.get(a);
            MessageObject pinnedOld = this.pinnedMessageObjects.get(Integer.valueOf(messageObject.getId()));
            if (pinnedOld != null) {
                this.pinnedMessageObjects.put(Integer.valueOf(messageObject.getId()), messageObject);
            }
            MessageObject old = this.messagesDict[loadIndex].get(messageObject.getId());
            if (this.pinnedMessageObjects.containsKey(Integer.valueOf(messageObject.getId()))) {
                this.pinnedMessageObjects.put(Integer.valueOf(messageObject.getId()), messageObject);
                if (messageObject.getId() == this.currentPinnedMessageId) {
                    updatePinnedMessageView(true);
                }
            }
            if (loadIndex == 0 && this.repliesMessagesDict.indexOfKey(messageObject.getId()) >= 0) {
                this.repliesMessagesDict.put(messageObject.getId(), messageObject);
            }
            if (old != null && (!remove || old.messageOwner.date == messageObject.messageOwner.date)) {
                if (remove) {
                    arrayList.remove(a);
                    a--;
                }
                addToPolls(messageObject, old);
                if (messageObject.type >= 0) {
                    if (old.replyMessageObject != null) {
                        messageObject.replyMessageObject = old.replyMessageObject;
                        if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionGameScore) {
                            messageObject.generateGameMessageText(null);
                        } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionPaymentSent) {
                            messageObject.generatePaymentSentMessageText(null);
                        }
                    }
                    if (!old.isEditing()) {
                        if (old.getFileName().equals(messageObject.getFileName())) {
                            messageObject.messageOwner.attachPath = old.messageOwner.attachPath;
                            messageObject.attachPathExists = old.attachPathExists;
                            messageObject.mediaExists = old.mediaExists;
                        } else {
                            messageObject.checkMediaExistance();
                        }
                    }
                    this.messagesDict[loadIndex].put(old.getId(), messageObject);
                } else {
                    this.messagesDict[loadIndex].remove(old.getId());
                }
                int index = this.messages.indexOf(old);
                if (index >= 0) {
                    ArrayList<MessageObject> dayArr = this.messagesByDays.get(old.dateKey);
                    int index2 = -1;
                    if (dayArr != null) {
                        index2 = dayArr.indexOf(old);
                    }
                    if (old.getGroupId() != 0 && (groupedMessages = this.groupedMessagesMap.get(old.getGroupId())) != null && (idx = groupedMessages.messages.indexOf(old)) >= 0) {
                        if (old.getGroupId() != messageObject.getGroupId()) {
                            this.groupedMessagesMap.put(messageObject.getGroupId(), groupedMessages);
                        }
                        if (!messageObject.isMusic() && !messageObject.isDocument() && (messageObject.photoThumbs == null || messageObject.photoThumbs.isEmpty())) {
                            if (newGroups == null) {
                                newGroups = new LongSparseArray<>();
                            }
                            newGroups.put(groupedMessages.groupId, groupedMessages);
                            if (idx > 0 && idx < groupedMessages.messages.size() - 1) {
                                MessageObject.GroupedMessages slicedGroup = new MessageObject.GroupedMessages();
                                slicedGroup.groupId = Utilities.random.nextLong();
                                slicedGroup.messages.addAll(groupedMessages.messages.subList(idx + 1, groupedMessages.messages.size()));
                                for (int b = 0; b < slicedGroup.messages.size(); b++) {
                                    slicedGroup.messages.get(b).localGroupId = slicedGroup.groupId;
                                    groupedMessages.messages.remove(idx + 1);
                                }
                                newGroups.put(slicedGroup.groupId, slicedGroup);
                                this.groupedMessagesMap.put(slicedGroup.groupId, slicedGroup);
                            }
                            groupedMessages.messages.remove(idx);
                        } else {
                            groupedMessages.messages.set(idx, messageObject);
                            MessageObject.GroupedMessagePosition oldPosition = groupedMessages.positions.remove(old);
                            if (oldPosition != null) {
                                groupedMessages.positions.put(messageObject, oldPosition);
                            }
                            if (newGroups == null) {
                                newGroups = new LongSparseArray<>();
                            }
                            newGroups.put(groupedMessages.groupId, groupedMessages);
                        }
                    }
                    if (messageObject.type >= 0) {
                        messageObject.stableId = old.stableId;
                        messageObject.messageOwner.premiumEffectWasPlayed = old.messageOwner.premiumEffectWasPlayed;
                        messageObject.forcePlayEffect = old.forcePlayEffect;
                        this.messages.set(index, messageObject);
                        ChatActivityAdapter chatActivityAdapter2 = this.chatAdapter;
                        if (chatActivityAdapter2 != null) {
                            chatActivityAdapter2.updateRowAtPosition(chatActivityAdapter2.messagesStartRow + index);
                        }
                        if (index2 >= 0) {
                            dayArr.set(index2, messageObject);
                        }
                    } else {
                        this.messages.remove(index);
                        ChatActivityAdapter chatActivityAdapter3 = this.chatAdapter;
                        if (chatActivityAdapter3 != null) {
                            chatActivityAdapter3.notifyItemRemoved(chatActivityAdapter3.messagesStartRow + index);
                        }
                        if (index2 >= 0) {
                            dayArr.remove(index2);
                            if (dayArr.isEmpty()) {
                                this.messagesByDays.remove(old.dateKey);
                                this.messages.remove(index);
                                int prevLoadingUpRow = this.chatAdapter.loadingUpRow;
                                int prevLoadingDownRow = this.chatAdapter.loadingDownRow;
                                ChatActivityAdapter chatActivityAdapter4 = this.chatAdapter;
                                chatActivityAdapter4.notifyItemRemoved(chatActivityAdapter4.messagesStartRow + index);
                                if (this.messages.isEmpty()) {
                                    if (prevLoadingUpRow >= 0) {
                                        this.chatAdapter.notifyItemRemoved(0);
                                    }
                                    if (prevLoadingDownRow >= 0) {
                                        this.chatAdapter.notifyItemRemoved(0);
                                    }
                                }
                            }
                        }
                    }
                }
                int prevLoadingUpRow2 = old.getId();
                updateReplyMessageOwners(prevLoadingUpRow2, messageObject);
            }
            a++;
            arrayList = messageObjects;
        }
        if (newGroups != null) {
            for (int b2 = 0; b2 < newGroups.size(); b2++) {
                MessageObject.GroupedMessages groupedMessages2 = newGroups.valueAt(b2);
                if (groupedMessages2.messages.isEmpty()) {
                    this.groupedMessagesMap.remove(groupedMessages2.groupId);
                } else {
                    groupedMessages2.calculate();
                    int index3 = this.messages.indexOf(groupedMessages2.messages.get(groupedMessages2.messages.size() - 1));
                    if (index3 >= 0 && (chatActivityAdapter = this.chatAdapter) != null) {
                        chatActivityAdapter.notifyItemRangeChanged(chatActivityAdapter.messagesStartRow + index3, groupedMessages2.messages.size());
                        ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
                        if (chatListItemAnimator != null) {
                            chatListItemAnimator.groupWillChanged(groupedMessages2);
                        }
                    }
                }
            }
        }
    }

    private void migrateToNewChat(final MessageObject obj) {
        if (this.parentLayout == null) {
            return;
        }
        final long channelId = obj.messageOwner.action.channel_id;
        final BaseFragment lastFragment = this.parentLayout.fragmentsStack.size() > 0 ? this.parentLayout.fragmentsStack.get(this.parentLayout.fragmentsStack.size() - 1) : null;
        int index = this.parentLayout.fragmentsStack.indexOf(this);
        final ActionBarLayout actionBarLayout = this.parentLayout;
        if (index > 0 && !(lastFragment instanceof ChatActivity) && !(lastFragment instanceof ProfileActivity) && this.currentChat.creator) {
            int N = actionBarLayout.fragmentsStack.size() - 1;
            for (int a = index; a < N; a++) {
                BaseFragment fragment = actionBarLayout.fragmentsStack.get(a);
                if (fragment instanceof ChatActivity) {
                    Bundle bundle = new Bundle();
                    bundle.putLong(ChatReactionsEditActivity.KEY_CHAT_ID, channelId);
                    actionBarLayout.addFragmentToStack(new ChatActivity(bundle), a);
                    fragment.removeSelfFromStack();
                } else if (fragment instanceof ProfileActivity) {
                    Bundle args = new Bundle();
                    args.putLong(ChatReactionsEditActivity.KEY_CHAT_ID, channelId);
                    actionBarLayout.addFragmentToStack(new ProfileActivity(args), a);
                    fragment.removeSelfFromStack();
                } else if (fragment instanceof ChatEditActivity) {
                    Bundle args2 = new Bundle();
                    args2.putLong(ChatReactionsEditActivity.KEY_CHAT_ID, channelId);
                    actionBarLayout.addFragmentToStack(new ChatEditActivity(args2), a);
                    fragment.removeSelfFromStack();
                } else if (fragment instanceof ChatUsersActivity) {
                    ChatUsersActivity usersActivity = (ChatUsersActivity) fragment;
                    if (!usersActivity.hasSelectType()) {
                        Bundle args3 = fragment.getArguments();
                        args3.putLong(ChatReactionsEditActivity.KEY_CHAT_ID, channelId);
                        actionBarLayout.addFragmentToStack(new ChatUsersActivity(args3), a);
                    }
                    fragment.removeSelfFromStack();
                }
            }
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda105
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1867lambda$migrateToNewChat$127$orgtelegramuiChatActivity(lastFragment, obj, actionBarLayout);
                }
            });
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda76
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1868lambda$migrateToNewChat$128$orgtelegramuiChatActivity(channelId);
            }
        }, 1000L);
    }

    /* renamed from: lambda$migrateToNewChat$127$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1867lambda$migrateToNewChat$127$orgtelegramuiChatActivity(BaseFragment lastFragment, MessageObject obj, ActionBarLayout actionBarLayout) {
        if (lastFragment instanceof NotificationCenter.NotificationCenterDelegate) {
            getNotificationCenter().removeObserver((NotificationCenter.NotificationCenterDelegate) lastFragment, NotificationCenter.closeChats);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.closeChats, new Object[0]);
        Bundle bundle = new Bundle();
        bundle.putLong(ChatReactionsEditActivity.KEY_CHAT_ID, obj.messageOwner.action.channel_id);
        actionBarLayout.addFragmentToStack(new ChatActivity(bundle), actionBarLayout.fragmentsStack.size() - 1);
        lastFragment.finishFragment();
    }

    /* renamed from: lambda$migrateToNewChat$128$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1868lambda$migrateToNewChat$128$orgtelegramuiChatActivity(long channelId) {
        getMessagesController().loadFullChat(channelId, 0, true);
    }

    private void addToPolls(MessageObject obj, MessageObject old) {
        long pollId = obj.getPollId();
        if (pollId != 0) {
            ArrayList<MessageObject> arrayList = this.polls.get(pollId);
            if (arrayList == null) {
                arrayList = new ArrayList<>();
                this.polls.put(pollId, arrayList);
            }
            arrayList.add(obj);
            if (old != null) {
                arrayList.remove(old);
            }
        }
    }

    public void showInfoHint(MessageObject messageObject, CharSequence text, final int type) {
        if (this.topUndoView == null) {
            return;
        }
        Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda70
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1953lambda$showInfoHint$129$orgtelegramuiChatActivity(type);
            }
        };
        this.topUndoView.showWithAction(0L, 18, text, runnable, runnable);
        this.hintMessageObject = messageObject;
        this.hintMessageType = type;
    }

    /* renamed from: lambda$showInfoHint$129$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1953lambda$showInfoHint$129$orgtelegramuiChatActivity(int type) {
        ChatMessageCell cell;
        MessageObject message;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            int count = recyclerListView.getChildCount();
            for (int a = 0; a < count; a++) {
                View view = this.chatListView.getChildAt(a);
                if ((view instanceof ChatMessageCell) && (message = (cell = (ChatMessageCell) view).getMessageObject()) != null && message.equals(this.hintMessageObject)) {
                    cell.showHintButton(true, true, type);
                }
            }
        }
        this.hintMessageObject = null;
    }

    public void showPollSolution(MessageObject messageObject, TLRPC.PollResults results) {
        CharSequence text;
        if (results == null || TextUtils.isEmpty(results.solution)) {
            return;
        }
        if (!results.solution_entities.isEmpty()) {
            CharSequence text2 = new SpannableStringBuilder(results.solution);
            MessageObject.addEntitiesToText(text2, results.solution_entities, false, true, true, false);
            text = text2;
        } else {
            text = results.solution;
        }
        showInfoHint(messageObject, text, 0);
    }

    public void updateSearchButtons(int mask, int num, int count) {
        ImageView imageView = this.searchUpButton;
        if (imageView != null) {
            imageView.setEnabled((mask & 1) != 0);
            this.searchDownButton.setEnabled((mask & 2) != 0);
            ImageView imageView2 = this.searchUpButton;
            float f = 1.0f;
            imageView2.setAlpha(imageView2.isEnabled() ? 1.0f : 0.5f);
            ImageView imageView3 = this.searchDownButton;
            if (!imageView3.isEnabled()) {
                f = 0.5f;
            }
            imageView3.setAlpha(f);
            if (count < 0) {
                this.searchCountText.setCount("", 0, false);
            } else if (count == 0) {
                this.searchCountText.setCount(LocaleController.getString("NoResult", R.string.NoResult), 0, false);
            } else {
                this.searchCountText.setCount(LocaleController.formatString("OfCounted", R.string.OfCounted, Integer.valueOf(num + 1), Integer.valueOf(count)), num + 1, true);
            }
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean needDelayOpenAnimation() {
        if (this.chatMode != 1 && getParentLayout().fragmentsStack.size() > 1) {
            BaseFragment previousFragment = getParentLayout().fragmentsStack.get(getParentLayout().fragmentsStack.size() - 2);
            if ((previousFragment instanceof ChatActivity) && ((ChatActivity) previousFragment).isKeyboardVisible()) {
                return false;
            }
        }
        return this.firstLoading;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onBecomeFullyVisible() {
        this.isFullyVisible = true;
        super.onBecomeFullyVisible();
        if (this.showCloseChatDialogLater) {
            showDialog(this.closeChatDialog);
        }
        if (this.parentLayout != null && this.parentLayout.getDrawerLayoutContainer() != null) {
            this.parentLayout.getDrawerLayoutContainer().setBehindKeyboardColor(getThemedColor(Theme.key_windowBackgroundWhite));
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onBecomeFullyHidden() {
        this.isFullyVisible = false;
        hideUndoViews();
        if (this.parentLayout != null && this.parentLayout.getDrawerLayoutContainer() != null) {
            this.parentLayout.getDrawerLayoutContainer().setBehindKeyboardColor(Theme.getColor(Theme.key_windowBackgroundWhite));
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void saveKeyboardPositionBeforeTransition() {
        Runnable runnable = this.cancelFixedPositionRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && this.contentView != null && chatActivityEnterView.getAdjustPanLayoutHelper() != null && !this.chatActivityEnterView.getAdjustPanLayoutHelper().animationInProgress()) {
            this.fixedKeyboardHeight = this.contentView.getKeyboardHeight();
        } else {
            this.fixedKeyboardHeight = -1;
        }
    }

    public void removeKeyboardPositionBeforeTransition() {
        if (this.fixedKeyboardHeight > 0) {
            Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda50
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1932x1a874df2();
                }
            };
            this.cancelFixedPositionRunnable = runnable;
            AndroidUtilities.runOnUIThread(runnable, 200L);
        }
    }

    /* renamed from: lambda$removeKeyboardPositionBeforeTransition$130$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1932x1a874df2() {
        this.cancelFixedPositionRunnable = null;
        this.fixedKeyboardHeight = -1;
        if (this.fragmentView != null) {
            this.fragmentView.requestLayout();
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onTransitionAnimationStart(boolean isOpen, boolean backward) {
        super.onTransitionAnimationStart(isOpen, backward);
        int[] alowedNotifications = null;
        if (isOpen) {
            if (!this.fragmentOpened) {
                this.fragmentOpened = true;
                updateMessagesVisiblePart(false);
            }
            alowedNotifications = this.transitionAnimationIndex == 0 ? new int[]{NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoad, NotificationCenter.needDeleteDialog, NotificationCenter.messagesDidLoad} : new int[]{NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoad, NotificationCenter.needDeleteDialog};
            this.openAnimationEnded = false;
            if (!backward) {
                this.openAnimationStartTime = SystemClock.elapsedRealtime();
            }
        } else {
            if (UserObject.isUserSelf(this.currentUser)) {
                alowedNotifications = new int[]{NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoad, NotificationCenter.needDeleteDialog, NotificationCenter.mediaDidLoad};
            }
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.onBeginHide();
            }
        }
        checkShowBlur(true);
        this.transitionAnimationIndex = getNotificationCenter().setAnimationInProgress(this.transitionAnimationIndex, alowedNotifications);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onTransitionAnimationEnd(boolean isOpen, boolean backward) {
        String message;
        MessageObject messageObject;
        Bulletin bulletin;
        super.onTransitionAnimationEnd(isOpen, backward);
        if (isOpen && backward && this.showPinBulletin && (bulletin = this.pinBulletin) != null) {
            bulletin.show();
            this.showPinBulletin = false;
        }
        Runnable runnable = this.cancelFixedPositionRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        this.fixedKeyboardHeight = -1;
        if (isOpen) {
            checkShowBlur(false);
            this.openAnimationEnded = true;
            getNotificationCenter().onAnimationFinish(this.transitionAnimationIndex);
            if (Build.VERSION.SDK_INT >= 21) {
                createChatAttachView();
            }
            checkGroupCallJoin(this.lastCallCheckFromServer);
            if (this.chatActivityEnterView.hasRecordVideo() && !this.chatActivityEnterView.isSendButtonVisible()) {
                boolean isChannel = false;
                TLRPC.Chat chat = this.currentChat;
                if (chat != null) {
                    isChannel = ChatObject.isChannel(chat) && !this.currentChat.megagroup;
                }
                SharedPreferences preferences = MessagesController.getGlobalMainSettings();
                String key = isChannel ? "needShowRoundHintChannel2" : "needShowRoundHint2";
                int showCount = preferences.getInt(key, 0);
                if (showCount < 3 && Utilities.random.nextFloat() <= 0.2f) {
                    showVoiceHint(false, this.chatActivityEnterView.isInVideoMode());
                    preferences.edit().putInt(key, showCount + 1).commit();
                }
            }
            if (!backward && this.parentLayout != null && this.needRemovePreviousSameChatActivity) {
                int a = 0;
                int N = this.parentLayout.fragmentsStack.size() - 1;
                while (true) {
                    if (a >= N) {
                        break;
                    }
                    BaseFragment fragment = this.parentLayout.fragmentsStack.get(a);
                    if (fragment != this && (fragment instanceof ChatActivity)) {
                        ChatActivity chatActivity = (ChatActivity) fragment;
                        if (chatActivity.needRemovePreviousSameChatActivity && chatActivity.dialog_id == this.dialog_id && chatActivity.getChatMode() == getChatMode() && chatActivity.threadMessageId == this.threadMessageId && chatActivity.reportType == this.reportType) {
                            fragment.removeSelfFromStack();
                            break;
                        }
                    }
                    a++;
                }
            }
            showScheduledOrNoSoundHint();
            if (!backward && this.firstOpen) {
                if (this.chatActivityEnterView != null && (messageObject = this.threadMessageObject) != null && messageObject.getRepliesCount() == 0 && ChatObject.canSendMessages(this.currentChat)) {
                    this.chatActivityEnterView.setFieldFocused();
                    this.chatActivityEnterView.openKeyboard();
                }
                if (getMessagesController().isPromoDialog(this.dialog_id, true)) {
                    int type = getMessagesController().promoDialogType;
                    SharedPreferences preferences2 = MessagesController.getGlobalNotificationsSettings();
                    if (type == MessagesController.PROMO_TYPE_PROXY) {
                        if (AndroidUtilities.getPrefIntOrLong(preferences2, "proxychannel", 0L) != this.dialog_id) {
                            message = LocaleController.getString("UseProxySponsorInfo", R.string.UseProxySponsorInfo);
                        } else {
                            message = null;
                        }
                    } else if (type == MessagesController.PROMO_TYPE_PSA) {
                        String psaType = getMessagesController().promoPsaType;
                        if (!preferences2.getBoolean(psaType + "_shown", false)) {
                            String message2 = LocaleController.getString("PsaInfo_" + psaType);
                            if (!TextUtils.isEmpty(message2)) {
                                message = message2;
                            } else {
                                message = LocaleController.getString("PsaInfoDefault", R.string.PsaInfoDefault);
                            }
                        } else {
                            message = null;
                        }
                    } else {
                        message = null;
                    }
                    if (!TextUtils.isEmpty(message) && this.topUndoView != null) {
                        if (type == MessagesController.PROMO_TYPE_PROXY) {
                            preferences2.edit().putLong("proxychannel", this.dialog_id).commit();
                        } else if (type == MessagesController.PROMO_TYPE_PSA) {
                            String psaType2 = getMessagesController().promoPsaType;
                            preferences2.edit().putBoolean(psaType2 + "_shown", true).commit();
                        }
                        SpannableStringBuilder stringBuilder = new SpannableStringBuilder(message);
                        MessageObject.addLinks(false, stringBuilder);
                        this.topUndoView.showWithAction(0L, 18, stringBuilder, null, null);
                    }
                }
                this.firstOpen = false;
            }
            if (!backward && this.fromPullingDownTransition && this.parentLayout != null && this.parentLayout.fragmentsStack.size() >= 2) {
                BaseFragment fragment2 = this.parentLayout.fragmentsStack.get(this.parentLayout.fragmentsStack.size() - 2);
                if (fragment2 instanceof ChatActivity) {
                    this.backToPreviousFragment = (ChatActivity) fragment2;
                    this.parentLayout.fragmentsStack.remove(this.backToPreviousFragment);
                }
            }
            ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = this.pendingRequestsDelegate;
            if (chatActivityMemberRequestsDelegate != null && backward) {
                chatActivityMemberRequestsDelegate.onBackToScreen();
            }
            updateMessagesVisiblePart(false);
        } else {
            getNotificationCenter().onAnimationFinish(this.transitionAnimationIndex);
        }
        this.contentView.invalidate();
        if (!TextUtils.isEmpty(this.attachMenuBotToOpen)) {
            TLRPC.TL_contacts_resolveUsername req = new TLRPC.TL_contacts_resolveUsername();
            req.username = this.attachMenuBotToOpen;
            getConnectionsManager().sendRequest(req, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda130
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    ChatActivity.this.m1891lambda$onTransitionAnimationEnd$137$orgtelegramuiChatActivity(tLObject, tL_error);
                }
            });
            this.attachMenuBotToOpen = null;
        }
    }

    /* renamed from: lambda$onTransitionAnimationEnd$137$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1891lambda$onTransitionAnimationEnd$137$orgtelegramuiChatActivity(final TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda93
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1890lambda$onTransitionAnimationEnd$136$orgtelegramuiChatActivity(response);
            }
        });
    }

    /* renamed from: lambda$onTransitionAnimationEnd$136$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1890lambda$onTransitionAnimationEnd$136$orgtelegramuiChatActivity(TLObject response) {
        if (response != null) {
            TLRPC.TL_contacts_resolvedPeer resolvedPeer = (TLRPC.TL_contacts_resolvedPeer) response;
            if (!resolvedPeer.users.isEmpty()) {
                final TLRPC.User user = resolvedPeer.users.get(0);
                if (user.bot && user.bot_attach_menu) {
                    TLRPC.TL_messages_getAttachMenuBot getAttachMenuBot = new TLRPC.TL_messages_getAttachMenuBot();
                    getAttachMenuBot.bot = MessagesController.getInstance(this.currentAccount).getInputUser(user.id);
                    ConnectionsManager.getInstance(this.currentAccount).sendRequest(getAttachMenuBot, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda143
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            ChatActivity.this.m1889lambda$onTransitionAnimationEnd$135$orgtelegramuiChatActivity(user, tLObject, tL_error);
                        }
                    });
                }
            }
        }
    }

    /* renamed from: lambda$onTransitionAnimationEnd$135$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1889lambda$onTransitionAnimationEnd$135$orgtelegramuiChatActivity(final TLRPC.User user, final TLObject response1, TLRPC.TL_error error1) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda97
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1888lambda$onTransitionAnimationEnd$134$orgtelegramuiChatActivity(response1, user);
            }
        });
    }

    /* renamed from: lambda$onTransitionAnimationEnd$134$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1888lambda$onTransitionAnimationEnd$134$orgtelegramuiChatActivity(TLObject response1, final TLRPC.User user) {
        if (response1 instanceof TLRPC.TL_attachMenuBotsBot) {
            TLRPC.TL_attachMenuBotsBot attachMenuBotsBot = (TLRPC.TL_attachMenuBotsBot) response1;
            MessagesController.getInstance(this.currentAccount).putUsers(attachMenuBotsBot.users, false);
            TLRPC.TL_attachMenuBot attachMenuBot = attachMenuBotsBot.bot;
            if (!MediaDataController.canShowAttachMenuBot(attachMenuBot, getCurrentUser() != null ? getCurrentUser() : getCurrentChat())) {
                TLRPC.User user2 = this.currentUser;
                if (user2 != null && user2.bot && user.id == attachMenuBot.bot_id) {
                    BulletinFactory.of(this).createErrorBulletin(LocaleController.getString((int) R.string.BotCantOpenAttachMenuSameBot)).show();
                    return;
                }
                TLRPC.User user3 = this.currentUser;
                if (user3 != null && user3.bot && user.id != attachMenuBot.bot_id) {
                    BulletinFactory.of(this).createErrorBulletin(LocaleController.getString((int) R.string.BotCantOpenAttachMenuBot)).show();
                    return;
                }
                TLRPC.User user4 = this.currentUser;
                if (user4 != null && !user4.bot) {
                    BulletinFactory.of(this).createErrorBulletin(LocaleController.getString((int) R.string.BotCantOpenAttachMenuUser)).show();
                    return;
                }
                TLRPC.Chat chat = this.currentChat;
                if (chat != null && !ChatObject.isChannelAndNotMegaGroup(chat)) {
                    BulletinFactory.of(this).createErrorBulletin(LocaleController.getString((int) R.string.BotCantOpenAttachMenuGroup)).show();
                    return;
                }
                TLRPC.Chat chat2 = this.currentChat;
                if (chat2 != null && ChatObject.isChannelAndNotMegaGroup(chat2)) {
                    BulletinFactory.of(this).createErrorBulletin(LocaleController.getString((int) R.string.BotCantOpenAttachMenuChannel)).show();
                }
            } else if (!attachMenuBot.inactive) {
                openAttachBotLayout(user.id, this.attachMenuBotStartCommand);
            } else {
                AttachBotIntroTopView introTopView = new AttachBotIntroTopView(getParentActivity());
                introTopView.setColor(Theme.getColor(Theme.key_chat_attachContactIcon));
                introTopView.setBackgroundColor(Theme.getColor(Theme.key_dialogTopBackground));
                introTopView.setAttachBot(attachMenuBot);
                new AlertDialog.Builder(getParentActivity()).setTopView(introTopView).setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("BotRequestAttachPermission", R.string.BotRequestAttachPermission, UserObject.getUserName(user)))).setPositiveButton(LocaleController.getString((int) R.string.BotAddToMenu), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda194
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i) {
                        ChatActivity.this.m1887lambda$onTransitionAnimationEnd$133$orgtelegramuiChatActivity(user, dialogInterface, i);
                    }
                }).setNegativeButton(LocaleController.getString((int) R.string.Cancel), null).show();
            }
        }
    }

    /* renamed from: lambda$onTransitionAnimationEnd$133$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1887lambda$onTransitionAnimationEnd$133$orgtelegramuiChatActivity(final TLRPC.User user, DialogInterface dialog, int which) {
        TLRPC.TL_messages_toggleBotInAttachMenu botRequest = new TLRPC.TL_messages_toggleBotInAttachMenu();
        botRequest.bot = MessagesController.getInstance(this.currentAccount).getInputUser(user.id);
        botRequest.enabled = true;
        ConnectionsManager.getInstance(this.currentAccount).sendRequest(botRequest, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda142
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                ChatActivity.this.m1886lambda$onTransitionAnimationEnd$132$orgtelegramuiChatActivity(user, tLObject, tL_error);
            }
        }, 66);
    }

    /* renamed from: lambda$onTransitionAnimationEnd$132$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1886lambda$onTransitionAnimationEnd$132$orgtelegramuiChatActivity(final TLRPC.User user, TLObject response2, final TLRPC.TL_error error2) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda102
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1885lambda$onTransitionAnimationEnd$131$orgtelegramuiChatActivity(error2, user);
            }
        });
    }

    /* renamed from: lambda$onTransitionAnimationEnd$131$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1885lambda$onTransitionAnimationEnd$131$orgtelegramuiChatActivity(TLRPC.TL_error error2, TLRPC.User user) {
        if (error2 == null) {
            MediaDataController.getInstance(this.currentAccount).loadAttachMenuBots(false, true);
            openAttachBotLayout(user.id, this.attachMenuBotStartCommand);
        }
    }

    public void openAttachBotLayout(long botId, String startCommand) {
        openAttachMenu();
        this.chatAttachAlert.showBotLayout(botId, startCommand);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onDialogDismiss(Dialog dialog) {
        Dialog dialog2 = this.closeChatDialog;
        if (dialog2 != null && dialog == dialog2) {
            getMessagesController().deleteDialog(this.dialog_id, 0);
            if (this.parentLayout != null && !this.parentLayout.fragmentsStack.isEmpty() && this.parentLayout.fragmentsStack.get(this.parentLayout.fragmentsStack.size() - 1) != this) {
                BaseFragment fragment = this.parentLayout.fragmentsStack.get(this.parentLayout.fragmentsStack.size() - 1);
                removeSelfFromStack();
                fragment.finishFragment();
                return;
            }
            finishFragment();
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean extendActionMode(Menu menu) {
        if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isVisible()) {
            if (PhotoViewer.getInstance().getSelectiongLength() == 0 || menu.findItem(16908321) == null) {
                return true;
            }
        } else if (this.chatActivityEnterView.getSelectionLength() == 0 || menu.findItem(16908321) == null) {
            return true;
        }
        fillActionModeMenu(menu);
        return true;
    }

    public void fillActionModeMenu(Menu menu) {
        if (menu.findItem(R.id.menu_bold) != null) {
            return;
        }
        if (Build.VERSION.SDK_INT >= 23) {
            menu.removeItem(16908341);
        }
        int order = 6 + 1;
        menu.add(R.id.menu_groupbolditalic, R.id.menu_spoiler, 6, LocaleController.getString("Spoiler", R.string.Spoiler));
        SpannableStringBuilder stringBuilder = new SpannableStringBuilder(LocaleController.getString("Bold", R.string.Bold));
        stringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM)), 0, stringBuilder.length(), 33);
        int order2 = order + 1;
        menu.add(R.id.menu_groupbolditalic, R.id.menu_bold, order, stringBuilder);
        SpannableStringBuilder stringBuilder2 = new SpannableStringBuilder(LocaleController.getString("Italic", R.string.Italic));
        stringBuilder2.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf")), 0, stringBuilder2.length(), 33);
        int order3 = order2 + 1;
        menu.add(R.id.menu_groupbolditalic, R.id.menu_italic, order2, stringBuilder2);
        SpannableStringBuilder stringBuilder3 = new SpannableStringBuilder(LocaleController.getString("Mono", R.string.Mono));
        stringBuilder3.setSpan(new TypefaceSpan(Typeface.MONOSPACE), 0, stringBuilder3.length(), 33);
        int order4 = order3 + 1;
        menu.add(R.id.menu_groupbolditalic, R.id.menu_mono, order3, stringBuilder3);
        TLRPC.EncryptedChat encryptedChat = this.currentEncryptedChat;
        if (encryptedChat == null || AndroidUtilities.getPeerLayerVersion(encryptedChat.layer) >= 101) {
            SpannableStringBuilder stringBuilder4 = new SpannableStringBuilder(LocaleController.getString("Strike", R.string.Strike));
            TextStyleSpan.TextStyleRun run = new TextStyleSpan.TextStyleRun();
            run.flags |= 8;
            stringBuilder4.setSpan(new TextStyleSpan(run), 0, stringBuilder4.length(), 33);
            int order5 = order4 + 1;
            menu.add(R.id.menu_groupbolditalic, R.id.menu_strike, order4, stringBuilder4);
            SpannableStringBuilder stringBuilder5 = new SpannableStringBuilder(LocaleController.getString("Underline", R.string.Underline));
            TextStyleSpan.TextStyleRun run2 = new TextStyleSpan.TextStyleRun();
            run2.flags |= 16;
            stringBuilder5.setSpan(new TextStyleSpan(run2), 0, stringBuilder5.length(), 33);
            menu.add(R.id.menu_groupbolditalic, R.id.menu_underline, order5, stringBuilder5);
            order4 = order5 + 1;
        }
        int order6 = order4 + 1;
        menu.add(R.id.menu_groupbolditalic, R.id.menu_link, order4, LocaleController.getString("CreateLink", R.string.CreateLink));
        int i = order6 + 1;
        menu.add(R.id.menu_groupbolditalic, R.id.menu_regular, order6, LocaleController.getString("Regular", R.string.Regular));
    }

    public void updateScheduledInterface(boolean animated) {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.updateScheduleButton(animated);
        }
    }

    public void updateBottomOverlay() {
        int i;
        TLRPC.Chat chat;
        TLRPC.User user;
        boolean allowPin;
        if (this.bottomOverlayChatText == null || (i = this.chatMode) == 1) {
            return;
        }
        if (this.reportType >= 0) {
            updateActionModeTitle();
        } else if (i != 2) {
            if (this.currentChat != null) {
                SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(this.currentAccount);
                long requestedTime = notificationsSettings.getLong("dialog_join_requested_time_" + this.dialog_id, -1L);
                boolean shouldApply = false;
                if (ChatObject.isChannel(this.currentChat)) {
                    TLRPC.Chat chat2 = this.currentChat;
                    if (!(chat2 instanceof TLRPC.TL_channelForbidden)) {
                        if (ChatObject.isNotInChat(chat2) && (!isThreadChat() || this.currentChat.join_to_send)) {
                            if (getMessagesController().isJoiningChannel(this.currentChat.id)) {
                                showBottomOverlayProgress(true, false);
                            } else {
                                if (this.currentChat.join_request) {
                                    shouldApply = true;
                                    if (requestedTime > 0 && System.currentTimeMillis() - requestedTime < 120000) {
                                        this.bottomOverlayChatText.setText(LocaleController.getString("ChannelJoinRequestSent", R.string.ChannelJoinRequestSent), true);
                                        this.bottomOverlayChatText.setEnabled(false);
                                    } else {
                                        this.bottomOverlayChatText.setText(LocaleController.getString("ChannelJoinRequest", R.string.ChannelJoinRequest));
                                        this.bottomOverlayChatText.setEnabled(true);
                                    }
                                } else {
                                    this.bottomOverlayChatText.setText(LocaleController.getString("ChannelJoin", R.string.ChannelJoin));
                                    this.bottomOverlayChatText.setEnabled(true);
                                }
                                showBottomOverlayProgress(false, false);
                            }
                        } else if (!isThreadChat()) {
                            if (!getMessagesController().isDialogMuted(this.dialog_id)) {
                                this.bottomOverlayChatText.setText(LocaleController.getString("ChannelMute", R.string.ChannelMute), false);
                                this.bottomOverlayChatText.setEnabled(true);
                            } else {
                                this.bottomOverlayChatText.setText(LocaleController.getString("ChannelUnmute", R.string.ChannelUnmute), true);
                                this.bottomOverlayChatText.setEnabled(true);
                            }
                            showBottomOverlayProgress(false, this.bottomOverlayProgress.getTag() != null);
                        }
                        if (!shouldApply && requestedTime > 0) {
                            SharedPreferences.Editor edit2 = MessagesController.getNotificationsSettings(this.currentAccount).edit();
                            edit2.putLong("dialog_join_requested_time_" + this.dialog_id, -1L).commit();
                        }
                    }
                }
                if (!isThreadChat()) {
                    this.bottomOverlayChatText.setText(LocaleController.getString("DeleteThisGroup", R.string.DeleteThisGroup));
                    this.bottomOverlayChatText.setEnabled(true);
                }
                if (!shouldApply) {
                    SharedPreferences.Editor edit22 = MessagesController.getNotificationsSettings(this.currentAccount).edit();
                    edit22.putLong("dialog_join_requested_time_" + this.dialog_id, -1L).commit();
                }
            } else {
                showBottomOverlayProgress(false, true);
                if (this.userBlocked) {
                    if (this.currentUser.bot) {
                        this.bottomOverlayChatText.setText(LocaleController.getString("BotUnblock", R.string.BotUnblock));
                    } else {
                        this.bottomOverlayChatText.setText(LocaleController.getString("Unblock", R.string.Unblock));
                    }
                    if (this.botButtons != null) {
                        this.botButtons = null;
                        if (this.chatActivityEnterView != null) {
                            MessageObject messageObject = this.replyingMessageObject;
                            if (messageObject != null && this.botReplyButtons == messageObject) {
                                this.botReplyButtons = null;
                                hideFieldPanel(false);
                            }
                            this.chatActivityEnterView.setButtons(this.botButtons, false);
                        }
                    }
                } else if (UserObject.isReplyUser(this.currentUser)) {
                    if (!getMessagesController().isDialogMuted(this.dialog_id)) {
                        this.bottomOverlayChatText.setText(LocaleController.getString("ChannelMute", R.string.ChannelMute), false);
                    } else {
                        this.bottomOverlayChatText.setText(LocaleController.getString("ChannelUnmute", R.string.ChannelUnmute), true);
                    }
                    showBottomOverlayProgress(false, true);
                } else if (this.botUser != null && this.currentUser.bot) {
                    this.bottomOverlayChatText.setText(LocaleController.getString("BotStart", R.string.BotStart));
                    this.chatActivityEnterView.hidePopup(false);
                    if (getParentActivity() != null) {
                        AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
                    }
                } else {
                    this.bottomOverlayChatText.setText(LocaleController.getString("DeleteThisChat", R.string.DeleteThisChat));
                }
            }
        } else {
            TLRPC.Chat chat3 = this.currentChat;
            if (chat3 != null) {
                allowPin = ChatObject.canPinMessages(chat3);
            } else {
                TLRPC.UserFull userFull = this.userInfo;
                if (userFull != null) {
                    allowPin = userFull.can_pin_message;
                } else {
                    allowPin = false;
                }
            }
            if (allowPin) {
                this.bottomOverlayChatText.setTag(1);
                this.bottomOverlayChatText.setText(LocaleController.getString("UnpinAllMessages", R.string.UnpinAllMessages));
            } else {
                this.bottomOverlayChatText.setTag(null);
                this.bottomOverlayChatText.setText(LocaleController.getString("HidePinnedMessages", R.string.HidePinnedMessages));
            }
            showBottomOverlayProgress(false, false);
        }
        TLRPC.Chat chat4 = this.currentChat;
        if (chat4 != null && chat4.gigagroup && this.reportType < 0 && this.chatMode == 0) {
            this.bottomOverlayImage.setVisibility(0);
        } else {
            this.bottomOverlayImage.setVisibility(4);
        }
        if (this.inPreviewMode) {
            this.searchContainer.setVisibility(4);
            this.bottomOverlayChat.setVisibility(4);
            this.chatActivityEnterView.setFieldFocused(false);
            this.chatActivityEnterView.setVisibility(4);
        } else if (this.searchItem != null && this.searchItemVisible) {
            this.searchContainer.animate().setListener(null).cancel();
            if (this.searchContainer.getVisibility() != 0) {
                this.searchContainer.setVisibility(0);
                this.searchContainer.setAlpha(0.0f);
            }
            this.searchContainer.animate().alpha(1.0f).setDuration(150L).setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.84
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animation) {
                    super.onAnimationEnd(animation);
                }
            }).start();
            ValueAnimator valueAnimator = this.searchExpandAnimator;
            if (valueAnimator != null) {
                valueAnimator.removeAllListeners();
                this.searchExpandAnimator.cancel();
            }
            ValueAnimator ofFloat = ValueAnimator.ofFloat(this.searchExpandProgress, 1.0f);
            this.searchExpandAnimator = ofFloat;
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda235
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                    ChatActivity.this.m1968lambda$updateBottomOverlay$138$orgtelegramuiChatActivity(valueAnimator2);
                }
            });
            this.searchExpandAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.85
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animation) {
                    ChatActivity.this.chatActivityEnterView.setVisibility(4);
                    ChatActivity.this.bottomOverlayChat.setVisibility(4);
                    ChatActivity.this.invalidateChatListViewTopPadding();
                }
            });
            this.searchExpandAnimator.setDuration(250L);
            this.searchExpandAnimator.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
            this.searchExpandAnimator.start();
            this.chatActivityEnterView.setFieldFocused(false);
            if (!this.chatActivityEnterView.isTopViewVisible()) {
                this.topViewWasVisible = 2;
            } else {
                this.topViewWasVisible = 1;
                this.chatActivityEnterView.hideTopView(false);
            }
        } else {
            this.searchContainer.animate().setListener(null).cancel();
            if (this.searchContainer.getVisibility() == 0) {
                this.searchContainer.animate().alpha(0.0f).setDuration(150L).setListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.86
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animation) {
                        super.onAnimationEnd(animation);
                        ChatActivity.this.searchContainer.setVisibility(4);
                    }
                }).start();
            }
            this.chatActivityEnterView.setVisibility(0);
            ValueAnimator valueAnimator2 = this.searchExpandAnimator;
            if (valueAnimator2 != null) {
                valueAnimator2.removeAllListeners();
                this.searchExpandAnimator.cancel();
            }
            this.searchExpandAnimator = ValueAnimator.ofFloat(this.searchExpandProgress, 0.0f);
            invalidateChatListViewTopPadding();
            this.searchExpandAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda246
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator3) {
                    ChatActivity.this.m1969lambda$updateBottomOverlay$139$orgtelegramuiChatActivity(valueAnimator3);
                }
            });
            this.searchExpandAnimator.setDuration(250L);
            this.searchExpandAnimator.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
            this.searchExpandAnimator.start();
            if (this.muteItem != null) {
                TLRPC.Chat chat5 = this.currentChat;
                if (chat5 != null && ChatObject.isNotInChat(chat5)) {
                    this.muteItem.setVisibility(8);
                    this.muteItemGap.setVisibility(8);
                } else {
                    this.muteItem.setVisibility(0);
                    this.muteItemGap.setVisibility(0);
                }
            }
            if (this.reportType >= 0) {
                this.bottomOverlayChat.setVisibility(0);
                this.chatActivityEnterView.setVisibility(4);
            } else if (this.chatMode == 2 || (((chat = this.currentChat) != null && ((ChatObject.isNotInChat(chat) || !ChatObject.canWriteToChat(this.currentChat)) && (this.currentChat.join_to_send || !isThreadChat()))) || ((user = this.currentUser) != null && (UserObject.isDeleted(user) || this.userBlocked || UserObject.isReplyUser(this.currentUser))))) {
                if (this.chatActivityEnterView.isEditingMessage()) {
                    this.chatActivityEnterView.setVisibility(0);
                    this.bottomOverlayChat.setVisibility(4);
                    this.chatActivityEnterView.setFieldFocused();
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda60
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.this.m1970lambda$updateBottomOverlay$140$orgtelegramuiChatActivity();
                        }
                    }, 100L);
                } else {
                    this.bottomOverlayChat.setVisibility(0);
                    this.chatActivityEnterView.setFieldFocused(false);
                    this.chatActivityEnterView.setVisibility(4);
                    this.chatActivityEnterView.closeKeyboard();
                    StickersAdapter stickersAdapter = this.stickersAdapter;
                    if (stickersAdapter != null) {
                        stickersAdapter.hide();
                    }
                }
                ActionBarMenuItem actionBarMenuItem = this.attachItem;
                if (actionBarMenuItem != null) {
                    actionBarMenuItem.setVisibility(8);
                }
                ActionBarMenuItem actionBarMenuItem2 = this.editTextItem;
                if (actionBarMenuItem2 != null) {
                    actionBarMenuItem2.setVisibility(8);
                }
                ActionBarMenuItem actionBarMenuItem3 = this.headerItem;
                if (actionBarMenuItem3 != null) {
                    actionBarMenuItem3.setVisibility(0);
                }
            } else if (this.botUser != null && this.currentUser.bot) {
                this.bottomOverlayChat.setVisibility(0);
                this.chatActivityEnterView.setVisibility(4);
            } else {
                this.chatActivityEnterView.setVisibility(0);
                this.bottomOverlayChat.setVisibility(4);
            }
            if (this.topViewWasVisible == 1) {
                this.chatActivityEnterView.showTopView(false, false);
                this.topViewWasVisible = 0;
            }
        }
        checkRaiseSensors();
    }

    /* renamed from: lambda$updateBottomOverlay$138$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1968lambda$updateBottomOverlay$138$orgtelegramuiChatActivity(ValueAnimator animation) {
        float floatValue = ((Float) animation.getAnimatedValue()).floatValue();
        this.searchExpandProgress = floatValue;
        this.chatListView.setTranslationY(floatValue * (this.chatActivityEnterView.getMeasuredHeight() - this.searchContainer.getMeasuredHeight()));
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        chatActivityEnterView.setChatSearchExpandOffset(this.searchExpandProgress * (chatActivityEnterView.getMeasuredHeight() - this.searchContainer.getMeasuredHeight()));
        invalidateChatListViewTopPadding();
    }

    /* renamed from: lambda$updateBottomOverlay$139$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1969lambda$updateBottomOverlay$139$orgtelegramuiChatActivity(ValueAnimator animation) {
        float floatValue = ((Float) animation.getAnimatedValue()).floatValue();
        this.searchExpandProgress = floatValue;
        this.chatListView.setTranslationY(floatValue * (this.chatActivityEnterView.getMeasuredHeight() - this.searchContainer.getMeasuredHeight()));
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        chatActivityEnterView.setChatSearchExpandOffset(this.searchExpandProgress * (chatActivityEnterView.getMeasuredHeight() - this.searchContainer.getMeasuredHeight()));
        invalidateChatListViewTopPadding();
    }

    /* renamed from: lambda$updateBottomOverlay$140$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1970lambda$updateBottomOverlay$140$orgtelegramuiChatActivity() {
        this.chatActivityEnterView.openKeyboard();
    }

    public void updateReplyMessageHeader(boolean notify) {
        String text;
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null && this.threadMessageId != 0) {
            if (this.isComments) {
                if (this.threadMessageObject.hasReplies()) {
                    this.avatarContainer.setTitle(LocaleController.formatPluralString("Comments", this.threadMessageObject.getRepliesCount(), new Object[0]));
                } else {
                    this.avatarContainer.setTitle(LocaleController.getString("CommentsTitle", R.string.CommentsTitle));
                }
            } else {
                chatAvatarContainer.setTitle(LocaleController.formatPluralString("Replies", this.threadMessageObject.getRepliesCount(), new Object[0]));
            }
        }
        if (this.replyMessageHeaderObject == null) {
            return;
        }
        if (this.threadMessageObject.getRepliesCount() == 0) {
            if (this.isComments) {
                text = LocaleController.getString("NoComments", R.string.NoComments);
            } else {
                text = LocaleController.getString("NoReplies", R.string.NoReplies);
            }
        } else {
            text = LocaleController.getString("DiscussionStarted", R.string.DiscussionStarted);
        }
        MessageObject messageObject = this.replyMessageHeaderObject;
        messageObject.messageOwner.message = text;
        messageObject.messageText = text;
        if (notify) {
            this.chatAdapter.updateRowWithMessageObject(this.replyMessageHeaderObject, true);
        }
    }

    public void showAlert(String name, String message) {
        FrameLayout frameLayout = this.alertView;
        if (frameLayout == null || name == null || message == null) {
            return;
        }
        if (frameLayout.getTag() != null) {
            this.alertView.setTag(null);
            AnimatorSet animatorSet = this.alertViewAnimator;
            if (animatorSet != null) {
                animatorSet.cancel();
                this.alertViewAnimator = null;
            }
            if (this.alertView.getVisibility() != 0) {
                this.alertViewEnterProgress = 0.0f;
                invalidateChatListViewTopPadding();
            }
            this.alertView.setVisibility(0);
            this.alertViewAnimator = new AnimatorSet();
            ValueAnimator animator = ValueAnimator.ofFloat(this.alertViewEnterProgress, 1.0f);
            animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda202
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    ChatActivity.this.m1946lambda$showAlert$141$orgtelegramuiChatActivity(valueAnimator);
                }
            });
            this.alertViewAnimator.playTogether(animator);
            this.alertViewAnimator.setDuration(200L);
            this.alertViewAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.87
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animation) {
                    if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(animation)) {
                        ChatActivity.this.alertViewEnterProgress = 1.0f;
                        ChatActivity.this.invalidateChatListViewTopPadding();
                        ChatActivity.this.alertViewAnimator = null;
                    }
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationCancel(Animator animation) {
                    if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(animation)) {
                        ChatActivity.this.alertViewAnimator = null;
                    }
                }
            });
            this.alertViewAnimator.start();
        }
        this.alertNameTextView.setText(name);
        this.alertTextView.setText(Emoji.replaceEmoji(message.replace('\n', ' '), this.alertTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
        Runnable runnable = this.hideAlertViewRunnable;
        if (runnable != null) {
            AndroidUtilities.cancelRunOnUIThread(runnable);
        }
        AnonymousClass88 anonymousClass88 = new AnonymousClass88();
        this.hideAlertViewRunnable = anonymousClass88;
        AndroidUtilities.runOnUIThread(anonymousClass88, 3000L);
    }

    /* renamed from: lambda$showAlert$141$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1946lambda$showAlert$141$orgtelegramuiChatActivity(ValueAnimator valueAnimator) {
        this.alertViewEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
    }

    /* renamed from: org.telegram.ui.ChatActivity$88 */
    /* loaded from: classes4.dex */
    public class AnonymousClass88 implements Runnable {
        AnonymousClass88() {
            ChatActivity.this = this$0;
        }

        @Override // java.lang.Runnable
        public void run() {
            if (ChatActivity.this.hideAlertViewRunnable == this && ChatActivity.this.alertView.getTag() == null) {
                ChatActivity.this.alertView.setTag(1);
                if (ChatActivity.this.alertViewAnimator != null) {
                    ChatActivity.this.alertViewAnimator.cancel();
                    ChatActivity.this.alertViewAnimator = null;
                }
                ChatActivity.this.alertViewAnimator = new AnimatorSet();
                ValueAnimator animator = ValueAnimator.ofFloat(ChatActivity.this.alertViewEnterProgress, 0.0f);
                animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$88$$ExternalSyntheticLambda0
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ChatActivity.AnonymousClass88.this.m2015lambda$run$0$orgtelegramuiChatActivity$88(valueAnimator);
                    }
                });
                ChatActivity.this.alertViewAnimator.playTogether(animator);
                ChatActivity.this.alertViewAnimator.setDuration(200L);
                ChatActivity.this.alertViewAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.88.1
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animation) {
                        if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(animation)) {
                            ChatActivity.this.alertView.setVisibility(8);
                            ChatActivity.this.alertViewEnterProgress = 0.0f;
                            ChatActivity.this.invalidateChatListViewTopPadding();
                            ChatActivity.this.alertViewAnimator = null;
                        }
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationCancel(Animator animation) {
                        if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(animation)) {
                            ChatActivity.this.alertViewAnimator = null;
                        }
                    }
                });
                ChatActivity.this.alertViewAnimator.start();
            }
        }

        /* renamed from: lambda$run$0$org-telegram-ui-ChatActivity$88 */
        public /* synthetic */ void m2015lambda$run$0$orgtelegramuiChatActivity$88(ValueAnimator valueAnimator) {
            ChatActivity.this.alertViewEnterProgress = ((Float) valueAnimator.getAnimatedValue()).floatValue();
            ChatActivity.this.invalidateChatListViewTopPadding();
        }
    }

    private boolean hidePinnedMessageView(boolean animated) {
        BlurredFrameLayout blurredFrameLayout = this.pinnedMessageView;
        if (blurredFrameLayout == null || blurredFrameLayout.getTag() != null) {
            return false;
        }
        int a = 0;
        while (true) {
            AnimatorSet[] animatorSetArr = this.pinnedNextAnimation;
            if (a >= animatorSetArr.length) {
                break;
            }
            if (animatorSetArr[a] != null) {
                animatorSetArr[a].cancel();
                this.pinnedNextAnimation[a] = null;
            }
            a++;
        }
        this.setPinnedTextTranslationX = false;
        this.pinnedMessageView.setTag(1);
        AnimatorSet animatorSet = this.pinnedMessageViewAnimator;
        if (animatorSet != null) {
            animatorSet.cancel();
            this.pinnedMessageViewAnimator = null;
        }
        if (animated) {
            this.pinnedMessageViewAnimator = new AnimatorSet();
            ValueAnimator animator = ValueAnimator.ofFloat(this.pinnedMessageEnterOffset, -AndroidUtilities.dp(50.0f));
            animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda191
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                    ChatActivity.this.m1864lambda$hidePinnedMessageView$142$orgtelegramuiChatActivity(valueAnimator);
                }
            });
            this.pinnedMessageViewAnimator.playTogether(animator);
            this.pinnedMessageViewAnimator.setDuration(200L);
            this.pinnedMessageViewAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.89
                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationEnd(Animator animation) {
                    if (ChatActivity.this.pinnedMessageViewAnimator != null && ChatActivity.this.pinnedMessageViewAnimator.equals(animation)) {
                        ChatActivity.this.pinnedMessageView.setVisibility(8);
                        ChatActivity.this.pinnedMessageViewAnimator = null;
                    }
                }

                @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                public void onAnimationCancel(Animator animation) {
                    if (ChatActivity.this.pinnedMessageViewAnimator != null && ChatActivity.this.pinnedMessageViewAnimator.equals(animation)) {
                        ChatActivity.this.pinnedMessageViewAnimator = null;
                    }
                }
            });
            this.pinnedMessageViewAnimator.start();
        } else {
            this.pinnedMessageEnterOffset = -AndroidUtilities.dp(50.0f);
            this.pinnedMessageView.setVisibility(8);
            this.chatListView.invalidate();
        }
        return true;
    }

    /* renamed from: lambda$hidePinnedMessageView$142$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1864lambda$hidePinnedMessageView$142$orgtelegramuiChatActivity(ValueAnimator animation) {
        this.pinnedMessageEnterOffset = ((Float) animation.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
        this.chatListView.invalidate();
    }

    public void updatePinnedMessageView(boolean animated) {
        updatePinnedMessageView(animated, 0);
    }

    private void updatePinnedListButton(boolean animated) {
        if (isThreadChat() || this.pinnedListButton == null) {
            return;
        }
        boolean show = this.pinnedMessageIds.size() > 1 && !this.pinnedMessageButtonShown;
        boolean visible = this.pinnedListButton.getTag() != null;
        boolean progressIsVisible = this.pinnedProgress.getTag() != null;
        boolean closeIsVisible = this.closePinned.getTag() != null;
        final boolean showClosed = !show && !this.pinnedProgressIsShowing && !this.pinnedMessageButtonShown;
        final boolean showPinned = show && !this.pinnedProgressIsShowing && !this.pinnedMessageButtonShown;
        final boolean showProgress = this.pinnedProgressIsShowing && !this.pinnedMessageButtonShown;
        if (visible != show || progressIsVisible != showProgress || closeIsVisible != showClosed) {
            AnimatorSet animatorSet = this.pinnedListAnimator;
            if (animatorSet != null) {
                animatorSet.cancel();
                this.pinnedListAnimator = null;
            }
            float f = 1.0f;
            if (animated) {
                if (show) {
                    this.pinnedListButton.setVisibility(0);
                } else if (showClosed) {
                    this.closePinned.setVisibility(0);
                }
                if (showProgress) {
                    this.pinnedProgress.setVisibility(0);
                    this.pinnedProgress.setAlpha(0.0f);
                    this.pinnedProgress.setScaleX(0.4f);
                    this.pinnedProgress.setScaleY(0.4f);
                }
                AnimatorSet animatorSet2 = new AnimatorSet();
                this.pinnedListAnimator = animatorSet2;
                Animator[] animatorArr = new Animator[9];
                ImageView imageView = this.pinnedListButton;
                Property property = View.ALPHA;
                float[] fArr = new float[1];
                fArr[0] = showPinned ? 1.0f : 0.0f;
                animatorArr[0] = ObjectAnimator.ofFloat(imageView, property, fArr);
                ImageView imageView2 = this.pinnedListButton;
                Property property2 = View.SCALE_X;
                float[] fArr2 = new float[1];
                fArr2[0] = showPinned ? 1.0f : 0.4f;
                animatorArr[1] = ObjectAnimator.ofFloat(imageView2, property2, fArr2);
                ImageView imageView3 = this.pinnedListButton;
                Property property3 = View.SCALE_Y;
                float[] fArr3 = new float[1];
                fArr3[0] = showPinned ? 1.0f : 0.4f;
                animatorArr[2] = ObjectAnimator.ofFloat(imageView3, property3, fArr3);
                ImageView imageView4 = this.closePinned;
                Property property4 = View.ALPHA;
                float[] fArr4 = new float[1];
                fArr4[0] = showClosed ? 1.0f : 0.0f;
                animatorArr[3] = ObjectAnimator.ofFloat(imageView4, property4, fArr4);
                ImageView imageView5 = this.closePinned;
                Property property5 = View.SCALE_X;
                float[] fArr5 = new float[1];
                fArr5[0] = showClosed ? 1.0f : 0.4f;
                animatorArr[4] = ObjectAnimator.ofFloat(imageView5, property5, fArr5);
                ImageView imageView6 = this.closePinned;
                Property property6 = View.SCALE_Y;
                float[] fArr6 = new float[1];
                fArr6[0] = showClosed ? 1.0f : 0.4f;
                animatorArr[5] = ObjectAnimator.ofFloat(imageView6, property6, fArr6);
                RadialProgressView radialProgressView = this.pinnedProgress;
                Property property7 = View.ALPHA;
                float[] fArr7 = new float[1];
                fArr7[0] = !showProgress ? 0.0f : 1.0f;
                animatorArr[6] = ObjectAnimator.ofFloat(radialProgressView, property7, fArr7);
                RadialProgressView radialProgressView2 = this.pinnedProgress;
                Property property8 = View.SCALE_X;
                float[] fArr8 = new float[1];
                fArr8[0] = !showProgress ? 0.4f : 1.0f;
                animatorArr[7] = ObjectAnimator.ofFloat(radialProgressView2, property8, fArr8);
                RadialProgressView radialProgressView3 = this.pinnedProgress;
                Property property9 = View.SCALE_Y;
                float[] fArr9 = new float[1];
                if (!showProgress) {
                    f = 0.4f;
                }
                fArr9[0] = f;
                animatorArr[8] = ObjectAnimator.ofFloat(radialProgressView3, property9, fArr9);
                animatorSet2.playTogether(animatorArr);
                this.pinnedListAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                this.pinnedListAnimator.setDuration(360L);
                this.pinnedListAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.90
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animation) {
                        ChatActivity.this.pinnedListAnimator = null;
                        int i = 0;
                        ChatActivity.this.closePinned.setVisibility(showClosed ? 0 : 4);
                        ChatActivity.this.pinnedListButton.setVisibility(showPinned ? 0 : 4);
                        RadialProgressView radialProgressView4 = ChatActivity.this.pinnedProgress;
                        if (!showProgress) {
                            i = 4;
                        }
                        radialProgressView4.setVisibility(i);
                    }
                });
                this.pinnedListAnimator.start();
            } else {
                int i = 4;
                int i2 = 8;
                this.closePinned.setAlpha(showClosed ? 1.0f : 0.0f);
                this.closePinned.setScaleX(showClosed ? 1.0f : 0.4f);
                this.closePinned.setScaleY(showClosed ? 1.0f : 0.4f);
                this.closePinned.setVisibility(showClosed ? 0 : 4);
                this.pinnedListButton.setAlpha(showPinned ? 1.0f : 0.0f);
                this.pinnedListButton.setScaleX(showPinned ? 1.0f : 0.4f);
                this.pinnedListButton.setScaleY(showPinned ? 1.0f : 0.4f);
                ImageView imageView7 = this.pinnedListButton;
                if (showPinned) {
                    i = 0;
                }
                imageView7.setVisibility(i);
                this.pinnedProgress.setAlpha(showProgress ? 1.0f : 0.0f);
                this.pinnedProgress.setScaleX(showProgress ? 1.0f : 0.4f);
                this.pinnedProgress.setScaleY(showProgress ? 1.0f : 0.4f);
                RadialProgressView radialProgressView4 = this.pinnedProgress;
                if (showProgress) {
                    i2 = 0;
                }
                radialProgressView4.setVisibility(i2);
            }
            this.closePinned.setTag(showClosed ? 1 : null);
            this.pinnedListButton.setTag(show ? 1 : null);
            this.pinnedProgress.setTag(showProgress ? 1 : null);
        }
        if (this.pinnedLineView != null) {
            if (!isThreadChat()) {
                int position = Collections.binarySearch(this.pinnedMessageIds, Integer.valueOf(this.currentPinnedMessageId), Comparator.CC.reverseOrder());
                this.pinnedLineView.set((this.pinnedMessageIds.size() - 1) - position, this.pinnedMessageIds.size(), animated);
                return;
            }
            this.pinnedLineView.set(0, 1, false);
        }
    }

    private TLRPC.KeyboardButton pinnedButton(MessageObject message) {
        if (message != null && message.messageOwner != null && message.messageOwner.reply_markup != null && message.messageOwner.reply_markup.rows != null && message.messageOwner.reply_markup.rows.size() == 1 && message.messageOwner.reply_markup.rows.get(0) != null && message.messageOwner.reply_markup.rows.get(0).buttons != null && message.messageOwner.reply_markup.rows.get(0).buttons.size() == 1) {
            return message.messageOwner.reply_markup.rows.get(0).buttons.get(0);
        }
        return null;
    }

    /* JADX WARN: Code restructure failed: missing block: B:36:0x00a6, code lost:
        if (r46.pinnedMessageIds.get(0).intValue() != r4.getInt("pin_" + r46.dialog_id, 0)) goto L38;
     */
    /* JADX WARN: Removed duplicated region for block: B:135:0x02fb  */
    /* JADX WARN: Removed duplicated region for block: B:139:0x0331  */
    /* JADX WARN: Removed duplicated region for block: B:149:0x03dc  */
    /* JADX WARN: Removed duplicated region for block: B:159:0x03f3  */
    /* JADX WARN: Removed duplicated region for block: B:160:0x03f5  */
    /* JADX WARN: Removed duplicated region for block: B:163:0x0409  */
    /* JADX WARN: Removed duplicated region for block: B:207:0x0577  */
    /* JADX WARN: Removed duplicated region for block: B:208:0x0585  */
    /* JADX WARN: Removed duplicated region for block: B:212:0x0592  */
    /* JADX WARN: Removed duplicated region for block: B:231:0x05f5  */
    /* JADX WARN: Removed duplicated region for block: B:238:0x0623  */
    /* JADX WARN: Removed duplicated region for block: B:242:0x062f  */
    /* JADX WARN: Removed duplicated region for block: B:243:0x0649  */
    /* JADX WARN: Removed duplicated region for block: B:268:0x06fb  */
    /* JADX WARN: Removed duplicated region for block: B:272:0x070d  */
    /* JADX WARN: Removed duplicated region for block: B:274:0x0711  */
    /* JADX WARN: Removed duplicated region for block: B:391:0x0d19  */
    /* JADX WARN: Removed duplicated region for block: B:410:0x0e52  */
    /* JADX WARN: Removed duplicated region for block: B:411:0x0e59  */
    /* JADX WARN: Removed duplicated region for block: B:434:0x0f0f  */
    /* JADX WARN: Removed duplicated region for block: B:441:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private void updatePinnedMessageView(boolean r47, int r48) {
        /*
            Method dump skipped, instructions count: 3990
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.updatePinnedMessageView(boolean, int):void");
    }

    /* renamed from: lambda$updatePinnedMessageView$143$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1978lambda$updatePinnedMessageView$143$orgtelegramuiChatActivity(TLRPC.KeyboardButton botButton, MessageObject buttonMessage, View e) {
        if (getParentActivity() != null) {
            if (this.bottomOverlayChat.getVisibility() == 0 && !(botButton instanceof TLRPC.TL_keyboardButtonSwitchInline) && !(botButton instanceof TLRPC.TL_keyboardButtonCallback) && !(botButton instanceof TLRPC.TL_keyboardButtonGame) && !(botButton instanceof TLRPC.TL_keyboardButtonUrl) && !(botButton instanceof TLRPC.TL_keyboardButtonBuy) && !(botButton instanceof TLRPC.TL_keyboardButtonUrlAuth) && !(botButton instanceof TLRPC.TL_keyboardButtonUserProfile)) {
                return;
            }
            this.chatActivityEnterView.didPressedBotButton(botButton, buttonMessage, buttonMessage);
        }
    }

    /* renamed from: lambda$updatePinnedMessageView$144$org-telegram-ui-ChatActivity */
    public /* synthetic */ boolean m1979lambda$updatePinnedMessageView$144$orgtelegramuiChatActivity(TLRPC.KeyboardButton botButton, MessageObject buttonMessage, PinnedMessageButton buttonTextView, View e) {
        if (getParentActivity() == null || ((this.bottomOverlayChat.getVisibility() == 0 && !(botButton instanceof TLRPC.TL_keyboardButtonSwitchInline) && !(botButton instanceof TLRPC.TL_keyboardButtonCallback) && !(botButton instanceof TLRPC.TL_keyboardButtonGame) && !(botButton instanceof TLRPC.TL_keyboardButtonUrl) && !(botButton instanceof TLRPC.TL_keyboardButtonBuy) && !(botButton instanceof TLRPC.TL_keyboardButtonUrlAuth) && !(botButton instanceof TLRPC.TL_keyboardButtonUserProfile)) || !(botButton instanceof TLRPC.TL_keyboardButtonUrl))) {
            return false;
        }
        openClickableLink(null, botButton.url, true, null, buttonMessage);
        try {
            buttonTextView.performHapticFeedback(0, 1);
        } catch (Exception e2) {
        }
        return true;
    }

    /* loaded from: classes4.dex */
    public class TrackingWidthSimpleTextView extends SimpleTextView {
        private boolean trackWidth = true;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public TrackingWidthSimpleTextView(Context context) {
            super(context);
            ChatActivity.this = r1;
        }

        public void setTrackWidth(boolean value) {
            this.trackWidth = value;
        }

        public boolean getTrackWidth() {
            return this.trackWidth;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // org.telegram.ui.ActionBar.SimpleTextView
        public boolean createLayout(int width) {
            boolean result = super.createLayout(width);
            if (this.trackWidth && getVisibility() == 0) {
                ChatActivity.this.pinnedCounterTextViewX = getTextWidth() + AndroidUtilities.dp(4.0f);
                if (ChatActivity.this.pinnedCounterTextView != null) {
                    ChatActivity.this.pinnedCounterTextView.setTranslationX(ChatActivity.this.pinnedCounterTextViewX);
                }
            }
            return result;
        }
    }

    private void updateTopPanel(boolean animated) {
        long did;
        boolean show;
        boolean show2;
        int i;
        TextView textView;
        int i2;
        TLRPC.User user;
        if (this.topChatPanelView == null || this.chatMode != 0) {
            return;
        }
        SharedPreferences preferences = MessagesController.getNotificationsSettings(this.currentAccount);
        long did2 = this.dialog_id;
        TLRPC.EncryptedChat encryptedChat = this.currentEncryptedChat;
        if (encryptedChat != null) {
            show = encryptedChat.admin_id != getUserConfig().getClientUserId() && !getContactsController().isLoadingContacts() && getContactsController().contactsDict.get(Long.valueOf(this.currentUser.id)) == null;
            long did3 = this.currentUser.id;
            int vis = preferences.getInt("dialog_bar_vis3" + did3, 0);
            if (show && (vis == 1 || vis == 3)) {
                show = false;
            }
            did = did3;
        } else {
            StringBuilder sb = new StringBuilder();
            sb.append("dialog_bar_vis3");
            sb.append(did2);
            show = preferences.getInt(sb.toString(), 0) == 2;
            did = did2;
        }
        boolean showShare = preferences.getBoolean("dialog_bar_share" + did, false);
        boolean showReport = preferences.getBoolean("dialog_bar_report" + did, false);
        boolean showBlock = preferences.getBoolean("dialog_bar_block" + did, false);
        boolean showAdd = preferences.getBoolean("dialog_bar_add" + did, false);
        boolean showArchive = preferences.getBoolean("dialog_bar_archived" + this.dialog_id, false);
        boolean showGeo = preferences.getBoolean("dialog_bar_location" + did, false);
        final String chatWithAdmin = preferences.getString("dialog_bar_chat_with_admin_title" + did, null);
        final boolean chatWithAdminChannel = preferences.getBoolean("dialog_bar_chat_with_channel" + did, false);
        final int chatWithAdminDate = preferences.getInt("dialog_bar_chat_with_date" + did, 0);
        boolean showAddMembersToGroup = preferences.getBoolean("dialog_bar_invite" + did, false);
        if (!showAddMembersToGroup) {
            show2 = show;
        } else {
            show2 = true;
        }
        if (!showReport && !showBlock && !showGeo) {
            this.reportSpamButton.setVisibility(8);
        } else {
            this.reportSpamButton.setVisibility(0);
        }
        this.addToContactsButtonArchive = false;
        final TLRPC.User user2 = this.currentUser != null ? getMessagesController().getUser(Long.valueOf(this.currentUser.id)) : null;
        String str = null;
        if (user2 == null || TextUtils.isEmpty(chatWithAdmin)) {
            i = 8;
            if (!showAddMembersToGroup) {
                if (user2 != null) {
                    if (UserObject.isReplyUser(user2)) {
                        this.addToContactsButton.setVisibility(8);
                    } else if (user2.contact || user2.self || !showAdd) {
                        if (showShare && !user2.self) {
                            this.addContactItem.setVisibility(0);
                            this.addToContactsButton.setVisibility(0);
                            this.addContactItem.setText(LocaleController.getString("ShareMyContactInfo", R.string.ShareMyContactInfo));
                            this.addToContactsButton.setText(LocaleController.getString("ShareMyPhone", R.string.ShareMyPhone).toUpperCase());
                            this.addToContactsButton.setTag(1);
                            this.addToContactsButton.setVisibility(0);
                        } else {
                            if (!user2.contact && !user2.self && !show2) {
                                this.addContactItem.setVisibility(0);
                                this.addContactItem.setText(LocaleController.getString("ShareMyContactInfo", R.string.ShareMyContactInfo));
                                this.addToContactsButton.setTag(2);
                            } else {
                                this.addContactItem.setVisibility(8);
                            }
                            this.addToContactsButton.setVisibility(8);
                        }
                    } else {
                        this.addContactItem.setVisibility(0);
                        this.addContactItem.setText(LocaleController.getString("AddToContacts", R.string.AddToContacts));
                        this.addToContactsButton.setVisibility(0);
                        if (showArchive) {
                            this.addToContactsButtonArchive = true;
                            this.addToContactsButton.setText(LocaleController.getString("Unarchive", R.string.Unarchive).toUpperCase());
                            this.addToContactsButton.setTag(3);
                            i2 = 0;
                        } else if (this.reportSpamButton.getVisibility() == 0) {
                            this.addToContactsButton.setText(LocaleController.getString("AddContactChat", R.string.AddContactChat));
                            i2 = 0;
                        } else {
                            i2 = 0;
                            this.addToContactsButton.setText(LocaleController.formatString("AddContactFullChat", R.string.AddContactFullChat, UserObject.getFirstName(user2)).toUpperCase());
                        }
                        this.addToContactsButton.setTag(null);
                        this.addToContactsButton.setVisibility(i2);
                    }
                    this.reportSpamButton.setText(LocaleController.getString("ReportSpamUser", R.string.ReportSpamUser));
                } else {
                    if (!showGeo) {
                        if (showArchive) {
                            this.addToContactsButtonArchive = true;
                            this.addToContactsButton.setText(LocaleController.getString("Unarchive", R.string.Unarchive).toUpperCase());
                            this.addToContactsButton.setTag(3);
                            this.addToContactsButton.setVisibility(0);
                            this.reportSpamButton.setText(LocaleController.getString("ReportSpam", R.string.ReportSpam));
                        } else {
                            this.addToContactsButton.setVisibility(8);
                            this.reportSpamButton.setText(LocaleController.getString("ReportSpamAndLeave", R.string.ReportSpamAndLeave));
                        }
                        this.reportSpamButton.setTag(R.id.object_tag, null);
                        this.reportSpamButton.setTextColor(getThemedColor(Theme.key_chat_reportSpam));
                        if (Build.VERSION.SDK_INT >= 21) {
                            Theme.setSelectorDrawableColor(this.reportSpamButton.getBackground(), 436207615 & getThemedColor(Theme.key_chat_reportSpam), true);
                        }
                        this.reportSpamButton.setTag(Theme.key_chat_reportSpam);
                    } else {
                        this.reportSpamButton.setText(LocaleController.getString("ReportSpamLocation", R.string.ReportSpamLocation));
                        this.reportSpamButton.setTag(R.id.object_tag, 1);
                        this.reportSpamButton.setTextColor(getThemedColor(Theme.key_chat_addContact));
                        if (Build.VERSION.SDK_INT >= 21) {
                            Theme.setSelectorDrawableColor(this.reportSpamButton.getBackground(), 436207615 & getThemedColor(Theme.key_chat_addContact), true);
                        }
                        this.reportSpamButton.setTag(Theme.key_chat_addContact);
                    }
                    ActionBarMenuSubItem actionBarMenuSubItem = this.addContactItem;
                    if (actionBarMenuSubItem != null) {
                        actionBarMenuSubItem.setVisibility(8);
                    }
                }
            } else {
                String str2 = LocaleController.getString("GroupAddMembers", R.string.GroupAddMembers);
                if (str2 != null) {
                    str2 = str2.toUpperCase();
                }
                this.addToContactsButton.setVisibility(0);
                this.addToContactsButton.setText(str2);
                this.addToContactsButton.setTag(4);
                this.addToContactsButton.setTextColor(getThemedColor(Theme.key_chat_addContact));
                if (Build.VERSION.SDK_INT >= 21) {
                    Theme.setSelectorDrawableColor(this.addToContactsButton.getBackground(), 436207615 & getThemedColor(Theme.key_chat_addContact), true);
                }
                this.reportSpamButton.setTag(Theme.key_chat_addContact);
            }
        } else {
            if (this.chatWithAdminTextView != null) {
                user = user2;
            } else {
                TextView textView2 = new TextView(this.topChatPanelView.getContext());
                this.chatWithAdminTextView = textView2;
                textView2.setGravity(16);
                this.chatWithAdminTextView.setPadding(AndroidUtilities.dp(14.0f), 0, AndroidUtilities.dp(46.0f), 0);
                this.chatWithAdminTextView.setBackground(Theme.createSelectorDrawable(getThemedColor(Theme.key_listSelector), 2));
                this.topChatPanelView.addView(this.chatWithAdminTextView, 0, LayoutHelper.createFrame(-1, -1.0f, 0, 0.0f, 0.0f, 0.0f, 1.0f));
                this.chatWithAdminTextView.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));
                this.chatWithAdminTextView.setTextSize(1, 14.0f);
                user = user2;
                this.chatWithAdminTextView.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity.95
                    @Override // android.view.View.OnClickListener
                    public void onClick(View view) {
                        AlertsCreator.showChatWithAdmin(ChatActivity.this, user2, chatWithAdmin, chatWithAdminChannel, chatWithAdminDate);
                    }
                });
            }
            String str3 = chatWithAdminChannel ? LocaleController.formatString("ChatWithGroupAdmin", R.string.ChatWithGroupAdmin, user.first_name, chatWithAdmin) : LocaleController.formatString("ChatWithChannelAdmin", R.string.ChatWithChannelAdmin, user.first_name, chatWithAdmin);
            i = 8;
            this.reportSpamButton.setVisibility(8);
            this.addToContactsButton.setVisibility(8);
            this.chatWithAdminTextView.setText(AndroidUtilities.replaceTags(str3));
            str = 1;
        }
        TextView textView3 = this.chatWithAdminTextView;
        if (textView3 != null) {
            textView3.setVisibility(str != null ? 0 : 8);
        }
        if (this.userBlocked || (this.addToContactsButton.getVisibility() == i && this.reportSpamButton.getVisibility() == i && ((textView = this.chatWithAdminTextView) == null || textView.getVisibility() == i))) {
            show2 = false;
        }
        if (show2) {
            if (this.topChatPanelView.getTag() != null) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("show spam button");
                }
                this.topChatPanelView.setTag(null);
                this.topChatPanelView.setVisibility(0);
                AnimatorSet animatorSet = this.reportSpamViewAnimator;
                if (animatorSet != null) {
                    animatorSet.cancel();
                    this.reportSpamViewAnimator = null;
                }
                if (animated) {
                    this.reportSpamViewAnimator = new AnimatorSet();
                    ValueAnimator animator = ValueAnimator.ofFloat(this.topChatPanelViewOffset, 0.0f);
                    animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda44
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                            ChatActivity.this.m1982lambda$updateTopPanel$145$orgtelegramuiChatActivity(valueAnimator);
                        }
                    });
                    this.reportSpamViewAnimator.playTogether(animator);
                    this.reportSpamViewAnimator.setDuration(200L);
                    this.reportSpamViewAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.96
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animation) {
                            if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(animation)) {
                                ChatActivity.this.reportSpamViewAnimator = null;
                            }
                        }

                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationCancel(Animator animation) {
                            if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(animation)) {
                                ChatActivity.this.reportSpamViewAnimator = null;
                            }
                        }
                    });
                    this.reportSpamViewAnimator.start();
                } else {
                    this.topChatPanelViewOffset = 0.0f;
                    invalidateChatListViewTopPadding();
                    invalidateMessagesVisiblePart();
                }
            }
        } else if (this.topChatPanelView.getTag() == null) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("hide spam button");
            }
            this.topChatPanelView.setTag(1);
            AnimatorSet animatorSet2 = this.reportSpamViewAnimator;
            if (animatorSet2 != null) {
                animatorSet2.cancel();
                this.reportSpamViewAnimator = null;
            }
            if (animated) {
                this.reportSpamViewAnimator = new AnimatorSet();
                ValueAnimator animator2 = ValueAnimator.ofFloat(this.topChatPanelViewOffset, -AndroidUtilities.dp(50.0f));
                animator2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda55
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ChatActivity.this.m1983lambda$updateTopPanel$146$orgtelegramuiChatActivity(valueAnimator);
                    }
                });
                this.reportSpamViewAnimator.playTogether(animator2);
                this.reportSpamViewAnimator.setDuration(200L);
                this.reportSpamViewAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.97
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animation) {
                        if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(animation)) {
                            ChatActivity.this.topChatPanelView.setVisibility(8);
                            ChatActivity.this.reportSpamViewAnimator = null;
                        }
                    }

                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationCancel(Animator animation) {
                        if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(animation)) {
                            ChatActivity.this.reportSpamViewAnimator = null;
                        }
                    }
                });
                this.reportSpamViewAnimator.start();
            } else {
                this.topChatPanelViewOffset = -AndroidUtilities.dp(50.0f);
                invalidateChatListViewTopPadding();
                invalidateMessagesVisiblePart();
            }
        }
        checkListViewPaddings();
    }

    /* renamed from: lambda$updateTopPanel$145$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1982lambda$updateTopPanel$145$orgtelegramuiChatActivity(ValueAnimator animation) {
        this.topChatPanelViewOffset = ((Float) animation.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
    }

    /* renamed from: lambda$updateTopPanel$146$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1983lambda$updateTopPanel$146$orgtelegramuiChatActivity(ValueAnimator animation) {
        this.topChatPanelViewOffset = ((Float) animation.getAnimatedValue()).floatValue();
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
    }

    private void checkListViewPaddings() {
        MessageObject messageObject;
        if (!this.wasManualScroll && (messageObject = this.unreadMessageObject) != null) {
            int pos = this.messages.indexOf(messageObject);
            if (pos >= 0) {
                this.fixPaddingsInLayout = true;
                if (this.fragmentView != null) {
                    this.fragmentView.requestLayout();
                }
            }
        } else if (this.checkPaddingsRunnable != null) {
        } else {
            Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda20
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1761lambda$checkListViewPaddings$147$orgtelegramuiChatActivity();
                }
            };
            this.checkPaddingsRunnable = runnable;
            AndroidUtilities.runOnUIThread(runnable);
        }
    }

    /* renamed from: lambda$checkListViewPaddings$147$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1761lambda$checkListViewPaddings$147$orgtelegramuiChatActivity() {
        this.checkPaddingsRunnable = null;
        invalidateChatListViewTopPadding();
        invalidateMessagesVisiblePart();
    }

    public void checkRaiseSensors() {
        BlurredFrameLayout blurredFrameLayout;
        FrameLayout frameLayout;
        BlurredFrameLayout blurredFrameLayout2;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && chatActivityEnterView.isStickersExpanded()) {
            MediaController.getInstance().setAllowStartRecord(false);
            return;
        }
        TLRPC.Chat chat = this.currentChat;
        if (chat != null && !ChatObject.canSendMedia(chat)) {
            MediaController.getInstance().setAllowStartRecord(false);
        } else if (!ApplicationLoader.mainInterfacePaused && (((blurredFrameLayout = this.bottomOverlayChat) == null || blurredFrameLayout.getVisibility() != 0) && (((frameLayout = this.bottomOverlay) == null || frameLayout.getVisibility() != 0) && ((blurredFrameLayout2 = this.searchContainer) == null || blurredFrameLayout2.getVisibility() != 0)))) {
            MediaController.getInstance().setAllowStartRecord(true);
        } else {
            MediaController.getInstance().setAllowStartRecord(false);
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void dismissCurrentDialog() {
        if (this.chatAttachAlert != null) {
            Dialog dialog = this.visibleDialog;
            ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
            if (dialog == chatAttachAlert) {
                chatAttachAlert.getPhotoLayout().closeCamera(false);
                this.chatAttachAlert.dismissInternal();
                this.chatAttachAlert.getPhotoLayout().hideCamera(true);
                return;
            }
        }
        super.dismissCurrentDialog();
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void setInPreviewMode(boolean value) {
        float f;
        super.setInPreviewMode(value);
        if (this.currentUser != null && this.audioCallIconItem != null) {
            TLRPC.UserFull userFull = getMessagesController().getUserFull(this.currentUser.id);
            if (userFull != null && userFull.phone_calls_available) {
                this.showAudioCallAsIcon = !this.inPreviewMode;
                this.audioCallIconItem.setVisibility(0);
            } else {
                this.showAudioCallAsIcon = false;
                this.audioCallIconItem.setVisibility(8);
            }
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.setOccupyStatusBar(!value);
            ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
            if (!value) {
                f = 56.0f;
            } else {
                f = this.chatMode == 2 ? 10 : 0;
            }
            chatAvatarContainer2.setLayoutParams(LayoutHelper.createFrame(-2, -1.0f, 51, f, 0.0f, 40.0f, 0.0f));
        }
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setVisibility(!value ? 0 : 4);
        }
        if (this.actionBar != null) {
            this.actionBar.setBackButtonDrawable(!value ? new BackDrawable(false) : null);
            ActionBarMenuItem actionBarMenuItem = this.headerItem;
            float f2 = 1.0f;
            if (actionBarMenuItem != null) {
                actionBarMenuItem.setAlpha(!value ? 1.0f : 0.0f);
            }
            ActionBarMenuItem actionBarMenuItem2 = this.attachItem;
            if (actionBarMenuItem2 != null) {
                if (value) {
                    f2 = 0.0f;
                }
                actionBarMenuItem2.setAlpha(f2);
            }
        }
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            int count = recyclerListView.getChildCount();
            for (int a = 0; a < count; a++) {
                View view = this.chatListView.getChildAt(a);
                MessageObject message = null;
                if (view instanceof ChatMessageCell) {
                    message = ((ChatMessageCell) view).getMessageObject();
                } else if (view instanceof ChatActionCell) {
                    message = ((ChatActionCell) view).getMessageObject();
                }
                if (message != null && message.messageOwner != null && message.messageOwner.media_unread && message.messageOwner.mentioned) {
                    if (!message.isVoice() && !message.isRoundVideo()) {
                        int i = this.newMentionsCount - 1;
                        this.newMentionsCount = i;
                        if (i <= 0) {
                            this.newMentionsCount = 0;
                            this.hasAllMentionsLocal = true;
                            showMentionDownButton(false, true);
                        } else {
                            this.mentiondownButtonCounter.setText(String.format("%d", Integer.valueOf(i)));
                        }
                        getMessagesController().markMentionMessageAsRead(message.getId(), ChatObject.isChannel(this.currentChat) ? this.currentChat.id : 0L, this.dialog_id);
                        message.setContentIsRead();
                    }
                    if (view instanceof ChatMessageCell) {
                        ((ChatMessageCell) view).setHighlighted(false);
                        ((ChatMessageCell) view).setHighlightedAnimated();
                    }
                }
            }
            this.chatListView.setItemAnimator(null);
        }
        updateBottomOverlay();
        updateSecretStatus();
        FragmentContextView fragmentContextView = this.fragmentContextView;
        if (fragmentContextView != null) {
            fragmentContextView.setEnabled(!value);
        }
        FragmentContextView fragmentContextView2 = this.fragmentLocationContextView;
        if (fragmentContextView2 != null) {
            fragmentContextView2.setEnabled(!value);
        }
        BlurredFrameLayout blurredFrameLayout = this.pinnedMessageView;
        if (blurredFrameLayout != null) {
            blurredFrameLayout.setEnabled(!isInPreviewMode());
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onResume() {
        ChatActivityEnterView chatActivityEnterView;
        MessageObject messageObject;
        int yOffset;
        BackupImageView backupImageView;
        super.onResume();
        checkShowBlur(false);
        this.activityResumeTime = System.currentTimeMillis();
        if (this.openImport && getSendMessagesHelper().getImportingHistory(this.dialog_id) != null) {
            ImportingAlert alert = new ImportingAlert(getParentActivity(), null, this, this.themeDelegate);
            alert.setOnHideListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda200
                @Override // android.content.DialogInterface.OnDismissListener
                public final void onDismiss(DialogInterface dialogInterface) {
                    ChatActivity.this.m1883lambda$onResume$148$orgtelegramuiChatActivity(dialogInterface);
                }
            });
            showDialog(alert);
            this.openImport = false;
        }
        checkAdjustResize();
        MediaController.getInstance().startRaiseToEarSensors(this);
        checkRaiseSensors();
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.onResume();
        }
        SizeNotifierFrameLayout sizeNotifierFrameLayout = this.contentView;
        if (sizeNotifierFrameLayout != null) {
            sizeNotifierFrameLayout.onResume();
        }
        checkChecksHint();
        Bulletin.Delegate delegate = new Bulletin.Delegate() { // from class: org.telegram.ui.ChatActivity.98
            @Override // org.telegram.ui.Components.Bulletin.Delegate
            public /* synthetic */ void onHide(Bulletin bulletin) {
                Bulletin.Delegate.CC.$default$onHide(this, bulletin);
            }

            @Override // org.telegram.ui.Components.Bulletin.Delegate
            public /* synthetic */ void onOffsetChange(float f) {
                Bulletin.Delegate.CC.$default$onOffsetChange(this, f);
            }

            @Override // org.telegram.ui.Components.Bulletin.Delegate
            public /* synthetic */ void onShow(Bulletin bulletin) {
                Bulletin.Delegate.CC.$default$onShow(this, bulletin);
            }

            @Override // org.telegram.ui.Components.Bulletin.Delegate
            public int getBottomOffset(int tag) {
                int height;
                if (tag == 1) {
                    return 0;
                }
                if (ChatActivity.this.chatActivityEnterView != null && ChatActivity.this.chatActivityEnterView.getVisibility() == 0) {
                    if ((ChatActivity.this.contentView.getKeyboardHeight() < AndroidUtilities.dp(20.0f) && ChatActivity.this.chatActivityEnterView.isPopupShowing()) || ChatActivity.this.chatActivityEnterView.panelAnimationInProgress()) {
                        height = ChatActivity.this.chatActivityEnterView.getHeight() + ChatActivity.this.chatActivityEnterView.getEmojiPadding();
                    } else {
                        height = ChatActivity.this.chatActivityEnterView.getHeight();
                    }
                } else {
                    height = AndroidUtilities.dp(51.0f);
                }
                if (ChatActivity.this.chatActivityEnterView.panelAnimationInProgress()) {
                    float translationY = ChatActivity.this.bottomPanelTranslationY - ChatActivity.this.chatActivityEnterView.getEmojiPadding();
                    height = (int) (height + translationY);
                }
                float translationY2 = height;
                return ((int) (translationY2 + ChatActivity.this.contentPanTranslation)) - AndroidUtilities.dp(1.5f);
            }
        };
        this.bulletinDelegate = delegate;
        Bulletin.addDelegate(this, delegate);
        checkActionBarMenu(false);
        TLRPC.PhotoSize photoSize = this.replyImageLocation;
        if (photoSize != null && (backupImageView = this.replyImageView) != null) {
            backupImageView.setImage(ImageLocation.getForObject(photoSize, this.replyImageLocationObject), "50_50", ImageLocation.getForObject(this.replyImageThumbLocation, this.replyImageLocationObject), "50_50_b", null, this.replyImageSize, this.replyImageCacheType, this.replyingMessageObject);
        }
        if (this.pinnedImageLocation != null && this.pinnedMessageImageView != null) {
            MessageObject pinnedMessageObject = this.pinnedMessageObjects.get(Integer.valueOf(this.currentPinnedMessageId));
            this.pinnedMessageImageView[0].setImage(ImageLocation.getForObject(this.pinnedImageLocation, this.pinnedImageLocationObject), "50_50", ImageLocation.getForObject(this.pinnedImageThumbLocation, this.pinnedImageLocationObject), "50_50_b", null, this.pinnedImageSize, this.pinnedImageCacheType, pinnedMessageObject);
        }
        if (this.chatMode == 0) {
            getNotificationsController().setOpenedDialogId(this.dialog_id);
        }
        getMessagesController().setLastVisibleDialogId(this.dialog_id, this.chatMode == 1, true);
        if (this.scrollToTopOnResume) {
            if (this.scrollToTopUnReadOnResume && (messageObject = this.scrollToMessage) != null) {
                if (this.chatListView != null) {
                    boolean bottom = true;
                    int i = this.scrollToMessagePosition;
                    if (i == -9000) {
                        yOffset = getScrollOffsetForMessage(messageObject);
                        bottom = false;
                    } else if (i == -10000) {
                        yOffset = -AndroidUtilities.dp(11.0f);
                        bottom = false;
                    } else {
                        yOffset = this.scrollToMessagePosition;
                    }
                    this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(this.scrollToMessage), yOffset, bottom);
                }
            } else {
                moveScrollToLastMessage(false);
            }
            this.scrollToTopUnReadOnResume = false;
            this.scrollToTopOnResume = false;
            this.scrollToMessage = null;
        }
        this.paused = false;
        this.pausedOnLastMessage = false;
        checkScrollForLoad(false);
        if (this.wasPaused) {
            this.wasPaused = false;
            ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
            if (chatActivityAdapter != null) {
                chatActivityAdapter.notifyDataSetChanged(false);
            }
        }
        fixLayout();
        applyDraftMaybe(false);
        BlurredFrameLayout blurredFrameLayout = this.bottomOverlayChat;
        if (blurredFrameLayout != null && blurredFrameLayout.getVisibility() != 0 && !this.actionBar.isSearchFieldVisible()) {
            this.chatActivityEnterView.setFieldFocused(true);
        }
        ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
        if (chatActivityEnterView2 != null) {
            chatActivityEnterView2.onResume();
        }
        if (this.currentUser != null) {
            this.chatEnterTime = System.currentTimeMillis();
            this.chatLeaveTime = 0L;
        }
        if (this.startVideoEdit != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda43
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1884lambda$onResume$149$orgtelegramuiChatActivity();
                }
            });
        }
        if (this.chatListView != null && ((chatActivityEnterView = this.chatActivityEnterView) == null || !chatActivityEnterView.isEditingMessage())) {
            this.chatListView.setOnItemLongClickListener(this.onItemLongClickListener);
            this.chatListView.setOnItemClickListener(this.onItemClickListener);
            this.chatListView.setLongClickable(true);
        }
        checkBotCommands();
        updateTitle();
        showGigagroupConvertAlert();
        if (this.pullingDownOffset != 0.0f) {
            this.pullingDownOffset = 0.0f;
            this.chatListView.invalidate();
        }
    }

    /* renamed from: lambda$onResume$148$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1883lambda$onResume$148$orgtelegramuiChatActivity(DialogInterface dialog) {
        FragmentContextView fragmentContextView = this.fragmentContextView;
        if (fragmentContextView != null) {
            fragmentContextView.checkImport(false);
        }
    }

    /* renamed from: lambda$onResume$149$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1884lambda$onResume$149$orgtelegramuiChatActivity() {
        openVideoEditor(this.startVideoEdit, null);
        this.startVideoEdit = null;
    }

    public void checkAdjustResize() {
        if (this.reportType >= 0) {
            AndroidUtilities.requestAdjustNothing(getParentActivity(), this.classGuid);
        } else {
            AndroidUtilities.requestAdjustResize(getParentActivity(), this.classGuid);
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void finishFragment() {
        super.finishFragment();
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.setPauseNotifications(false);
            closeMenu();
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:82:0x01a0, code lost:
        if (r4.messageOwner.from_scheduled == false) goto L87;
     */
    @Override // org.telegram.ui.ActionBar.BaseFragment
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void onPause() {
        /*
            Method dump skipped, instructions count: 720
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.onPause():void");
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r1v10, types: [android.text.SpannableStringBuilder, android.text.Spannable] */
    /* JADX WARN: Type inference failed for: r1v7, types: [java.lang.CharSequence] */
    /* JADX WARN: Type inference failed for: r1v8, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r3v6, types: [org.telegram.ui.Components.ChatActivityEnterView] */
    private void applyDraftMaybe(boolean canClear) {
        ?? r1;
        long user_id;
        if (this.chatActivityEnterView == null || this.chatMode != 0) {
            return;
        }
        TLRPC.DraftMessage draftMessage = getMediaDataController().getDraft(this.dialog_id, this.threadMessageId);
        TLRPC.Message draftReplyMessage = (draftMessage == null || draftMessage.reply_to_msg_id == 0) ? null : getMediaDataController().getDraftMessage(this.dialog_id, this.threadMessageId);
        if (this.chatActivityEnterView.getFieldText() == null) {
            if (draftMessage != null) {
                this.chatActivityEnterView.setWebPage(null, !draftMessage.no_webpage);
                if (!draftMessage.entities.isEmpty()) {
                    r1 = SpannableStringBuilder.valueOf(draftMessage.message);
                    MediaDataController.sortEntities(draftMessage.entities);
                    for (int a = 0; a < draftMessage.entities.size(); a++) {
                        TLRPC.MessageEntity entity = draftMessage.entities.get(a);
                        if ((entity instanceof TLRPC.TL_inputMessageEntityMentionName) || (entity instanceof TLRPC.TL_messageEntityMentionName)) {
                            if (entity instanceof TLRPC.TL_inputMessageEntityMentionName) {
                                user_id = ((TLRPC.TL_inputMessageEntityMentionName) entity).user_id.user_id;
                            } else {
                                user_id = ((TLRPC.TL_messageEntityMentionName) entity).user_id;
                            }
                            if (entity.offset + entity.length < r1.length() && r1.charAt(entity.offset + entity.length) == ' ') {
                                entity.length++;
                            }
                            r1.setSpan(new URLSpanUserMention("" + user_id, 3), entity.offset, entity.offset + entity.length, 33);
                        } else if ((entity instanceof TLRPC.TL_messageEntityCode) || (entity instanceof TLRPC.TL_messageEntityPre)) {
                            TextStyleSpan.TextStyleRun run = new TextStyleSpan.TextStyleRun();
                            run.flags |= 4;
                            MediaDataController.addStyleToText(new TextStyleSpan(run), entity.offset, entity.offset + entity.length, r1, true);
                        } else if (entity instanceof TLRPC.TL_messageEntityBold) {
                            TextStyleSpan.TextStyleRun run2 = new TextStyleSpan.TextStyleRun();
                            run2.flags |= 1;
                            MediaDataController.addStyleToText(new TextStyleSpan(run2), entity.offset, entity.offset + entity.length, r1, true);
                        } else if (entity instanceof TLRPC.TL_messageEntityItalic) {
                            TextStyleSpan.TextStyleRun run3 = new TextStyleSpan.TextStyleRun();
                            run3.flags |= 2;
                            MediaDataController.addStyleToText(new TextStyleSpan(run3), entity.offset, entity.offset + entity.length, r1, true);
                        } else if (entity instanceof TLRPC.TL_messageEntityStrike) {
                            TextStyleSpan.TextStyleRun run4 = new TextStyleSpan.TextStyleRun();
                            run4.flags |= 8;
                            MediaDataController.addStyleToText(new TextStyleSpan(run4), entity.offset, entity.offset + entity.length, r1, true);
                        } else if (entity instanceof TLRPC.TL_messageEntityUnderline) {
                            TextStyleSpan.TextStyleRun run5 = new TextStyleSpan.TextStyleRun();
                            run5.flags |= 16;
                            MediaDataController.addStyleToText(new TextStyleSpan(run5), entity.offset, entity.offset + entity.length, r1, true);
                        } else if (entity instanceof TLRPC.TL_messageEntityTextUrl) {
                            r1.setSpan(new URLSpanReplacement(entity.url), entity.offset, entity.offset + entity.length, 33);
                        } else if (entity instanceof TLRPC.TL_messageEntitySpoiler) {
                            TextStyleSpan.TextStyleRun run6 = new TextStyleSpan.TextStyleRun();
                            run6.flags |= 256;
                            MediaDataController.addStyleToText(new TextStyleSpan(run6), entity.offset, entity.offset + entity.length, r1, true);
                        }
                    }
                } else {
                    r1 = draftMessage.message;
                }
                this.chatActivityEnterView.setFieldText(r1);
                if (getArguments().getBoolean("hasUrl", false)) {
                    this.chatActivityEnterView.setSelection(draftMessage.message.indexOf(10) + 1);
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda19
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.this.m1760lambda$applyDraftMaybe$150$orgtelegramuiChatActivity();
                        }
                    }, 700L);
                }
            }
        } else if (canClear && draftMessage == null) {
            this.chatActivityEnterView.setFieldText("");
            hideFieldPanel(true);
        }
        if (this.replyingMessageObject == null && draftReplyMessage != null) {
            MessageObject messageObject = new MessageObject(this.currentAccount, draftReplyMessage, (AbstractMap<Long, TLRPC.User>) getMessagesController().getUsers(), false, false);
            this.replyingMessageObject = messageObject;
            showFieldPanelForReply(messageObject);
        }
    }

    /* renamed from: lambda$applyDraftMaybe$150$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1760lambda$applyDraftMaybe$150$orgtelegramuiChatActivity() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setFieldFocused(true);
            this.chatActivityEnterView.openKeyboard();
        }
    }

    private void updateInformationForScreenshotDetector() {
        if (this.currentUser == null) {
            return;
        }
        if (this.currentEncryptedChat != null) {
            ArrayList<Long> visibleMessages = new ArrayList<>();
            RecyclerListView recyclerListView = this.chatListView;
            if (recyclerListView != null) {
                int count = recyclerListView.getChildCount();
                for (int a = 0; a < count; a++) {
                    View view = this.chatListView.getChildAt(a);
                    MessageObject object = null;
                    if (view instanceof ChatMessageCell) {
                        ChatMessageCell cell = (ChatMessageCell) view;
                        object = cell.getMessageObject();
                    }
                    if (object != null && object.getId() < 0 && object.messageOwner.random_id != 0) {
                        visibleMessages.add(Long.valueOf(object.messageOwner.random_id));
                    }
                }
            }
            MediaController.getInstance().setLastVisibleMessageIds(this.currentAccount, this.chatEnterTime, this.chatLeaveTime, this.currentUser, this.currentEncryptedChat, visibleMessages, 0);
            return;
        }
        SecretMediaViewer viewer = SecretMediaViewer.getInstance();
        MessageObject messageObject = viewer.getCurrentMessageObject();
        if (messageObject != null && !messageObject.isOut()) {
            MediaController.getInstance().setLastVisibleMessageIds(this.currentAccount, viewer.getOpenTime(), viewer.getCloseTime(), this.currentUser, null, null, messageObject.getId());
        }
    }

    public boolean fixLayoutInternal() {
        boolean z;
        MessageObject.GroupedMessages groupedMessages;
        if (!AndroidUtilities.isTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == 2) {
            this.selectedMessagesCountTextView.setTextSize(18);
        } else {
            this.selectedMessagesCountTextView.setTextSize(20);
        }
        HashMap<Long, MessageObject.GroupedMessages> newGroups = null;
        int count = this.chatListView.getChildCount();
        int a = 0;
        while (true) {
            z = true;
            if (a >= count) {
                break;
            }
            View child = this.chatListView.getChildAt(a);
            if ((child instanceof ChatMessageCell) && (groupedMessages = ((ChatMessageCell) child).getCurrentMessagesGroup()) != null && groupedMessages.hasSibling && !groupedMessages.messages.isEmpty()) {
                if (newGroups == null) {
                    newGroups = new HashMap<>();
                }
                if (!newGroups.containsKey(Long.valueOf(groupedMessages.groupId))) {
                    newGroups.put(Long.valueOf(groupedMessages.groupId), groupedMessages);
                    MessageObject messageObject = groupedMessages.messages.get(groupedMessages.messages.size() - 1);
                    int idx = this.messages.indexOf(messageObject);
                    if (idx >= 0) {
                        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
                        chatActivityAdapter.notifyItemRangeChanged(chatActivityAdapter.messagesStartRow + idx, groupedMessages.messages.size());
                        this.chatListView.setItemAnimator(null);
                    }
                }
            }
            a++;
        }
        if (AndroidUtilities.isTablet()) {
            if (AndroidUtilities.isSmallTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == 1) {
                this.actionBar.setBackButtonDrawable(new BackDrawable(false));
            } else {
                ActionBar actionBar = this.actionBar;
                if (this.parentLayout != null && !this.parentLayout.fragmentsStack.isEmpty() && this.parentLayout.fragmentsStack.get(0) != this && this.parentLayout.fragmentsStack.size() != 1) {
                    z = false;
                }
                actionBar.setBackButtonDrawable(new BackDrawable(z));
            }
            return false;
        }
        return true;
    }

    private void fixLayout() {
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() { // from class: org.telegram.ui.ChatActivity.99
                @Override // android.view.ViewTreeObserver.OnPreDrawListener
                public boolean onPreDraw() {
                    if (ChatActivity.this.avatarContainer != null) {
                        ChatActivity.this.avatarContainer.getViewTreeObserver().removeOnPreDrawListener(this);
                    }
                    return ChatActivity.this.fixLayoutInternal();
                }
            });
        }
    }

    public boolean maybePlayVisibleVideo() {
        ImageReceiver imageReceiver;
        AnimatedFileDrawable animation;
        ChatMessageCell cell;
        ImageReceiver imageReceiver2;
        if (this.chatListView == null) {
            return false;
        }
        MessageObject playingMessage = MediaController.getInstance().getPlayingMessageObject();
        if (playingMessage != null && !playingMessage.isVideo()) {
            return false;
        }
        MessageObject visibleMessage = null;
        AnimatedFileDrawable visibleAnimation = null;
        HintView hintView = this.noSoundHintView;
        if (hintView != null && hintView.getTag() != null && (cell = this.noSoundHintView.getMessageCell()) != null && (visibleAnimation = (imageReceiver2 = cell.getPhotoImage()).getAnimation()) != null) {
            visibleMessage = cell.getMessageObject();
            this.scrollToVideo = ((float) cell.getTop()) + imageReceiver2.getImageY2() > ((float) this.chatListView.getMeasuredHeight());
        }
        if (visibleMessage == null) {
            int count = this.chatListView.getChildCount();
            for (int a = 0; a < count; a++) {
                View child = this.chatListView.getChildAt(a);
                if (child instanceof ChatMessageCell) {
                    ChatMessageCell messageCell = (ChatMessageCell) child;
                    MessageObject messageObject = messageCell.getMessageObject();
                    boolean isRoundVideo = messageObject.isRoundVideo();
                    if ((messageObject.isVideo() || isRoundVideo) && messageObject.videoEditedInfo == null && (animation = (imageReceiver = messageCell.getPhotoImage()).getAnimation()) != null) {
                        float top = child.getTop() + imageReceiver.getImageY();
                        float bottom = imageReceiver.getImageHeight() + top;
                        if (bottom >= 0.0f && top <= this.chatListView.getMeasuredHeight()) {
                            if (visibleMessage != null && top < 0.0f) {
                                break;
                            }
                            visibleMessage = messageObject;
                            visibleAnimation = animation;
                            this.scrollToVideo = top < 0.0f || bottom > ((float) this.chatListView.getMeasuredHeight());
                            if (top >= 0.0f && bottom <= this.chatListView.getMeasuredHeight()) {
                                break;
                            }
                        }
                    }
                }
            }
        }
        if (visibleMessage == null || MediaController.getInstance().isPlayingMessage(visibleMessage)) {
            return false;
        }
        hideHints(true);
        if (visibleMessage.isRoundVideo()) {
            boolean result = MediaController.getInstance().playMessage(visibleMessage);
            MediaController.getInstance().setVoiceMessagesPlaylist(result ? createVoiceMessagesPlaylist(visibleMessage, false) : null, false);
            return result;
        }
        SharedConfig.setNoSoundHintShowed(true);
        visibleMessage.audioProgress = visibleAnimation.getCurrentProgress();
        visibleMessage.audioProgressMs = visibleAnimation.getCurrentProgressMs();
        visibleAnimation.stop();
        if (PhotoViewer.isPlayingMessageInPip(visibleMessage)) {
            PhotoViewer.getPipInstance().destroyPhotoViewer();
        }
        return MediaController.getInstance().playMessage(visibleMessage);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void onConfigurationChanged(Configuration newConfig) {
        MessageObject message;
        fixLayout();
        if (this.visibleDialog instanceof DatePickerDialog) {
            this.visibleDialog.dismiss();
        }
        closeMenu();
        if (!AndroidUtilities.isTablet()) {
            if (newConfig.orientation == 2) {
                if ((!PhotoViewer.hasInstance() || !PhotoViewer.getInstance().isVisible()) && (message = MediaController.getInstance().getPlayingMessageObject()) != null && message.isVideo()) {
                    PhotoViewer.getInstance().setParentActivity(getParentActivity(), this.themeDelegate);
                    getFileLoader().setLoadingVideoForPlayer(message.getDocument(), false);
                    MediaController.getInstance().cleanupPlayer(true, true, false, true);
                    PhotoViewer photoViewer = PhotoViewer.getInstance();
                    long j = 0;
                    long j2 = message.type != 0 ? this.dialog_id : 0L;
                    if (message.type != 0) {
                        j = this.mergeDialogId;
                    }
                    if (photoViewer.openPhoto(message, j2, j, this.photoViewerProvider, false)) {
                        PhotoViewer.getInstance().setParentChatActivity(this);
                    }
                    hideHints(false);
                    MediaController.getInstance().resetGoingToShowMessageObject();
                }
            } else if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isOpenedFullScreenVideo()) {
                PhotoViewer.getInstance().injectVideoPlayerToMediaController();
                PhotoViewer.getInstance().closePhoto(false, true);
            }
        }
    }

    public void createDeleteMessagesAlert(MessageObject finalSelectedObject, MessageObject.GroupedMessages selectedGroup) {
        createDeleteMessagesAlert(finalSelectedObject, selectedGroup, 1);
    }

    private void createDeleteMessagesAlert(MessageObject finalSelectedObject, MessageObject.GroupedMessages finalSelectedGroup, int loadParticipant) {
        createDeleteMessagesAlert(finalSelectedObject, finalSelectedGroup, loadParticipant, false);
    }

    private void createDeleteMessagesAlert(MessageObject finalSelectedObject, MessageObject.GroupedMessages finalSelectedGroup, int loadParticipant, boolean hideDimAfter) {
        if (finalSelectedObject == null && this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size() == 0) {
            return;
        }
        AlertsCreator.createDeleteMessagesAlert(this, this.currentUser, this.currentChat, this.currentEncryptedChat, this.chatInfo, this.mergeDialogId, finalSelectedObject, this.selectedMessagesIds, finalSelectedGroup, this.chatMode == 1, loadParticipant, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda23
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1765x4eb1d54c();
            }
        }, hideDimAfter ? new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda24
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1766x4f5e80eb();
            }
        } : null, this.themeDelegate);
    }

    /* renamed from: lambda$createDeleteMessagesAlert$151$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1765x4eb1d54c() {
        hideActionMode();
        updatePinnedMessageView(true);
    }

    /* renamed from: lambda$createDeleteMessagesAlert$152$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1766x4f5e80eb() {
        dimBehindView(false);
    }

    public void hideActionMode() {
        if (this.actionBar != null) {
            if (!this.actionBar.isActionModeShowed()) {
                return;
            }
            this.actionBar.hideActionMode();
        }
        this.cantDeleteMessagesCount = 0;
        this.canEditMessagesCount = 0;
        this.cantForwardMessagesCount = 0;
        this.canSaveMusicCount = 0;
        this.canSaveDocumentsCount = 0;
        this.cantSaveMessagesCount = 0;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            EditTextCaption editTextCaption = chatActivityEnterView.getEditField();
            if (this.chatActivityEnterView.getVisibility() == 0) {
                editTextCaption.requestFocus();
            }
            editTextCaption.setAllowDrawCursor(true);
        }
        TextSelectionHelper.ChatListTextSelectionHelper chatListTextSelectionHelper = this.textSelectionHelper;
        if (chatListTextSelectionHelper != null) {
            chatListTextSelectionHelper.clear(true);
            this.textSelectionHelper.cancelAllAnimators();
        }
        TextSelectionHint textSelectionHint = this.textSelectionHint;
        if (textSelectionHint != null) {
            textSelectionHint.hide();
        }
        ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
        if (chatActivityEnterView2 != null) {
            chatActivityEnterView2.preventInput = false;
        }
        this.textSelectionHintWasShowed = false;
    }

    public boolean createMenu(View v, boolean single, boolean listView, float x, float y) {
        return createMenu(v, single, listView, x, y, true);
    }

    private CharSequence getMessageCaption(MessageObject messageObject, MessageObject.GroupedMessages group) {
        String restrictionReason = MessagesController.getRestrictionReason(messageObject.messageOwner.restriction_reason);
        if (!TextUtils.isEmpty(restrictionReason)) {
            return restrictionReason;
        }
        if (messageObject.isVoiceTranscriptionOpen() && !TranscribeButton.isTranscribing(messageObject)) {
            return messageObject.getVoiceTranscription();
        }
        if (messageObject.caption != null) {
            return messageObject.caption;
        }
        if (group == null) {
            return null;
        }
        CharSequence caption = null;
        int N = group.messages.size();
        for (int a = 0; a < N; a++) {
            MessageObject message = group.messages.get(a);
            if (message.caption != null) {
                if (caption != null) {
                    return null;
                }
                caption = message.caption;
            }
        }
        return caption;
    }

    /* JADX WARN: Removed duplicated region for block: B:1017:0x2048  */
    /* JADX WARN: Removed duplicated region for block: B:1018:0x204d  */
    /* JADX WARN: Removed duplicated region for block: B:1021:0x2054  */
    /* JADX WARN: Removed duplicated region for block: B:1022:0x2059  */
    /* JADX WARN: Removed duplicated region for block: B:1025:0x206a  */
    /* JADX WARN: Removed duplicated region for block: B:1050:0x21c3  */
    /* JADX WARN: Removed duplicated region for block: B:1051:0x21c8  */
    /* JADX WARN: Removed duplicated region for block: B:1056:0x21f1  */
    /* JADX WARN: Removed duplicated region for block: B:1057:0x21fe  */
    /* JADX WARN: Removed duplicated region for block: B:1060:0x221f  */
    /* JADX WARN: Removed duplicated region for block: B:1062:0x2222  */
    /* JADX WARN: Removed duplicated region for block: B:1072:0x2289  */
    /* JADX WARN: Removed duplicated region for block: B:1079:0x22bb  */
    /* JADX WARN: Removed duplicated region for block: B:1080:0x22c1  */
    /* JADX WARN: Removed duplicated region for block: B:1083:0x22e1  */
    /* JADX WARN: Removed duplicated region for block: B:1084:0x22e8  */
    /* JADX WARN: Removed duplicated region for block: B:1087:0x22ef  */
    /* JADX WARN: Removed duplicated region for block: B:1090:0x22f6  */
    /* JADX WARN: Removed duplicated region for block: B:1116:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:425:0x09bb  */
    /* JADX WARN: Removed duplicated region for block: B:738:0x14a5  */
    /* JADX WARN: Removed duplicated region for block: B:740:0x14af  */
    /* JADX WARN: Removed duplicated region for block: B:837:0x1606 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:841:0x164e  */
    /* JADX WARN: Removed duplicated region for block: B:858:0x16d2  */
    /* JADX WARN: Removed duplicated region for block: B:859:0x16d5  */
    /* JADX WARN: Removed duplicated region for block: B:862:0x16e0  */
    /* JADX WARN: Removed duplicated region for block: B:863:0x16e2  */
    /* JADX WARN: Removed duplicated region for block: B:866:0x1713  */
    /* JADX WARN: Removed duplicated region for block: B:867:0x1715  */
    /* JADX WARN: Removed duplicated region for block: B:870:0x171f  */
    /* JADX WARN: Removed duplicated region for block: B:871:0x1726  */
    /* JADX WARN: Removed duplicated region for block: B:874:0x1743  */
    /* JADX WARN: Removed duplicated region for block: B:900:0x18e4  */
    /* JADX WARN: Removed duplicated region for block: B:985:0x1f59  */
    /* JADX WARN: Removed duplicated region for block: B:988:0x1f92  */
    /* JADX WARN: Removed duplicated region for block: B:989:0x1f9b  */
    /* JADX WARN: Type inference failed for: r15v23 */
    /* JADX WARN: Type inference failed for: r15v3, types: [int, boolean] */
    /* JADX WARN: Type inference failed for: r15v36 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public boolean createMenu(final android.view.View r74, boolean r75, boolean r76, float r77, float r78, boolean r79) {
        /*
            Method dump skipped, instructions count: 8980
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.createMenu(android.view.View, boolean, boolean, float, float, boolean):boolean");
    }

    /* renamed from: lambda$createMenu$154$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1768lambda$createMenu$154$orgtelegramuiChatActivity(final TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda92
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1767lambda$createMenu$153$orgtelegramuiChatActivity(response);
            }
        });
    }

    /* renamed from: lambda$createMenu$153$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1767lambda$createMenu$153$orgtelegramuiChatActivity(TLObject response) {
        if (response instanceof TLRPC.TL_payments_paymentReceipt) {
            presentFragment(new PaymentFormActivity((TLRPC.TL_payments_paymentReceipt) response));
        }
    }

    public static /* synthetic */ void lambda$createMenu$157(ViewPager pager, int finalI, LinearLayout tabsView, AtomicBoolean suppressTabsScroll, final HorizontalScrollView tabsScrollView, final ReactionTabHolderView hv, View v1) {
        int from = pager.getCurrentItem();
        if (finalI == from) {
            return;
        }
        final ReactionTabHolderView fv = (ReactionTabHolderView) tabsView.getChildAt(from);
        suppressTabsScroll.set(true);
        pager.setCurrentItem(finalI, true);
        final float fSX = tabsScrollView.getScrollX();
        final float tSX = hv.getX() - ((tabsScrollView.getWidth() - hv.getWidth()) / 2.0f);
        ValueAnimator a = ValueAnimator.ofFloat(0.0f, 1.0f).setDuration(150L);
        a.setInterpolator(CubicBezierInterpolator.DEFAULT);
        a.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda0
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                ChatActivity.lambda$createMenu$156(tabsScrollView, fSX, tSX, fv, hv, valueAnimator);
            }
        });
        a.start();
    }

    public static /* synthetic */ void lambda$createMenu$156(HorizontalScrollView tabsScrollView, float fSX, float tSX, ReactionTabHolderView fv, ReactionTabHolderView hv, ValueAnimator animation) {
        float f = ((Float) animation.getAnimatedValue()).floatValue();
        tabsScrollView.setScrollX((int) (((tSX - fSX) * f) + fSX));
        fv.setOutlineProgress(1.0f - f);
        hv.setOutlineProgress(f);
    }

    /* renamed from: org.telegram.ui.ChatActivity$101 */
    /* loaded from: classes4.dex */
    public class AnonymousClass101 extends PagerAdapter {
        final /* synthetic */ SparseIntArray val$cachedHeights;
        final /* synthetic */ SparseArray val$cachedViews;
        final /* synthetic */ List val$counters;
        final /* synthetic */ int val$finalCount;
        final /* synthetic */ int[] val$foregroundIndex;
        final /* synthetic */ int val$head;
        final /* synthetic */ MessageObject val$message;
        final /* synthetic */ ViewPager val$pager;
        final /* synthetic */ ActionBarPopupWindow.ActionBarPopupWindowLayout val$popupLayout;
        final /* synthetic */ ReactedHeaderView val$reactedView;
        final /* synthetic */ boolean val$showAllReactionsTab;
        final /* synthetic */ int val$size;

        AnonymousClass101(int i, SparseArray sparseArray, boolean z, List list, MessageObject messageObject, ReactedHeaderView reactedHeaderView, SparseIntArray sparseIntArray, int i2, ViewPager viewPager, ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout, int[] iArr, int i3) {
            ChatActivity.this = this$0;
            this.val$size = i;
            this.val$cachedViews = sparseArray;
            this.val$showAllReactionsTab = z;
            this.val$counters = list;
            this.val$message = messageObject;
            this.val$reactedView = reactedHeaderView;
            this.val$cachedHeights = sparseIntArray;
            this.val$head = i2;
            this.val$pager = viewPager;
            this.val$popupLayout = actionBarPopupWindowLayout;
            this.val$foregroundIndex = iArr;
            this.val$finalCount = i3;
        }

        @Override // androidx.viewpager.widget.PagerAdapter
        public int getCount() {
            return this.val$size;
        }

        @Override // androidx.viewpager.widget.PagerAdapter
        public boolean isViewFromObject(View view, Object object) {
            return view == object;
        }

        @Override // androidx.viewpager.widget.PagerAdapter
        public Object instantiateItem(ViewGroup container, final int position) {
            View cached = (View) this.val$cachedViews.get(position);
            if (cached != null) {
                container.addView(cached);
                return cached;
            }
            int index = position;
            if (this.val$showAllReactionsTab) {
                index--;
            }
            TLRPC.TL_reactionCount reactionCount = null;
            if (index >= 0) {
                reactionCount = (TLRPC.TL_reactionCount) this.val$counters.get(index);
            }
            ReactedUsersListView onProfileSelectedListener = new ReactedUsersListView(container.getContext(), ChatActivity.this.themeDelegate, ChatActivity.this.currentAccount, this.val$message, reactionCount, true).setSeenUsers(this.val$reactedView.getSeenUsers()).setOnProfileSelectedListener(new ReactedUsersListView.OnProfileSelectedListener() { // from class: org.telegram.ui.ChatActivity$101$$ExternalSyntheticLambda1
                @Override // org.telegram.ui.Components.ReactedUsersListView.OnProfileSelectedListener
                public final void onProfileSelected(ReactedUsersListView reactedUsersListView, long j) {
                    ChatActivity.AnonymousClass101.this.m1989lambda$instantiateItem$0$orgtelegramuiChatActivity$101(reactedUsersListView, j);
                }
            });
            final SparseIntArray sparseIntArray = this.val$cachedHeights;
            final int i = this.val$head;
            final ViewPager viewPager = this.val$pager;
            final ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout = this.val$popupLayout;
            final int[] iArr = this.val$foregroundIndex;
            ReactedUsersListView v = onProfileSelectedListener.setOnHeightChangedListener(new ReactedUsersListView.OnHeightChangedListener() { // from class: org.telegram.ui.ChatActivity$101$$ExternalSyntheticLambda0
                @Override // org.telegram.ui.Components.ReactedUsersListView.OnHeightChangedListener
                public final void onHeightChanged(ReactedUsersListView reactedUsersListView, int i2) {
                    ChatActivity.AnonymousClass101.lambda$instantiateItem$1(sparseIntArray, position, i, viewPager, actionBarPopupWindowLayout, iArr, reactedUsersListView, i2);
                }
            });
            if (index < 0) {
                v.setPredictiveCount(this.val$finalCount);
                ReactedHeaderView reactedHeaderView = this.val$reactedView;
                v.getClass();
                reactedHeaderView.setSeenCallback(new ChatActivity$$ExternalSyntheticLambda15(v));
            }
            container.addView(v);
            this.val$cachedViews.put(position, v);
            return v;
        }

        /* renamed from: lambda$instantiateItem$0$org-telegram-ui-ChatActivity$101 */
        public /* synthetic */ void m1989lambda$instantiateItem$0$orgtelegramuiChatActivity$101(ReactedUsersListView view, long userId) {
            Bundle args = new Bundle();
            args.putLong("user_id", userId);
            ProfileActivity fragment = new ProfileActivity(args);
            ChatActivity.this.presentFragment(fragment);
            ChatActivity.this.closeMenu();
        }

        public static /* synthetic */ void lambda$instantiateItem$1(SparseIntArray cachedHeights, int position, int head, ViewPager pager, ActionBarPopupWindow.ActionBarPopupWindowLayout popupLayout, int[] foregroundIndex, ReactedUsersListView view, int newHeight) {
            cachedHeights.put(position, head + newHeight);
            if (pager.getCurrentItem() == position) {
                popupLayout.getSwipeBack().setNewForegroundHeight(foregroundIndex[0], head + newHeight, true);
            }
        }

        @Override // androidx.viewpager.widget.PagerAdapter
        public void destroyItem(ViewGroup container, int position, Object object) {
            container.removeView((View) object);
        }
    }

    /* renamed from: lambda$createMenu$158$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1769lambda$createMenu$158$orgtelegramuiChatActivity(ReactedUsersListView view, long userId) {
        Bundle args = new Bundle();
        args.putLong("user_id", userId);
        ProfileActivity fragment = new ProfileActivity(args);
        presentFragment(fragment);
        closeMenu();
    }

    public static /* synthetic */ void lambda$createMenu$160(ReactedUsersListView finalReactedUsersListView, ActionBarPopupWindow.ActionBarPopupWindowLayout popupLayout, int[] foregroundIndex, View v1) {
        if (finalReactedUsersListView == null || finalReactedUsersListView.isLoaded) {
            popupLayout.getSwipeBack().openForeground(foregroundIndex[0]);
        }
    }

    /* renamed from: lambda$createMenu$161$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1770lambda$createMenu$161$orgtelegramuiChatActivity(MessageSeenView finalMessageSeenView, View view1, int position) {
        TLRPC.User user = finalMessageSeenView.users.get(position);
        if (user == null) {
            return;
        }
        Bundle args = new Bundle();
        args.putLong("user_id", user.id);
        ProfileActivity fragment = new ProfileActivity(args);
        presentFragment(fragment);
    }

    /* renamed from: lambda$createMenu$162$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1771lambda$createMenu$162$orgtelegramuiChatActivity(MessageObject message, View v1) {
        if (getMediaDataController().saveToRingtones(message.getDocument())) {
            getUndoView().showWithAction(this.dialog_id, UndoView.ACTION_RINGTONE_ADDED, new Runnable() { // from class: org.telegram.ui.ChatActivity.105
                boolean clicked;

                @Override // java.lang.Runnable
                public void run() {
                    if (this.clicked) {
                        return;
                    }
                    this.clicked = true;
                    ChatActivity.this.presentFragment(new NotificationsSettingsActivity());
                }
            });
        }
        closeMenu(true);
    }

    /* renamed from: lambda$createMenu$163$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1772lambda$createMenu$163$orgtelegramuiChatActivity(View e) {
        closeMenu();
    }

    /* renamed from: lambda$createMenu$168$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1775lambda$createMenu$168$orgtelegramuiChatActivity(boolean[] loading, final boolean[] ratePositively, final ImageView rateUp, final ImageView rateDown) {
        if (!loading[0]) {
            loading[0] = true;
            final long[] progressShown = {-1};
            final Runnable showProgress = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda117
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.lambda$createMenu$165(progressShown, ratePositively, rateUp, rateDown);
                }
            };
            TLRPC.TL_messages_rateTranscribedAudio req = new TLRPC.TL_messages_rateTranscribedAudio();
            req.msg_id = this.selectedObject.getId();
            req.peer = getMessagesController().getInputPeer(this.selectedObject.messageOwner.peer_id);
            req.transcription_id = this.selectedObject.messageOwner.voiceTranscriptionId;
            req.good = ratePositively[0];
            getConnectionsManager().sendRequest(req, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda137
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    ChatActivity.this.m1774lambda$createMenu$167$orgtelegramuiChatActivity(showProgress, progressShown, tLObject, tL_error);
                }
            });
            AndroidUtilities.runOnUIThread(showProgress, 150L);
        }
    }

    public static /* synthetic */ void lambda$createMenu$165(long[] progressShown, boolean[] ratePositively, ImageView rateUp, ImageView rateDown) {
        progressShown[0] = SystemClock.elapsedRealtime();
        final CrossfadeDrawable ldrawable = (CrossfadeDrawable) (ratePositively[0] ? rateUp : rateDown).getDrawable();
        ValueAnimator lva = ValueAnimator.ofFloat(0.0f, 1.0f);
        lva.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda99
            @Override // android.animation.ValueAnimator.AnimatorUpdateListener
            public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                CrossfadeDrawable.this.setProgress(((Float) valueAnimator.getAnimatedValue()).floatValue());
            }
        });
        lva.setDuration(150L);
        lva.setInterpolator(CubicBezierInterpolator.DEFAULT);
        lva.start();
    }

    /* renamed from: lambda$createMenu$167$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1774lambda$createMenu$167$orgtelegramuiChatActivity(Runnable showProgress, long[] progressShown, TLObject res, TLRPC.TL_error err) {
        AndroidUtilities.cancelRunOnUIThread(showProgress);
        this.selectedObject.messageOwner.voiceTranscriptionRated = true;
        getMessagesStorage().updateMessageVoiceTranscriptionOpen(this.selectedObject.getDialogId(), this.selectedObject.getId(), this.selectedObject.messageOwner);
        Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda25
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1773lambda$createMenu$166$orgtelegramuiChatActivity();
            }
        };
        long j = 0;
        if (progressShown[0] > 0) {
            j = Math.max(0L, 300 - (SystemClock.elapsedRealtime() - progressShown[0]));
        }
        AndroidUtilities.runOnUIThread(runnable, j);
    }

    /* renamed from: lambda$createMenu$166$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1773lambda$createMenu$166$orgtelegramuiChatActivity() {
        closeMenu();
        BulletinFactory.of(this).createSimpleBulletin(R.raw.chats_infotip, LocaleController.getString("TranscriptionReportSent", R.string.TranscriptionReportSent)).show();
    }

    public static /* synthetic */ void lambda$createMenu$169(boolean[] ratePositively, Runnable rate, View e) {
        ratePositively[0] = true;
        rate.run();
    }

    public static /* synthetic */ void lambda$createMenu$170(boolean[] ratePositively, Runnable rate, View e) {
        ratePositively[0] = false;
        rate.run();
    }

    /* renamed from: lambda$createMenu$171$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1776lambda$createMenu$171$orgtelegramuiChatActivity(View v1) {
        if (this.contentView == null || getParentActivity() == null) {
            return;
        }
        BottomSheet.Builder builder = new BottomSheet.Builder(this.contentView.getContext());
        builder.setCustomView(new SponsoredMessageInfoView(getParentActivity(), this.themeDelegate));
        builder.show();
    }

    /* renamed from: lambda$createMenu$172$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1777lambda$createMenu$172$orgtelegramuiChatActivity(int i, ArrayList options, View v1) {
        if (this.selectedObject == null || i >= options.size()) {
            return;
        }
        processSelectedOption(((Integer) options.get(i)).intValue());
    }

    /* renamed from: lambda$createMenu$173$org-telegram-ui-ChatActivity */
    public /* synthetic */ boolean m1778lambda$createMenu$173$orgtelegramuiChatActivity(View v, URLSpan link) {
        didPressMessageUrl(link, false, this.selectedObject, v instanceof ChatMessageCell ? (ChatMessageCell) v : null);
        return true;
    }

    /* renamed from: lambda$createMenu$174$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1779lambda$createMenu$174$orgtelegramuiChatActivity(String[] fromLang, String toLang, boolean translateButtonEnabled, ActionBarMenuSubItem cell, AtomicBoolean waitForLangDetection, AtomicReference onLangDetectionDone, String lang) {
        TLRPC.Chat chat;
        fromLang[0] = lang;
        if (fromLang[0] != null && ((!fromLang[0].equals(toLang) || fromLang[0].equals("und")) && ((translateButtonEnabled && !RestrictedLanguagesSelectActivity.getRestrictedLanguages().contains(fromLang[0])) || ((chat = this.currentChat) != null && ((chat.has_link || this.currentChat.username != null) && ("uk".equals(fromLang[0]) || "ru".equals(fromLang[0]))))))) {
            cell.setVisibility(0);
        }
        waitForLangDetection.set(false);
        if (onLangDetectionDone.get() != null) {
            ((Runnable) onLangDetectionDone.get()).run();
            onLangDetectionDone.set(null);
        }
    }

    public static /* synthetic */ void lambda$createMenu$175(AtomicBoolean waitForLangDetection, AtomicReference onLangDetectionDone, Exception e) {
        FileLog.e("mlkit: failed to detect language in message");
        waitForLangDetection.set(false);
        if (onLangDetectionDone.get() != null) {
            ((Runnable) onLangDetectionDone.get()).run();
            onLangDetectionDone.set(null);
        }
    }

    /* renamed from: lambda$createMenu$177$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1781lambda$createMenu$177$orgtelegramuiChatActivity(int i, ArrayList options, TLRPC.InputPeer inputPeer, int messageId, String[] fromLang, String toLang, CharSequence finalMessageText, boolean noforwards, TranslateAlert.OnLinkPress onLinkPress, View e) {
        if (this.selectedObject != null && i < options.size() && getParentActivity() != null) {
            TranslateAlert alert = TranslateAlert.showAlert(getParentActivity(), this, this.currentAccount, inputPeer, messageId, fromLang[0], toLang, finalMessageText, noforwards, onLinkPress, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda26
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1780lambda$createMenu$176$orgtelegramuiChatActivity();
                }
            });
            alert.showDim(false);
            closeMenu(false);
        }
    }

    /* renamed from: lambda$createMenu$176$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1780lambda$createMenu$176$orgtelegramuiChatActivity() {
        dimBehindView(false);
    }

    public static /* synthetic */ void lambda$createMenu$178(AtomicReference onLangDetectionDone) {
        if (onLangDetectionDone.get() != null) {
            ((Runnable) onLangDetectionDone.getAndSet(null)).run();
        }
    }

    /* renamed from: lambda$createMenu$180$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1783lambda$createMenu$180$orgtelegramuiChatActivity(int i, ArrayList options, TLRPC.InputPeer inputPeer, int messageId, String toLang, CharSequence finalMessageText, boolean noforwards, TranslateAlert.OnLinkPress onLinkPress, View e) {
        if (this.selectedObject != null && i < options.size() && getParentActivity() != null) {
            TranslateAlert alert = TranslateAlert.showAlert(getParentActivity(), this, this.currentAccount, inputPeer, messageId, "und", toLang, finalMessageText, noforwards, onLinkPress, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda27
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1782lambda$createMenu$179$orgtelegramuiChatActivity();
                }
            });
            alert.showDim(false);
            closeMenu(false);
        }
    }

    /* renamed from: lambda$createMenu$179$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1782lambda$createMenu$179$orgtelegramuiChatActivity() {
        dimBehindView(false);
    }

    /* renamed from: lambda$createMenu$182$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1785lambda$createMenu$182$orgtelegramuiChatActivity(int finalPopupX, int finalPopupY, boolean isReactionsAvailable, ReactionsContainerLayout finalReactionsLayout) {
        if (this.scrimPopupWindow == null || this.fragmentView == null || this.scrimPopupWindow.isShowing()) {
            return;
        }
        this.scrimPopupWindow.showAtLocation(this.chatListView, 51, finalPopupX, finalPopupY);
        if (isReactionsAvailable && finalReactionsLayout != null) {
            finalReactionsLayout.startEnterAnimation();
        }
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda28
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1784lambda$createMenu$181$orgtelegramuiChatActivity();
            }
        }, 420L);
    }

    /* renamed from: lambda$createMenu$181$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1784lambda$createMenu$181$orgtelegramuiChatActivity() {
        ActionBarMenuSubItem[] actionBarMenuSubItemArr = this.scrimPopupWindowItems;
        if (actionBarMenuSubItemArr != null && actionBarMenuSubItemArr.length > 0 && actionBarMenuSubItemArr[0] != null) {
            actionBarMenuSubItemArr[0].requestFocus();
            this.scrimPopupWindowItems[0].performAccessibilityAction(64, null);
            this.scrimPopupWindowItems[0].sendAccessibilityEvent(8);
        }
    }

    public void closeMenu() {
        closeMenu(true);
    }

    private void closeMenu(boolean hideDim) {
        this.scrimPopupWindowHideDimOnDismiss = hideDim;
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            actionBarPopupWindow.dismiss();
        }
        if (!hideDim) {
            ValueAnimator valueAnimator = this.scrimViewAlphaAnimator;
            if (valueAnimator != null) {
                valueAnimator.removeAllListeners();
                this.scrimViewAlphaAnimator.cancel();
            }
            ValueAnimator ofFloat = ValueAnimator.ofFloat(1.0f, 0.0f);
            this.scrimViewAlphaAnimator = ofFloat;
            ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda111
                @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                    ChatActivity.this.m1764lambda$closeMenu$183$orgtelegramuiChatActivity(valueAnimator2);
                }
            });
            this.scrimViewAlphaAnimator.setDuration(150L);
            this.scrimViewAlphaAnimator.start();
        }
    }

    /* renamed from: lambda$closeMenu$183$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1764lambda$closeMenu$183$orgtelegramuiChatActivity(ValueAnimator a) {
        this.scrimViewAlpha = ((Float) a.getAnimatedValue()).floatValue();
        SizeNotifierFrameLayout sizeNotifierFrameLayout = this.contentView;
        if (sizeNotifierFrameLayout != null) {
            sizeNotifierFrameLayout.invalidate();
            this.chatListView.invalidate();
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:27:0x0081  */
    /* JADX WARN: Removed duplicated region for block: B:30:0x009a  */
    /* JADX WARN: Removed duplicated region for block: B:31:0x009d  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00cc  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void selectReaction(org.telegram.messenger.MessageObject r21, org.telegram.ui.Components.ReactionsContainerLayout r22, float r23, float r24, org.telegram.tgnet.TLRPC.TL_availableReaction r25, boolean r26, boolean r27) {
        /*
            Method dump skipped, instructions count: 220
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.selectReaction(org.telegram.messenger.MessageObject, org.telegram.ui.Components.ReactionsContainerLayout, float, float, org.telegram.tgnet.TLRPC$TL_availableReaction, boolean, boolean):void");
    }

    /* renamed from: org.telegram.ui.ChatActivity$111 */
    /* loaded from: classes4.dex */
    public class AnonymousClass111 implements Runnable {
        final /* synthetic */ boolean val$added;
        final /* synthetic */ int val$finalMessageIdForCell;
        final /* synthetic */ boolean val$fromDoubleTap;
        final /* synthetic */ MessageObject val$primaryMessage;
        final /* synthetic */ TLRPC.TL_availableReaction val$reaction;
        final /* synthetic */ ReactionsContainerLayout val$reactionsLayout;
        final /* synthetic */ float val$x;
        final /* synthetic */ float val$y;

        AnonymousClass111(boolean z, int i, boolean z2, ReactionsContainerLayout reactionsContainerLayout, float f, float f2, TLRPC.TL_availableReaction tL_availableReaction, MessageObject messageObject) {
            ChatActivity.this = this$0;
            this.val$fromDoubleTap = z;
            this.val$finalMessageIdForCell = i;
            this.val$added = z2;
            this.val$reactionsLayout = reactionsContainerLayout;
            this.val$x = f;
            this.val$y = f2;
            this.val$reaction = tL_availableReaction;
            this.val$primaryMessage = messageObject;
        }

        @Override // java.lang.Runnable
        public void run() {
            if (ChatActivity.this.updateReactionRunnable != null) {
                ChatActivity.this.updateReactionRunnable = null;
                if (!this.val$fromDoubleTap) {
                    ChatActivity.this.updateMessageAnimated(this.val$primaryMessage, true);
                    ReactionsEffectOverlay.startAnimation();
                } else {
                    ChatActivity chatActivity = ChatActivity.this;
                    final int i = this.val$finalMessageIdForCell;
                    final boolean z = this.val$added;
                    final ReactionsContainerLayout reactionsContainerLayout = this.val$reactionsLayout;
                    final float f = this.val$x;
                    final float f2 = this.val$y;
                    final TLRPC.TL_availableReaction tL_availableReaction = this.val$reaction;
                    chatActivity.m1899x4c8be4fe(new Runnable() { // from class: org.telegram.ui.ChatActivity$111$$ExternalSyntheticLambda1
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.AnonymousClass111.this.m1992lambda$run$1$orgtelegramuiChatActivity$111(i, z, reactionsContainerLayout, f, f2, tL_availableReaction);
                        }
                    });
                }
                ChatActivity.this.closeMenu();
            }
        }

        /* renamed from: lambda$run$1$org-telegram-ui-ChatActivity$111 */
        public /* synthetic */ void m1992lambda$run$1$orgtelegramuiChatActivity$111(final int finalMessageIdForCell, final boolean added, final ReactionsContainerLayout reactionsLayout, final float x, final float y, final TLRPC.TL_availableReaction reaction) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$111$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.AnonymousClass111.this.m1991lambda$run$0$orgtelegramuiChatActivity$111(finalMessageIdForCell, added, reactionsLayout, x, y, reaction);
                }
            }, 50L);
        }

        /* renamed from: lambda$run$0$org-telegram-ui-ChatActivity$111 */
        public /* synthetic */ void m1991lambda$run$0$orgtelegramuiChatActivity$111(int finalMessageIdForCell, boolean added, ReactionsContainerLayout reactionsLayout, float x, float y, TLRPC.TL_availableReaction reaction) {
            ChatMessageCell cell = ChatActivity.this.findMessageCell(finalMessageIdForCell, true);
            if (added) {
                ReactionsEffectOverlay.show(ChatActivity.this, reactionsLayout, cell, x, y, reaction.reaction, ChatActivity.this.currentAccount, 1);
                ReactionsEffectOverlay.startAnimation();
            }
        }
    }

    public void updateMessageAnimated(final MessageObject message, final boolean updateReactions) {
        if (this.chatAdapter == null) {
            return;
        }
        getNotificationCenter().doOnIdle(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda85
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1974lambda$updateMessageAnimated$184$orgtelegramuiChatActivity(message, updateReactions);
            }
        });
    }

    /* renamed from: lambda$updateMessageAnimated$184$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1974lambda$updateMessageAnimated$184$orgtelegramuiChatActivity(MessageObject message, boolean updateReactions) {
        if (this.fragmentView == null) {
            return;
        }
        MessageObject.GroupedMessages group = this.groupedMessagesMap.get(message.getGroupId());
        if (group != null) {
            ChatListItemAnimator chatListItemAnimator = this.chatListItemAnimator;
            if (chatListItemAnimator != null) {
                chatListItemAnimator.groupWillChanged(group);
            }
            for (int i = 0; i < group.messages.size(); i++) {
                group.messages.get(i).forceUpdate = true;
                if (updateReactions) {
                    group.messages.get(i).reactionsChanged = true;
                }
            }
            this.chatAdapter.notifyDataSetChanged(true);
            return;
        }
        int index = this.messages.indexOf(message);
        if (index >= 0) {
            ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
            chatActivityAdapter.notifyItemChanged(chatActivityAdapter.messagesStartRow + index);
        }
    }

    public ChatMessageCell findMessageCell(int id, boolean visibleForUser) {
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView == null) {
            return null;
        }
        int n = recyclerListView.getChildCount();
        for (int i = 0; i < n; i++) {
            View child = this.chatListView.getChildAt(i);
            if ((this.chatListView.getChildAt(i) instanceof ChatMessageCell) && ((ChatMessageCell) this.chatListView.getChildAt(i)).getMessageObject().getId() == id) {
                if (visibleForUser) {
                    float clipTop = (this.chatListViewPaddingTop - this.chatListViewPaddingVisibleOffset) - AndroidUtilities.dp(4.0f);
                    if (child.getY() + child.getMeasuredHeight() < clipTop || child.getY() > this.chatListView.getMeasuredHeight() - this.blurredViewBottomOffset) {
                        return null;
                    }
                }
                return (ChatMessageCell) this.chatListView.getChildAt(i);
            }
        }
        return null;
    }

    public void startEditingMessageObject(MessageObject messageObject) {
        if (messageObject == null || getParentActivity() == null) {
            return;
        }
        if (this.searchItem != null && this.actionBar.isSearchFieldVisible()) {
            this.actionBar.closeSearchField();
            this.chatActivityEnterView.setFieldFocused();
        }
        this.mentionContainer.getAdapter().setNeedBotContext(false);
        this.chatActivityEnterView.setVisibility(0);
        showFieldPanelForEdit(true, messageObject);
        updateBottomOverlay();
        checkEditTimer();
        this.chatActivityEnterView.setAllowStickersAndGifs(false, false, true);
        updatePinnedMessageView(true);
        updateVisibleRows();
        if (messageObject.scheduled) {
            this.chatActivityEnterView.showEditDoneProgress(false, true);
            return;
        }
        TLRPC.TL_messages_getMessageEditData req = new TLRPC.TL_messages_getMessageEditData();
        req.peer = getMessagesController().getInputPeer(this.dialog_id);
        req.id = messageObject.getId();
        this.editingMessageObjectReqId = getConnectionsManager().sendRequest(req, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda134
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                ChatActivity.this.m1964xbb979f03(tLObject, tL_error);
            }
        });
    }

    /* renamed from: lambda$startEditingMessageObject$186$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1964xbb979f03(final TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda95
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1963xbaeaf364(response);
            }
        });
    }

    /* renamed from: lambda$startEditingMessageObject$185$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1963xbaeaf364(TLObject response) {
        this.editingMessageObjectReqId = 0;
        if (response != null || getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
        builder.setMessage(LocaleController.getString("EditMessageError", R.string.EditMessageError));
        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
        showDialog(builder.create());
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setEditingMessageObject(null, false);
            hideFieldPanel(true);
        }
    }

    public void restartSticker(ChatMessageCell cell) {
        MessagesController.EmojiSound sound;
        MessageObject message = cell.getMessageObject();
        TLRPC.Document document = message.getDocument();
        boolean isEmoji = message.isAnimatedEmoji();
        boolean z = true;
        if (!isEmoji) {
            if (this.currentEncryptedChat != null && !message.isOut()) {
                z = false;
            }
            if (!MessageObject.isAnimatedStickerDocument(document, z) || SharedConfig.loopStickers) {
                return;
            }
        }
        ImageReceiver imageReceiver = cell.getPhotoImage();
        RLottieDrawable drawable = imageReceiver.getLottieAnimation();
        if (drawable != null) {
            if (isEmoji) {
                String emoji = message.getStickerEmoji();
                if (EmojiData.isHeartEmoji(emoji)) {
                    HashMap<Integer, Integer> pattern = new HashMap<>();
                    pattern.put(1, 1);
                    pattern.put(13, 0);
                    pattern.put(59, 1);
                    pattern.put(71, 0);
                    pattern.put(128, 1);
                    pattern.put(140, 0);
                    drawable.setVibrationPattern(pattern);
                } else if (EmojiData.isPeachEmoji(emoji)) {
                    HashMap<Integer, Integer> pattern2 = new HashMap<>();
                    pattern2.put(34, 1);
                    drawable.setVibrationPattern(pattern2);
                } else if (EmojiData.isCofinEmoji(emoji)) {
                    HashMap<Integer, Integer> pattern3 = new HashMap<>();
                    pattern3.put(24, 0);
                    pattern3.put(36, 0);
                    drawable.setVibrationPattern(pattern3);
                }
                if (!drawable.isRunning() && emoji != null && (sound = getMessagesController().emojiSounds.get(emoji.replace("️", ""))) != null) {
                    getMediaController().playEmojiSound(getAccountInstance(), emoji, sound, false);
                }
            }
            drawable.restart();
        }
    }

    public String getMessageContent(MessageObject messageObject, long previousUid, boolean name) {
        TLRPC.Chat chat;
        String str = "";
        if (name) {
            long fromId = messageObject.getFromChatId();
            if (previousUid != fromId) {
                if (fromId > 0) {
                    TLRPC.User user = getMessagesController().getUser(Long.valueOf(fromId));
                    if (user != null) {
                        str = ContactsController.formatName(user.first_name, user.last_name) + ":\n";
                    }
                } else if (fromId < 0 && (chat = getMessagesController().getChat(Long.valueOf(-fromId))) != null) {
                    str = chat.title + ":\n";
                }
            }
        }
        String restrictionReason = MessagesController.getRestrictionReason(messageObject.messageOwner.restriction_reason);
        if (!TextUtils.isEmpty(restrictionReason)) {
            return str + restrictionReason;
        } else if ((messageObject.type == 0 || messageObject.isAnimatedEmoji()) && messageObject.messageOwner.message != null) {
            return str + messageObject.messageOwner.message;
        } else if (messageObject.messageOwner.media != null && messageObject.messageOwner.message != null) {
            return str + messageObject.messageOwner.message;
        } else {
            return str + ((Object) messageObject.messageText);
        }
    }

    public void unpinMessage(final MessageObject messageObject) {
        if (messageObject == null) {
            return;
        }
        Bulletin bulletin = this.pinBulletin;
        if (bulletin != null) {
            bulletin.hide(false, 0L);
        }
        final ArrayList<MessageObject> objects = new ArrayList<>();
        objects.add(this.selectedObject);
        final ArrayList<Integer> ids = new ArrayList<>();
        ids.add(Integer.valueOf(messageObject.getId()));
        final int oldTotalPinnedCount = this.totalPinnedMessagesCount;
        getNotificationCenter().postNotificationName(NotificationCenter.didLoadPinnedMessages, Long.valueOf(this.dialog_id), ids, false, 0, 0, 0, Integer.valueOf(this.totalPinnedMessagesCount - 1), Boolean.valueOf(this.pinnedEndReached));
        this.pinBulletin = BulletinFactory.createUnpinMessageBulletin(this, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda80
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1966lambda$unpinMessage$187$orgtelegramuiChatActivity(ids, objects, oldTotalPinnedCount);
            }
        }, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda82
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1967lambda$unpinMessage$188$orgtelegramuiChatActivity(messageObject);
            }
        }, this.themeDelegate).show();
    }

    /* renamed from: lambda$unpinMessage$187$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1966lambda$unpinMessage$187$orgtelegramuiChatActivity(ArrayList ids, ArrayList objects, int oldTotalPinnedCount) {
        getNotificationCenter().postNotificationName(NotificationCenter.didLoadPinnedMessages, Long.valueOf(this.dialog_id), ids, true, objects, 0, 0, Integer.valueOf(oldTotalPinnedCount), Boolean.valueOf(this.pinnedEndReached));
        this.pinBulletin = null;
    }

    /* renamed from: lambda$unpinMessage$188$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1967lambda$unpinMessage$188$orgtelegramuiChatActivity(MessageObject messageObject) {
        getMessagesController().pinMessage(this.currentChat, this.currentUser, messageObject.getId(), true, false, false);
        this.pinBulletin = null;
    }

    public void openReportChat(int type) {
        Bundle args = new Bundle();
        if (DialogObject.isUserDialog(this.dialog_id)) {
            args.putLong("user_id", this.dialog_id);
        } else {
            args.putLong(ChatReactionsEditActivity.KEY_CHAT_ID, -this.dialog_id);
        }
        args.putInt("report", type);
        ChatActivity fragment = new ChatActivity(args);
        presentFragment(fragment);
        fragment.chatActivityDelegate = new ChatActivityDelegate() { // from class: org.telegram.ui.ChatActivity.112
            @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void onUnpin(boolean z, boolean z2) {
                ChatActivityDelegate.CC.$default$onUnpin(this, z, z2);
            }

            @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void openReplyMessage(int i) {
                ChatActivityDelegate.CC.$default$openReplyMessage(this, i);
            }

            @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
            public /* synthetic */ void openSearch(String str) {
                ChatActivityDelegate.CC.$default$openSearch(this, str);
            }

            @Override // org.telegram.ui.ChatActivity.ChatActivityDelegate
            public void onReport() {
                ChatActivity.this.undoView.showWithAction(0L, 74, (Runnable) null);
            }
        };
    }

    private void saveMessageToGallery(MessageObject messageObject) {
        String path = messageObject.messageOwner.attachPath;
        if (!TextUtils.isEmpty(path)) {
            File temp = new File(path);
            if (!temp.exists()) {
                path = null;
            }
        }
        if (TextUtils.isEmpty(path)) {
            path = FileLoader.getInstance(this.currentAccount).getPathToMessage(messageObject.messageOwner).toString();
        }
        MediaController.saveFile(path, getParentActivity(), messageObject.isVideo() ? 1 : 0, null, null);
    }

    private void processSelectedOption(int option) {
        BulletinFactory.FileType fileType;
        TLRPC.Chat chat;
        ArrayList<MessageObject> messageObjects;
        final int mid;
        final boolean[] checks;
        TLRPC.Chat chat2;
        MessageObject messageObject;
        if (this.selectedObject == null || getParentActivity() == null) {
            return;
        }
        boolean preserveDim = false;
        String str = "";
        int i = 2;
        switch (option) {
            case 0:
                if (this.selectedObjectGroup == null) {
                    if (getSendMessagesHelper().retrySendMessage(this.selectedObject, false)) {
                        updateVisibleRows();
                        if (this.chatMode == 0) {
                            moveScrollToLastMessage(false);
                            break;
                        }
                    }
                } else {
                    boolean success = true;
                    for (int a = 0; a < this.selectedObjectGroup.messages.size(); a++) {
                        if (!getSendMessagesHelper().retrySendMessage(this.selectedObjectGroup.messages.get(a), false)) {
                            success = false;
                        }
                    }
                    if (success && this.chatMode == 0) {
                        moveScrollToLastMessage(false);
                        break;
                    }
                }
                break;
            case 1:
                if (getParentActivity() == null) {
                    this.selectedObject = null;
                    this.selectedObjectToEditCaption = null;
                    this.selectedObjectGroup = null;
                    return;
                }
                preserveDim = true;
                createDeleteMessagesAlert(this.selectedObject, this.selectedObjectGroup, 1, true);
                break;
            case 2:
                this.forwardingMessage = this.selectedObject;
                this.forwardingMessageGroup = this.selectedObjectGroup;
                Bundle args = new Bundle();
                args.putBoolean("onlySelect", true);
                args.putInt("dialogsType", 3);
                MessageObject.GroupedMessages groupedMessages = this.forwardingMessageGroup;
                args.putInt("messagesCount", groupedMessages == null ? 1 : groupedMessages.messages.size());
                if (!this.forwardingMessage.isPoll()) {
                    i = 0;
                } else if (!this.forwardingMessage.isPublicPoll()) {
                    i = 1;
                }
                args.putInt("hasPoll", i);
                args.putBoolean("hasInvoice", this.forwardingMessage.isInvoice());
                DialogsActivity fragment = new DialogsActivity(args);
                fragment.setDelegate(this);
                presentFragment(fragment);
                break;
            case 3:
                if (!this.selectedObject.isDice()) {
                    CharSequence caption = getMessageCaption(this.selectedObject, this.selectedObjectGroup);
                    if (caption == null) {
                        AndroidUtilities.addToClipboard(getMessageContent(this.selectedObject, 0L, false));
                    } else {
                        AndroidUtilities.addToClipboard(caption);
                    }
                } else {
                    AndroidUtilities.addToClipboard(this.selectedObject.getDiceEmoji());
                }
                this.undoView.showWithAction(0L, 52, (Runnable) null);
                break;
            case 4:
                if (Build.VERSION.SDK_INT >= 23 && ((Build.VERSION.SDK_INT <= 28 || BuildVars.NO_SCOPED_STORAGE) && getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") != 0)) {
                    getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                    this.selectedObject = null;
                    this.selectedObjectGroup = null;
                    this.selectedObjectToEditCaption = null;
                    return;
                }
                MessageObject.GroupedMessages groupedMessages2 = this.selectedObjectGroup;
                if (groupedMessages2 == null) {
                    saveMessageToGallery(this.selectedObject);
                    if (getParentActivity() != null) {
                        BulletinFactory.createSaveToGalleryBulletin(this, this.selectedObject.isVideo(), this.themeDelegate).show();
                        break;
                    }
                } else {
                    int filesAmount = groupedMessages2.messages.size();
                    boolean allPhotos = true;
                    boolean allVideos = true;
                    for (int a2 = 0; a2 < filesAmount; a2++) {
                        MessageObject messageObject2 = this.selectedObjectGroup.messages.get(a2);
                        saveMessageToGallery(messageObject2);
                        allPhotos &= messageObject2.isPhoto();
                        allVideos &= messageObject2.isVideo();
                    }
                    if (allPhotos) {
                        fileType = BulletinFactory.FileType.PHOTOS;
                    } else if (allVideos) {
                        fileType = BulletinFactory.FileType.VIDEOS;
                    } else {
                        fileType = BulletinFactory.FileType.MEDIA;
                    }
                    BulletinFactory.of(this).createDownloadBulletin(fileType, filesAmount, this.themeDelegate).show();
                    break;
                }
                break;
            case 5:
                File locFile = null;
                if (!TextUtils.isEmpty(this.selectedObject.messageOwner.attachPath)) {
                    File f = new File(this.selectedObject.messageOwner.attachPath);
                    if (f.exists()) {
                        locFile = f;
                    }
                }
                if (locFile == null) {
                    File f2 = getFileLoader().getPathToMessage(this.selectedObject.messageOwner);
                    if (f2.exists()) {
                        locFile = f2;
                    }
                }
                if (locFile != null) {
                    if (!locFile.getName().toLowerCase().endsWith("attheme")) {
                        if (LocaleController.getInstance().applyLanguageFile(locFile, this.currentAccount)) {
                            presentFragment(new LanguageSelectActivity());
                            break;
                        } else if (getParentActivity() == null) {
                            this.selectedObject = null;
                            this.selectedObjectGroup = null;
                            this.selectedObjectToEditCaption = null;
                            return;
                        } else {
                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                            builder.setMessage(LocaleController.getString("IncorrectLocalization", R.string.IncorrectLocalization));
                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                            preserveDim = true;
                            builder.setDimEnabled(false);
                            builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda203
                                @Override // android.content.DialogInterface.OnDismissListener
                                public final void onDismiss(DialogInterface dialogInterface) {
                                    ChatActivity.this.m1909lambda$processSelectedOption$190$orgtelegramuiChatActivity(dialogInterface);
                                }
                            });
                            showDialog(builder.create());
                            break;
                        }
                    } else {
                        Theme.ThemeInfo themeInfo = Theme.applyThemeFile(locFile, this.selectedObject.getDocumentName(), null, true);
                        if (themeInfo != null) {
                            presentFragment(new ThemePreviewActivity(themeInfo));
                            break;
                        } else {
                            this.scrollToPositionOnRecreate = -1;
                            if (getParentActivity() == null) {
                                this.selectedObject = null;
                                this.selectedObjectGroup = null;
                                this.selectedObjectToEditCaption = null;
                                return;
                            }
                            AlertDialog.Builder builder2 = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                            builder2.setTitle(LocaleController.getString("AppName", R.string.AppName));
                            builder2.setMessage(LocaleController.getString("IncorrectTheme", R.string.IncorrectTheme));
                            builder2.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                            preserveDim = true;
                            builder2.setDimEnabled(false);
                            builder2.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda201
                                @Override // android.content.DialogInterface.OnDismissListener
                                public final void onDismiss(DialogInterface dialogInterface) {
                                    ChatActivity.this.m1908lambda$processSelectedOption$189$orgtelegramuiChatActivity(dialogInterface);
                                }
                            });
                            showDialog(builder2.create());
                            break;
                        }
                    }
                }
                break;
            case 6:
                String path = this.selectedObject.messageOwner.attachPath;
                if (path != null && path.length() > 0) {
                    File temp = new File(path);
                    if (!temp.exists()) {
                        path = null;
                    }
                }
                String path2 = (path == null || path.length() == 0) ? getFileLoader().getPathToMessage(this.selectedObject.messageOwner).toString() : path;
                Intent intent = new Intent("android.intent.action.SEND");
                intent.setType(this.selectedObject.getDocument().mime_type);
                File f3 = new File(path2);
                if (Build.VERSION.SDK_INT >= 24) {
                    try {
                        intent.putExtra("android.intent.extra.STREAM", FileProvider.getUriForFile(getParentActivity(), "org.telegram.messenger.beta.provider", f3));
                        intent.setFlags(1);
                    } catch (Exception e) {
                        intent.putExtra("android.intent.extra.STREAM", Uri.fromFile(f3));
                    }
                } else {
                    intent.putExtra("android.intent.extra.STREAM", Uri.fromFile(f3));
                }
                try {
                    getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString("ShareFile", R.string.ShareFile)), 500);
                    break;
                } catch (Throwable th) {
                    break;
                }
            case 7:
                String path3 = this.selectedObject.messageOwner.attachPath;
                if (path3 != null && path3.length() > 0) {
                    File temp2 = new File(path3);
                    if (!temp2.exists()) {
                        path3 = null;
                    }
                }
                if (path3 == null || path3.length() == 0) {
                    path3 = getFileLoader().getPathToMessage(this.selectedObject.messageOwner).toString();
                }
                if (Build.VERSION.SDK_INT >= 23 && ((Build.VERSION.SDK_INT <= 28 || BuildVars.NO_SCOPED_STORAGE) && getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") != 0)) {
                    getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                    this.selectedObject = null;
                    this.selectedObjectGroup = null;
                    this.selectedObjectToEditCaption = null;
                    return;
                }
                MediaController.saveFile(path3, getParentActivity(), 0, null, null);
                BulletinFactory.createSaveToGalleryBulletin(this, this.selectedObject.isVideo(), this.themeDelegate).show();
                break;
                break;
            case 8:
                showFieldPanelForReply(this.selectedObject);
                break;
            case 9:
                StickersAlert alert = new StickersAlert(getParentActivity(), this, this.selectedObject.getInputStickerSet(), null, (this.bottomOverlayChat.getVisibility() == 0 || ((chat = this.currentChat) != null && !ChatObject.canSendStickers(chat))) ? null : this.chatActivityEnterView, this.themeDelegate);
                alert.setCalcMandatoryInsets(isKeyboardVisible());
                preserveDim = true;
                alert.setDimBehind(false);
                alert.setOnDismissListener(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda47
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.m1910lambda$processSelectedOption$191$orgtelegramuiChatActivity();
                    }
                });
                showDialog(alert);
                break;
            case 10:
                if (Build.VERSION.SDK_INT >= 23 && ((Build.VERSION.SDK_INT <= 28 || BuildVars.NO_SCOPED_STORAGE) && getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") != 0)) {
                    getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                    this.selectedObject = null;
                    this.selectedObjectGroup = null;
                    this.selectedObjectToEditCaption = null;
                    return;
                }
                final boolean isMusic = this.selectedObject.isMusic();
                boolean isDocument = this.selectedObject.isDocument();
                if (isMusic || isDocument) {
                    if (this.selectedObjectGroup != null) {
                        messageObjects = new ArrayList<>(this.selectedObjectGroup.messages);
                    } else {
                        messageObjects = new ArrayList<>();
                        messageObjects.add(this.selectedObject);
                    }
                    MediaController.saveFilesFromMessages(getParentActivity(), getAccountInstance(), messageObjects, new MessagesStorage.IntCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda127
                        @Override // org.telegram.messenger.MessagesStorage.IntCallback
                        public final void run(int i2) {
                            ChatActivity.this.m1911lambda$processSelectedOption$192$orgtelegramuiChatActivity(isMusic, i2);
                        }
                    });
                    break;
                } else {
                    final boolean video = this.selectedObject.isVideo();
                    final boolean photo = this.selectedObject.isPhoto();
                    final boolean gif = this.selectedObject.isGif();
                    String fileName = FileLoader.getDocumentFileName(this.selectedObject.getDocument());
                    if (TextUtils.isEmpty(fileName)) {
                        fileName = this.selectedObject.getFileName();
                    }
                    String path4 = this.selectedObject.messageOwner.attachPath;
                    if (path4 != null && path4.length() > 0) {
                        File temp3 = new File(path4);
                        if (!temp3.exists()) {
                            path4 = null;
                        }
                    }
                    if (path4 == null || path4.length() == 0) {
                        path4 = getFileLoader().getPathToMessage(this.selectedObject.messageOwner).toString();
                    }
                    Activity parentActivity = getParentActivity();
                    if (this.selectedObject.getDocument() != null) {
                        str = this.selectedObject.getDocument().mime_type;
                    }
                    MediaController.saveFile(path4, parentActivity, 2, fileName, str, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda107
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.this.m1912lambda$processSelectedOption$193$orgtelegramuiChatActivity(photo, video, gif);
                        }
                    });
                    break;
                }
                break;
            case 11:
                TLRPC.Document document = this.selectedObject.getDocument();
                getMessagesController().saveGif(this.selectedObject, document);
                if (!showGifHint() && getParentActivity() != null) {
                    BulletinFactory.of(this).createDownloadBulletin(BulletinFactory.FileType.GIF, this.themeDelegate).show();
                }
                this.chatActivityEnterView.addRecentGif(document);
                break;
            case 12:
                MessageObject messageObject3 = this.selectedObjectToEditCaption;
                if (messageObject3 == null) {
                    startEditingMessageObject(this.selectedObject);
                } else {
                    startEditingMessageObject(messageObject3);
                }
                this.selectedObject = null;
                this.selectedObjectGroup = null;
                this.selectedObjectToEditCaption = null;
                break;
            case 13:
                MessageObject.GroupedMessages groupedMessages3 = this.selectedObjectGroup;
                if (groupedMessages3 != null && !groupedMessages3.messages.isEmpty()) {
                    mid = this.selectedObjectGroup.messages.get(0).getId();
                } else {
                    mid = this.selectedObject.getId();
                }
                AlertDialog.Builder builder3 = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                builder3.setTitle(LocaleController.getString("PinMessageAlertTitle", R.string.PinMessageAlertTitle));
                preserveDim = true;
                builder3.setDimAlpha(0.5f);
                builder3.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda204
                    @Override // android.content.DialogInterface.OnDismissListener
                    public final void onDismiss(DialogInterface dialogInterface) {
                        ChatActivity.this.m1913lambda$processSelectedOption$194$orgtelegramuiChatActivity(dialogInterface);
                    }
                });
                if (this.currentUser != null) {
                    int i2 = this.currentPinnedMessageId;
                    if (i2 != 0 && mid < i2) {
                        builder3.setMessage(LocaleController.getString("PinOldMessageAlert", R.string.PinOldMessageAlert));
                    } else {
                        builder3.setMessage(LocaleController.getString("PinMessageAlertChat", R.string.PinMessageAlertChat));
                    }
                    checks = new boolean[]{false, false};
                    if (!UserObject.isUserSelf(this.currentUser)) {
                        FrameLayout frameLayout = new FrameLayout(getParentActivity());
                        CheckBoxCell cell = new CheckBoxCell(getParentActivity(), 1, this.themeDelegate);
                        cell.setBackgroundDrawable(Theme.getSelectorDrawable(false));
                        cell.setText(LocaleController.formatString("PinAlsoFor", R.string.PinAlsoFor, UserObject.getFirstName(this.currentUser)), str, false, false);
                        cell.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(8.0f) : 0, 0, LocaleController.isRTL ? 0 : AndroidUtilities.dp(8.0f), 0);
                        frameLayout.addView(cell, LayoutHelper.createFrame(-1, 48.0f, 51, 8.0f, 0.0f, 8.0f, 0.0f));
                        cell.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda250
                            @Override // android.view.View.OnClickListener
                            public final void onClick(View view) {
                                ChatActivity.lambda$processSelectedOption$195(checks, view);
                            }
                        });
                        builder3.setView(frameLayout);
                    }
                } else if ((ChatObject.isChannel(this.currentChat) && this.currentChat.megagroup) || ((chat2 = this.currentChat) != null && !ChatObject.isChannel(chat2))) {
                    if (!this.pinnedMessageIds.isEmpty() && mid < this.pinnedMessageIds.get(0).intValue()) {
                        builder3.setMessage(LocaleController.getString("PinOldMessageAlert", R.string.PinOldMessageAlert));
                        checks = new boolean[]{false, true};
                    } else {
                        builder3.setMessage(LocaleController.getString("PinMessageAlert", R.string.PinMessageAlert));
                        checks = new boolean[]{true, true};
                        FrameLayout frameLayout2 = new FrameLayout(getParentActivity());
                        CheckBoxCell cell2 = new CheckBoxCell(getParentActivity(), 1, this.themeDelegate);
                        cell2.setBackgroundDrawable(Theme.getSelectorDrawable(false));
                        cell2.setText(LocaleController.getString("PinNotify", R.string.PinNotify), str, true, false);
                        cell2.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(8.0f) : 0, 0, LocaleController.isRTL ? 0 : AndroidUtilities.dp(8.0f), 0);
                        frameLayout2.addView(cell2, LayoutHelper.createFrame(-1, 48.0f, 51, 8.0f, 0.0f, 8.0f, 0.0f));
                        cell2.setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda251
                            @Override // android.view.View.OnClickListener
                            public final void onClick(View view) {
                                ChatActivity.lambda$processSelectedOption$196(checks, view);
                            }
                        });
                        builder3.setView(frameLayout2);
                    }
                } else {
                    int i3 = this.currentPinnedMessageId;
                    if (i3 != 0 && mid < i3) {
                        builder3.setMessage(LocaleController.getString("PinOldMessageAlert", R.string.PinOldMessageAlert));
                    } else {
                        builder3.setMessage(LocaleController.getString("PinMessageAlertChannel", R.string.PinMessageAlertChannel));
                    }
                    checks = new boolean[]{false, true};
                }
                builder3.setPositiveButton(LocaleController.getString("PinMessage", R.string.PinMessage), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda186
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i4) {
                        ChatActivity.this.m1914lambda$processSelectedOption$198$orgtelegramuiChatActivity(mid, checks, dialogInterface, i4);
                    }
                });
                builder3.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                showDialog(builder3.create());
                break;
            case 14:
                if (this.pinnedMessageObjects.containsKey(Integer.valueOf(this.selectedObject.getId()))) {
                    messageObject = this.selectedObject;
                } else {
                    MessageObject.GroupedMessages groupedMessages4 = this.selectedObjectGroup;
                    if (groupedMessages4 != null && !groupedMessages4.messages.isEmpty()) {
                        messageObject = this.selectedObjectGroup.messages.get(0);
                    } else {
                        messageObject = this.selectedObject;
                    }
                }
                if (this.chatMode == 2 && this.messages.size() == 2) {
                    finishFragment();
                    this.chatActivityDelegate.onUnpin(false, false);
                    break;
                } else {
                    unpinMessage(messageObject);
                    break;
                }
                break;
            case 15:
                Bundle args2 = new Bundle();
                args2.putLong("user_id", this.selectedObject.messageOwner.media.user_id);
                args2.putString("phone", this.selectedObject.messageOwner.media.phone_number);
                args2.putBoolean("addContact", true);
                presentFragment(new ContactAddActivity(args2));
                break;
            case 16:
                AndroidUtilities.addToClipboard(this.selectedObject.messageOwner.media.phone_number);
                break;
            case 17:
                try {
                    Intent intent2 = new Intent("android.intent.action.DIAL", Uri.parse("tel:" + this.selectedObject.messageOwner.media.phone_number));
                    intent2.addFlags(268435456);
                    getParentActivity().startActivityForResult(intent2, 500);
                    break;
                } catch (Exception e2) {
                    FileLog.e(e2);
                    break;
                }
            case 18:
                TLRPC.User user = this.currentUser;
                if (user != null) {
                    boolean isVideoCall = this.selectedObject.isVideoCall();
                    TLRPC.UserFull userFull = this.userInfo;
                    VoIPHelper.startCall(user, isVideoCall, userFull != null && userFull.video_calls_available, getParentActivity(), getMessagesController().getUserFull(this.currentUser.id), getAccountInstance());
                    break;
                }
                break;
            case 19:
                VoIPHelper.showRateAlert(getParentActivity(), (TLRPC.TL_messageActionPhoneCall) this.selectedObject.messageOwner.action);
                break;
            case 20:
                MediaDataController mediaDataController = getMediaDataController();
                MessageObject messageObject4 = this.selectedObject;
                mediaDataController.addRecentSticker(2, messageObject4, messageObject4.getDocument(), (int) (System.currentTimeMillis() / 1000), false);
                break;
            case 21:
                MediaDataController mediaDataController2 = getMediaDataController();
                MessageObject messageObject5 = this.selectedObject;
                mediaDataController2.addRecentSticker(2, messageObject5, messageObject5.getDocument(), (int) (System.currentTimeMillis() / 1000), true);
                break;
            case 22:
                TLRPC.TL_channels_exportMessageLink req = new TLRPC.TL_channels_exportMessageLink();
                MessageObject messageObject6 = this.selectedObject;
                if (messageObject6 == this.replyingMessageObject && this.isComments) {
                    req.id = this.replyOriginalMessageId;
                    req.channel = MessagesController.getInputChannel(this.replyOriginalChat);
                } else {
                    req.id = messageObject6.getId();
                    req.channel = MessagesController.getInputChannel(this.currentChat);
                    req.thread = isReplyChatComment();
                }
                getConnectionsManager().sendRequest(req, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda131
                    @Override // org.telegram.tgnet.RequestDelegate
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        ChatActivity.this.m1916lambda$processSelectedOption$200$orgtelegramuiChatActivity(tLObject, tL_error);
                    }
                });
                break;
            case 23:
                if (UserObject.isReplyUser(this.currentUser)) {
                    if (this.selectedObject.messageOwner.fwd_from != null) {
                        preserveDim = true;
                        MessageObject messageObject7 = this.selectedObject;
                        AlertsCreator.showBlockReportSpamReplyAlert(this, messageObject7, MessageObject.getPeerId(messageObject7.messageOwner.fwd_from.from_id), this.themeDelegate, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda48
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatActivity.this.m1917lambda$processSelectedOption$201$orgtelegramuiChatActivity();
                            }
                        });
                        break;
                    }
                } else {
                    preserveDim = true;
                    AlertsCreator.createReportAlert(getParentActivity(), this.dialog_id, this.selectedObject.getId(), this, this.themeDelegate, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda49
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.this.m1918lambda$processSelectedOption$202$orgtelegramuiChatActivity();
                        }
                    });
                    break;
                }
                break;
            case 24:
                if (this.selectedObject.isEditing() || (this.selectedObject.isSending() && this.selectedObjectGroup == null)) {
                    getSendMessagesHelper().cancelSendingMessage(this.selectedObject);
                    break;
                } else if (this.selectedObject.isSending() && this.selectedObjectGroup != null) {
                    for (int a3 = 0; a3 < this.selectedObjectGroup.messages.size(); a3++) {
                        getSendMessagesHelper().cancelSendingMessage(new ArrayList<>(this.selectedObjectGroup.messages));
                    }
                    break;
                }
                break;
            case 25:
                final AlertDialog[] progressDialog = {new AlertDialog(getParentActivity(), 3, this.themeDelegate)};
                final int requestId = getSendMessagesHelper().sendVote(this.selectedObject, null, new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda118
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.lambda$processSelectedOption$203(progressDialog);
                    }
                });
                if (requestId != 0) {
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda108
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.this.m1920lambda$processSelectedOption$205$orgtelegramuiChatActivity(progressDialog, requestId);
                        }
                    }, 500L);
                    break;
                }
                break;
            case 26:
                final MessageObject object = this.selectedObject;
                AlertDialog.Builder builder4 = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                preserveDim = true;
                builder4.setDimEnabled(false);
                builder4.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda205
                    @Override // android.content.DialogInterface.OnDismissListener
                    public final void onDismiss(DialogInterface dialogInterface) {
                        ChatActivity.this.m1921lambda$processSelectedOption$206$orgtelegramuiChatActivity(dialogInterface);
                    }
                });
                if (object.isQuiz()) {
                    builder4.setTitle(LocaleController.getString("StopQuizAlertTitle", R.string.StopQuizAlertTitle));
                    builder4.setMessage(LocaleController.getString("StopQuizAlertText", R.string.StopQuizAlertText));
                } else {
                    builder4.setTitle(LocaleController.getString("StopPollAlertTitle", R.string.StopPollAlertTitle));
                    builder4.setMessage(LocaleController.getString("StopPollAlertText", R.string.StopPollAlertText));
                }
                builder4.setPositiveButton(LocaleController.getString("Stop", R.string.Stop), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda189
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i4) {
                        ChatActivity.this.m1926lambda$processSelectedOption$212$orgtelegramuiChatActivity(object, dialogInterface, i4);
                    }
                });
                builder4.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                showDialog(builder4.create());
                break;
            case 27:
                openDiscussionMessageChat(this.currentChat.id, null, this.selectedObject.getId(), 0L, -1, 0, null);
                break;
            case 28:
                presentFragment(new MessageStatisticActivity(this.selectedObject));
                break;
            case 31:
                MessageObject message = this.selectedObject;
                showDialog(new PremiumFeatureBottomSheet(this, 3, true));
                break;
            case 100:
                if (!checkSlowMode(this.chatActivityEnterView.getSendButton())) {
                    if (getMediaController().isPlayingMessage(this.selectedObject)) {
                        getMediaController().cleanupPlayer(true, true);
                    }
                    final TLRPC.TL_messages_sendScheduledMessages req2 = new TLRPC.TL_messages_sendScheduledMessages();
                    req2.peer = getMessagesController().getInputPeer(this.dialog_id);
                    if (this.selectedObjectGroup == null) {
                        req2.id.add(Integer.valueOf(this.selectedObject.getId()));
                    } else {
                        for (int a4 = 0; a4 < this.selectedObjectGroup.messages.size(); a4++) {
                            req2.id.add(Integer.valueOf(this.selectedObjectGroup.messages.get(a4).getId()));
                        }
                    }
                    ConnectionsManager.getInstance(this.currentAccount).sendRequest(req2, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda141
                        @Override // org.telegram.tgnet.RequestDelegate
                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            ChatActivity.this.m1929lambda$processSelectedOption$215$orgtelegramuiChatActivity(req2, tLObject, tL_error);
                        }
                    });
                    break;
                }
            case 102:
                final MessageObject message2 = this.selectedObject;
                final MessageObject.GroupedMessages group = this.selectedObjectGroup;
                AlertsCreator.createScheduleDatePickerDialog(getParentActivity(), this.dialog_id, message2.messageOwner.date, new AlertsCreator.ScheduleDatePickerDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda153
                    @Override // org.telegram.ui.Components.AlertsCreator.ScheduleDatePickerDelegate
                    public final void didSelectDate(boolean z, int i4) {
                        ChatActivity.this.m1930lambda$processSelectedOption$216$orgtelegramuiChatActivity(group, message2, z, i4);
                    }
                }, null, this.themeDelegate).setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda206
                    @Override // android.content.DialogInterface.OnDismissListener
                    public final void onDismiss(DialogInterface dialogInterface) {
                        ChatActivity.this.m1931lambda$processSelectedOption$217$orgtelegramuiChatActivity(dialogInterface);
                    }
                }).setDimBehind(false);
                preserveDim = true;
                break;
        }
        this.selectedObject = null;
        this.selectedObjectGroup = null;
        this.selectedObjectToEditCaption = null;
        closeMenu(!preserveDim);
    }

    /* renamed from: lambda$processSelectedOption$189$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1908lambda$processSelectedOption$189$orgtelegramuiChatActivity(DialogInterface di) {
        dimBehindView(false);
    }

    /* renamed from: lambda$processSelectedOption$190$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1909lambda$processSelectedOption$190$orgtelegramuiChatActivity(DialogInterface di) {
        dimBehindView(false);
    }

    /* renamed from: lambda$processSelectedOption$191$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1910lambda$processSelectedOption$191$orgtelegramuiChatActivity() {
        dimBehindView(false);
    }

    /* renamed from: lambda$processSelectedOption$192$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1911lambda$processSelectedOption$192$orgtelegramuiChatActivity(boolean isMusic, int count) {
        if (getParentActivity() == null || this.fragmentView == null || count <= 0) {
            return;
        }
        BulletinFactory.of(this).createDownloadBulletin(isMusic ? BulletinFactory.FileType.AUDIOS : BulletinFactory.FileType.UNKNOWNS, count, this.themeDelegate).show();
    }

    /* renamed from: lambda$processSelectedOption$193$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1912lambda$processSelectedOption$193$orgtelegramuiChatActivity(boolean photo, boolean video, boolean gif) {
        BulletinFactory.FileType fileType;
        if (getParentActivity() == null) {
            return;
        }
        if (photo) {
            fileType = BulletinFactory.FileType.PHOTO_TO_DOWNLOADS;
        } else if (video) {
            fileType = BulletinFactory.FileType.VIDEO_TO_DOWNLOADS;
        } else if (gif) {
            fileType = BulletinFactory.FileType.GIF_TO_DOWNLOADS;
        } else {
            fileType = BulletinFactory.FileType.UNKNOWN;
        }
        BulletinFactory.of(this).createDownloadBulletin(fileType, this.themeDelegate).show();
    }

    /* renamed from: lambda$processSelectedOption$194$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1913lambda$processSelectedOption$194$orgtelegramuiChatActivity(DialogInterface di) {
        dimBehindView(false);
    }

    public static /* synthetic */ void lambda$processSelectedOption$195(boolean[] checks, View v) {
        CheckBoxCell cell1 = (CheckBoxCell) v;
        checks[1] = !checks[1];
        cell1.setChecked(checks[1], true);
    }

    public static /* synthetic */ void lambda$processSelectedOption$196(boolean[] checks, View v) {
        CheckBoxCell cell1 = (CheckBoxCell) v;
        checks[0] = !checks[0];
        cell1.setChecked(checks[0], true);
    }

    /* renamed from: lambda$processSelectedOption$198$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1914lambda$processSelectedOption$198$orgtelegramuiChatActivity(int mid, boolean[] checks, DialogInterface dialogInterface, int i) {
        getMessagesController().pinMessage(this.currentChat, this.currentUser, mid, false, !checks[1], checks[0]);
        Bulletin bulletin = BulletinFactory.createPinMessageBulletin(this, this.themeDelegate);
        bulletin.show();
        final View view = bulletin.getLayout();
        view.postDelayed(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda16
            @Override // java.lang.Runnable
            public final void run() {
                view.performHapticFeedback(3, 2);
            }
        }, 550L);
    }

    /* renamed from: lambda$processSelectedOption$200$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1916lambda$processSelectedOption$200$orgtelegramuiChatActivity(final TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda94
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1915lambda$processSelectedOption$199$orgtelegramuiChatActivity(response);
            }
        });
    }

    /* renamed from: lambda$processSelectedOption$199$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1915lambda$processSelectedOption$199$orgtelegramuiChatActivity(TLObject response) {
        if (response != null) {
            TLRPC.TL_exportedMessageLink exportedMessageLink = (TLRPC.TL_exportedMessageLink) response;
            try {
                ClipboardManager clipboard = (ClipboardManager) ApplicationLoader.applicationContext.getSystemService("clipboard");
                ClipData clip = ClipData.newPlainText(Constants.ScionAnalytics.PARAM_LABEL, exportedMessageLink.link);
                clipboard.setPrimaryClip(clip);
                if (BulletinFactory.canShowBulletin(this)) {
                    BulletinFactory.of(this).createCopyLinkBulletin(!isThreadChat() && exportedMessageLink.link.contains("/c/"), this.themeDelegate).show();
                }
            } catch (Exception e) {
                FileLog.e(e);
            }
        }
    }

    /* renamed from: lambda$processSelectedOption$201$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1917lambda$processSelectedOption$201$orgtelegramuiChatActivity() {
        dimBehindView(false);
    }

    /* renamed from: lambda$processSelectedOption$202$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1918lambda$processSelectedOption$202$orgtelegramuiChatActivity() {
        dimBehindView(false);
    }

    public static /* synthetic */ void lambda$processSelectedOption$203(AlertDialog[] progressDialog) {
        try {
            progressDialog[0].dismiss();
        } catch (Throwable th) {
        }
        progressDialog[0] = null;
    }

    /* renamed from: lambda$processSelectedOption$205$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1920lambda$processSelectedOption$205$orgtelegramuiChatActivity(AlertDialog[] progressDialog, final int requestId) {
        if (progressDialog[0] == null) {
            return;
        }
        progressDialog[0].setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda122
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                ChatActivity.this.m1919lambda$processSelectedOption$204$orgtelegramuiChatActivity(requestId, dialogInterface);
            }
        });
        showDialog(progressDialog[0]);
    }

    /* renamed from: lambda$processSelectedOption$204$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1919lambda$processSelectedOption$204$orgtelegramuiChatActivity(int requestId, DialogInterface dialog) {
        getConnectionsManager().cancelRequest(requestId, true);
    }

    /* renamed from: lambda$processSelectedOption$206$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1921lambda$processSelectedOption$206$orgtelegramuiChatActivity(DialogInterface di) {
        dimBehindView(false);
    }

    /* renamed from: lambda$processSelectedOption$212$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1926lambda$processSelectedOption$212$orgtelegramuiChatActivity(MessageObject object, DialogInterface dialogInterface, int i) {
        final AlertDialog[] progressDialog = {new AlertDialog(getParentActivity(), 3, this.themeDelegate)};
        final TLRPC.TL_messages_editMessage req = new TLRPC.TL_messages_editMessage();
        TLRPC.TL_messageMediaPoll mediaPoll = (TLRPC.TL_messageMediaPoll) object.messageOwner.media;
        TLRPC.TL_inputMediaPoll poll = new TLRPC.TL_inputMediaPoll();
        poll.poll = new TLRPC.TL_poll();
        poll.poll.id = mediaPoll.poll.id;
        poll.poll.question = mediaPoll.poll.question;
        poll.poll.answers = mediaPoll.poll.answers;
        poll.poll.closed = true;
        req.media = poll;
        req.peer = getMessagesController().getInputPeer(this.dialog_id);
        req.id = object.getId();
        req.flags |= 16384;
        final int requestId = getConnectionsManager().sendRequest(req, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda146
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                ChatActivity.this.m1923lambda$processSelectedOption$209$orgtelegramuiChatActivity(progressDialog, req, tLObject, tL_error);
            }
        });
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda109
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1925lambda$processSelectedOption$211$orgtelegramuiChatActivity(progressDialog, requestId);
            }
        }, 500L);
    }

    /* renamed from: lambda$processSelectedOption$209$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1923lambda$processSelectedOption$209$orgtelegramuiChatActivity(final AlertDialog[] progressDialog, final TLRPC.TL_messages_editMessage req, TLObject response, final TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda119
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.lambda$processSelectedOption$207(progressDialog);
            }
        });
        if (error == null) {
            getMessagesController().processUpdates((TLRPC.Updates) response, false);
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda101
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1922lambda$processSelectedOption$208$orgtelegramuiChatActivity(error, req);
                }
            });
        }
    }

    public static /* synthetic */ void lambda$processSelectedOption$207(AlertDialog[] progressDialog) {
        try {
            progressDialog[0].dismiss();
        } catch (Throwable th) {
        }
        progressDialog[0] = null;
    }

    /* renamed from: lambda$processSelectedOption$208$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1922lambda$processSelectedOption$208$orgtelegramuiChatActivity(TLRPC.TL_error error, TLRPC.TL_messages_editMessage req) {
        AlertsCreator.processError(this.currentAccount, error, this, req, new Object[0]);
    }

    /* renamed from: lambda$processSelectedOption$211$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1925lambda$processSelectedOption$211$orgtelegramuiChatActivity(AlertDialog[] progressDialog, final int requestId) {
        if (progressDialog[0] == null) {
            return;
        }
        progressDialog[0].setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda133
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                ChatActivity.this.m1924lambda$processSelectedOption$210$orgtelegramuiChatActivity(requestId, dialogInterface);
            }
        });
        showDialog(progressDialog[0]);
    }

    /* renamed from: lambda$processSelectedOption$210$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1924lambda$processSelectedOption$210$orgtelegramuiChatActivity(int requestId, DialogInterface dialog) {
        getConnectionsManager().cancelRequest(requestId, true);
    }

    /* renamed from: lambda$processSelectedOption$215$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1929lambda$processSelectedOption$215$orgtelegramuiChatActivity(final TLRPC.TL_messages_sendScheduledMessages req, TLObject response, final TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.Updates updates = (TLRPC.Updates) response;
            getMessagesController().processUpdates(updates, false);
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda103
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1927lambda$processSelectedOption$213$orgtelegramuiChatActivity(req);
                }
            });
        } else if (error.text != null) {
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda98
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1928lambda$processSelectedOption$214$orgtelegramuiChatActivity(error);
                }
            });
        }
    }

    /* renamed from: lambda$processSelectedOption$213$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1927lambda$processSelectedOption$213$orgtelegramuiChatActivity(TLRPC.TL_messages_sendScheduledMessages req) {
        NotificationCenter.getInstance(this.currentAccount).postNotificationName(NotificationCenter.messagesDeleted, req.id, Long.valueOf(-this.dialog_id), true, Long.valueOf(this.dialog_id));
    }

    /* renamed from: lambda$processSelectedOption$214$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1928lambda$processSelectedOption$214$orgtelegramuiChatActivity(TLRPC.TL_error error) {
        if (error.text.startsWith("SLOWMODE_WAIT_")) {
            AlertsCreator.showSimpleToast(this, LocaleController.getString("SlowmodeSendError", R.string.SlowmodeSendError));
        } else if (error.text.equals("CHAT_SEND_MEDIA_FORBIDDEN")) {
            AlertsCreator.showSimpleToast(this, LocaleController.getString("AttachMediaRestrictedForever", R.string.AttachMediaRestrictedForever));
        } else {
            AlertsCreator.showSimpleToast(this, error.text);
        }
    }

    /* renamed from: lambda$processSelectedOption$216$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1930lambda$processSelectedOption$216$orgtelegramuiChatActivity(MessageObject.GroupedMessages group, MessageObject message, boolean notify, int scheduleDate) {
        if (group != null && !group.messages.isEmpty()) {
            SendMessagesHelper.getInstance(this.currentAccount).editMessage(group.messages.get(0), null, false, this, null, scheduleDate);
        } else {
            SendMessagesHelper.getInstance(this.currentAccount).editMessage(message, null, false, this, null, scheduleDate);
        }
    }

    /* renamed from: lambda$processSelectedOption$217$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1931lambda$processSelectedOption$217$orgtelegramuiChatActivity(DialogInterface di) {
        dimBehindView(false);
    }

    @Override // org.telegram.ui.DialogsActivity.DialogsActivityDelegate
    public void didSelectDialogs(DialogsActivity fragment, ArrayList<Long> dids, CharSequence message, boolean param) {
        if (this.forwardingMessage == null && this.selectedMessagesIds[0].size() == 0 && this.selectedMessagesIds[1].size() == 0) {
            return;
        }
        ArrayList<MessageObject> fmessages = new ArrayList<>();
        MessageObject messageObject = this.forwardingMessage;
        if (messageObject != null) {
            MessageObject.GroupedMessages groupedMessages = this.forwardingMessageGroup;
            if (groupedMessages != null) {
                fmessages.addAll(groupedMessages.messages);
            } else {
                fmessages.add(messageObject);
            }
            this.forwardingMessage = null;
            this.forwardingMessageGroup = null;
        } else {
            for (int a = 1; a >= 0; a--) {
                ArrayList<Integer> ids = new ArrayList<>();
                for (int b = 0; b < this.selectedMessagesIds[a].size(); b++) {
                    ids.add(Integer.valueOf(this.selectedMessagesIds[a].keyAt(b)));
                }
                Collections.sort(ids);
                for (int b2 = 0; b2 < ids.size(); b2++) {
                    Integer id = ids.get(b2);
                    MessageObject messageObject2 = this.selectedMessagesIds[a].get(id.intValue());
                    if (messageObject2 != null) {
                        fmessages.add(messageObject2);
                    }
                }
                this.selectedMessagesCanCopyIds[a].clear();
                this.selectedMessagesCanStarIds[a].clear();
                this.selectedMessagesIds[a].clear();
            }
            hideActionMode();
            updatePinnedMessageView(true);
            updateVisibleRows();
        }
        if (dids.size() <= 1 && dids.get(0).longValue() != getUserConfig().getClientUserId()) {
            if (message == null) {
                long did = dids.get(0).longValue();
                if (did != this.dialog_id || this.chatMode == 2) {
                    Bundle args = new Bundle();
                    args.putBoolean("scrollToTopOnResume", this.scrollToTopOnResume);
                    if (DialogObject.isEncryptedDialog(did)) {
                        args.putInt("enc_id", DialogObject.getEncryptedChatId(did));
                    } else {
                        if (DialogObject.isUserDialog(did)) {
                            args.putLong("user_id", did);
                        } else {
                            args.putLong(ChatReactionsEditActivity.KEY_CHAT_ID, -did);
                        }
                        if (!getMessagesController().checkCanOpenChat(args, fragment)) {
                            return;
                        }
                    }
                    addToPulledDialogsMyself();
                    ChatActivity chatActivity = new ChatActivity(args);
                    if (presentFragment(chatActivity, true)) {
                        chatActivity.showFieldPanelForForward(true, fmessages);
                        if (!AndroidUtilities.isTablet()) {
                            removeSelfFromStack();
                            return;
                        }
                        return;
                    }
                    fragment.finishFragment();
                    return;
                }
                fragment.finishFragment();
                moveScrollToLastMessage(false);
                showFieldPanelForForward(true, fmessages);
                if (AndroidUtilities.isTablet()) {
                    hideActionMode();
                    updatePinnedMessageView(true);
                }
                updateVisibleRows();
                return;
            }
        }
        this.forwardingMessages = null;
        hideFieldPanel(false);
        for (int a2 = 0; a2 < dids.size(); a2++) {
            long did2 = dids.get(a2).longValue();
            if (message != null) {
                getSendMessagesHelper().sendMessage(message.toString(), did2, null, null, null, true, null, null, null, true, 0, null);
            }
            getSendMessagesHelper().sendMessage(fmessages, did2, false, false, true, 0);
        }
        fragment.finishFragment();
        if (dids.size() == 1) {
            this.undoView.showWithAction(dids.get(0).longValue(), 53, Integer.valueOf(fmessages.size()));
        } else {
            this.undoView.showWithAction(0L, 53, Integer.valueOf(fmessages.size()), Integer.valueOf(dids.size()), (Runnable) null, (Runnable) null);
        }
    }

    public boolean checkRecordLocked(final boolean forceCloseOnDiscard) {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && chatActivityEnterView.isRecordLocked()) {
            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
            if (this.chatActivityEnterView.isInVideoMode()) {
                builder.setTitle(LocaleController.getString("DiscardVideoMessageTitle", R.string.DiscardVideoMessageTitle));
                builder.setMessage(LocaleController.getString("DiscardVideoMessageDescription", R.string.DiscardVideoMessageDescription));
            } else {
                builder.setTitle(LocaleController.getString("DiscardVoiceMessageTitle", R.string.DiscardVoiceMessageTitle));
                builder.setMessage(LocaleController.getString("DiscardVoiceMessageDescription", R.string.DiscardVoiceMessageDescription));
            }
            builder.setPositiveButton(LocaleController.getString("DiscardVoiceMessageAction", R.string.DiscardVoiceMessageAction), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda195
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i) {
                    ChatActivity.this.m1762lambda$checkRecordLocked$218$orgtelegramuiChatActivity(forceCloseOnDiscard, dialogInterface, i);
                }
            });
            builder.setNegativeButton(LocaleController.getString("Continue", R.string.Continue), null);
            showDialog(builder.create());
            return true;
        }
        return false;
    }

    /* renamed from: lambda$checkRecordLocked$218$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1762lambda$checkRecordLocked$218$orgtelegramuiChatActivity(boolean forceCloseOnDiscard, DialogInterface dialog, int which) {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            if (forceCloseOnDiscard) {
                finishFragment();
            } else {
                chatActivityEnterView.cancelRecordingAudioVideo();
            }
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean onBackPressed() {
        if (ContentPreviewViewer.getInstance().isVisible()) {
            ContentPreviewViewer.getInstance().closeWithMenu();
            return false;
        }
        ForwardingPreviewView forwardingPreviewView = this.forwardingPreviewView;
        if (forwardingPreviewView != null && forwardingPreviewView.isShowing()) {
            this.forwardingPreviewView.dismiss(true);
            return false;
        } else if (this.messagesSearchListView.getTag() != null) {
            showMessagesSearchListView(false);
            return false;
        } else if (this.scrimPopupWindow != null) {
            closeMenu();
            return false;
        } else if (checkRecordLocked(false)) {
            return false;
        } else {
            if (this.textSelectionHelper.isSelectionMode()) {
                this.textSelectionHelper.clear();
                return false;
            } else if (this.actionBar != null && this.actionBar.isActionModeShowed()) {
                clearSelectionMode();
                return false;
            } else {
                ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                if (chatActivityEnterView != null && chatActivityEnterView.isPopupShowing()) {
                    return !this.chatActivityEnterView.hidePopup(true);
                }
                ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                if (chatActivityEnterView2 != null && chatActivityEnterView2.hasBotWebView() && this.chatActivityEnterView.botCommandsMenuIsShowing() && this.chatActivityEnterView.onBotWebViewBackPressed()) {
                    return false;
                }
                ChatActivityEnterView chatActivityEnterView3 = this.chatActivityEnterView;
                if (chatActivityEnterView3 != null && chatActivityEnterView3.botCommandsMenuIsShowing()) {
                    this.chatActivityEnterView.hideBotCommands();
                    return false;
                }
                if (this.backToPreviousFragment != null) {
                    this.parentLayout.fragmentsStack.add(this.parentLayout.fragmentsStack.size() - 1, this.backToPreviousFragment);
                    this.backToPreviousFragment = null;
                }
                return true;
            }
        }
    }

    public void clearSelectionMode() {
        for (int a = 1; a >= 0; a--) {
            this.selectedMessagesIds[a].clear();
            this.selectedMessagesCanCopyIds[a].clear();
            this.selectedMessagesCanStarIds[a].clear();
        }
        hideActionMode();
        updatePinnedMessageView(true);
        updateVisibleRows();
    }

    public void onListItemAnimatorTick() {
        invalidateMessagesVisiblePart();
        if (this.scrimView != null) {
            this.fragmentView.invalidate();
        }
    }

    public void setThreadMessages(ArrayList<MessageObject> messageObjects, TLRPC.Chat originalChat, int originalMessage, int maxInboxReadId, int maxOutboxReadId) {
        this.threadMessageObjects = messageObjects;
        boolean z = true;
        MessageObject messageObject = messageObjects.get(messageObjects.size() - 1);
        this.threadMessageObject = messageObject;
        this.replyingMessageObject = messageObject;
        this.threadMaxInboxReadId = maxInboxReadId;
        this.threadMaxOutboxReadId = maxOutboxReadId;
        this.replyMaxReadId = Math.max(1, maxInboxReadId);
        this.threadMessageId = this.threadMessageObject.getId();
        this.replyOriginalMessageId = originalMessage;
        this.replyOriginalChat = originalChat;
        if (this.replyingMessageObject.messageOwner.fwd_from == null || this.replyingMessageObject.messageOwner.fwd_from.channel_post == 0) {
            z = false;
        }
        this.isComments = z;
    }

    public void setHighlightMessageId(int id) {
        this.highlightMessageId = id;
    }

    public boolean isThreadChat() {
        return this.threadMessageObject != null;
    }

    public boolean isReplyChatComment() {
        return this.threadMessageObject != null && this.isComments;
    }

    /* JADX WARN: Removed duplicated region for block: B:94:0x018d  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x018f  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public void updateVisibleRows() {
        /*
            Method dump skipped, instructions count: 445
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.updateVisibleRows():void");
    }

    public void checkEditTimer() {
        MessageObject messageObject;
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null || (messageObject = chatActivityEnterView.getEditingMessageObject()) == null || messageObject.scheduled) {
            return;
        }
        TLRPC.User user = this.currentUser;
        if (user != null && user.self) {
            return;
        }
        int dt = messageObject.canEditMessageAnytime(this.currentChat) ? 360 : (getMessagesController().maxEditTime + 300) - Math.abs(getConnectionsManager().getCurrentTime() - messageObject.messageOwner.date);
        if (dt > 0) {
            if (dt <= 300) {
                this.replyObjectTextView.setText(LocaleController.formatString("TimeToEdit", R.string.TimeToEdit, AndroidUtilities.formatShortDuration(dt)));
            }
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda63
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.checkEditTimer();
                }
            }, 1000L);
            return;
        }
        this.chatActivityEnterView.onEditTimeExpired();
        this.replyObjectTextView.setText(LocaleController.formatString("TimeToEditExpired", R.string.TimeToEditExpired, new Object[0]));
    }

    public ArrayList<MessageObject> createVoiceMessagesPlaylist(MessageObject startMessageObject, boolean playingUnreadMedia) {
        ArrayList<MessageObject> messageObjects = new ArrayList<>();
        messageObjects.add(startMessageObject);
        int messageId = startMessageObject.getId();
        startMessageObject.getDialogId();
        if (messageId != 0) {
            for (int a = this.messages.size() - 1; a >= 0; a--) {
                MessageObject messageObject = this.messages.get(a);
                if ((messageObject.getDialogId() != this.mergeDialogId || startMessageObject.getDialogId() == this.mergeDialogId) && (((this.currentEncryptedChat == null && messageObject.getId() > messageId) || (this.currentEncryptedChat != null && messageObject.getId() < messageId)) && ((messageObject.isVoice() || messageObject.isRoundVideo()) && (!playingUnreadMedia || (messageObject.isContentUnread() && !messageObject.isOut()))))) {
                    messageObjects.add(messageObject);
                }
            }
        }
        return messageObjects;
    }

    public void alertUserOpenError(MessageObject message) {
        if (getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
        if (message.type == 3) {
            builder.setMessage(LocaleController.getString("NoPlayerInstalled", R.string.NoPlayerInstalled));
        } else {
            builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", R.string.NoHandleAppInstalled, message.getDocument().mime_type));
        }
        showDialog(builder.create());
    }

    public void openSearchWithText(String text) {
        ActionBarMenuItem actionBarMenuItem;
        if (!this.actionBar.isSearchFieldVisible()) {
            AndroidUtilities.updateViewVisibilityAnimated(this.avatarContainer, false, 0.95f, true);
            ActionBarMenuItem actionBarMenuItem2 = this.headerItem;
            if (actionBarMenuItem2 != null) {
                actionBarMenuItem2.setVisibility(8);
            }
            ActionBarMenuItem actionBarMenuItem3 = this.attachItem;
            if (actionBarMenuItem3 != null) {
                actionBarMenuItem3.setVisibility(8);
            }
            ActionBarMenuItem actionBarMenuItem4 = this.editTextItem;
            if (actionBarMenuItem4 != null) {
                actionBarMenuItem4.setVisibility(8);
            }
            if (this.threadMessageId == 0 && (actionBarMenuItem = this.searchItem) != null) {
                actionBarMenuItem.setVisibility(0);
            }
            ActionBarMenuItem actionBarMenuItem5 = this.searchIconItem;
            if (actionBarMenuItem5 != null && this.showSearchAsIcon) {
                actionBarMenuItem5.setVisibility(8);
            }
            ActionBarMenuItem actionBarMenuItem6 = this.audioCallIconItem;
            if (actionBarMenuItem6 != null && this.showAudioCallAsIcon) {
                actionBarMenuItem6.setVisibility(8);
            }
            this.searchItemVisible = true;
            updateSearchButtons(0, 0, -1);
            updateBottomOverlay();
        }
        if (this.threadMessageId == 0 && !UserObject.isReplyUser(this.currentUser)) {
            boolean z = text == null;
            this.openSearchKeyboard = z;
            ActionBarMenuItem actionBarMenuItem7 = this.searchItem;
            if (actionBarMenuItem7 != null) {
                actionBarMenuItem7.openSearch(z);
            }
        }
        if (text != null) {
            ActionBarMenuItem actionBarMenuItem8 = this.searchItem;
            if (actionBarMenuItem8 != null) {
                actionBarMenuItem8.setSearchFieldText(text, false);
            }
            getMediaDataController().searchMessagesInChat(text, this.dialog_id, this.mergeDialogId, this.classGuid, 0, this.threadMessageId, this.searchingUserMessages, this.searchingChatMessages);
        }
        updatePinnedMessageView(true);
    }

    @Override // org.telegram.ui.LocationActivity.LocationActivityDelegate
    public void didSelectLocation(TLRPC.MessageMedia location, int locationType, boolean notify, int scheduleDate) {
        getSendMessagesHelper().sendMessage(location, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC.ReplyMarkup) null, (HashMap<String, String>) null, notify, scheduleDate);
        if (this.chatMode == 0) {
            moveScrollToLastMessage(false);
        }
        if (locationType == 0 || locationType == 1) {
            afterMessageSend();
        }
        if (this.paused) {
            this.scrollToTopOnResume = true;
        }
    }

    public boolean isEditingMessageMedia() {
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        return (chatAttachAlert == null || chatAttachAlert.getEditingMessageObject() == null) ? false : true;
    }

    public boolean isSecretChat() {
        return this.currentEncryptedChat != null;
    }

    public boolean canScheduleMessage() {
        BlurredFrameLayout blurredFrameLayout;
        return this.currentEncryptedChat == null && ((blurredFrameLayout = this.bottomOverlayChat) == null || blurredFrameLayout.getVisibility() != 0) && !isThreadChat();
    }

    public boolean isInScheduleMode() {
        return this.chatMode == 1;
    }

    public int getChatMode() {
        return this.chatMode;
    }

    public MessageObject getThreadMessage() {
        return this.threadMessageObject;
    }

    public MessageObject getReplyMessage() {
        return this.replyingMessageObject;
    }

    public int getThreadId() {
        return this.threadMessageId;
    }

    public long getInlineReturn() {
        return this.inlineReturn;
    }

    public TLRPC.User getCurrentUser() {
        return this.currentUser;
    }

    public TLRPC.Chat getCurrentChat() {
        return this.currentChat;
    }

    public boolean allowGroupPhotos() {
        return !isEditingMessageMedia();
    }

    public TLRPC.EncryptedChat getCurrentEncryptedChat() {
        return this.currentEncryptedChat;
    }

    public TLRPC.ChatFull getCurrentChatInfo() {
        return this.chatInfo;
    }

    public ChatObject.Call getGroupCall() {
        ChatObject.Call call2;
        if (this.chatMode != 0 || (call2 = this.groupCall) == null || !(call2.call instanceof TLRPC.TL_groupCall)) {
            return null;
        }
        return this.groupCall;
    }

    public TLRPC.UserFull getCurrentUserInfo() {
        return this.userInfo;
    }

    public void sendAudio(ArrayList<MessageObject> audios, CharSequence caption, boolean notify, int scheduleDate) {
        String str = null;
        fillEditingMediaWithCaption(caption, null);
        AccountInstance accountInstance = getAccountInstance();
        if (caption != null) {
            str = caption.toString();
        }
        SendMessagesHelper.prepareSendingAudioDocuments(accountInstance, audios, str, this.dialog_id, this.replyingMessageObject, getThreadMessage(), this.editingMessageObject, notify, scheduleDate);
        afterMessageSend();
    }

    public void sendContact(TLRPC.User user, boolean notify, int scheduleDate) {
        getSendMessagesHelper().sendMessage(user, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC.ReplyMarkup) null, (HashMap<String, String>) null, notify, scheduleDate);
        afterMessageSend();
    }

    public void sendPoll(TLRPC.TL_messageMediaPoll poll, HashMap<String, String> params, boolean notify, int scheduleDate) {
        getSendMessagesHelper().sendMessage(poll, this.dialog_id, this.replyingMessageObject, getThreadMessage(), (TLRPC.ReplyMarkup) null, params, notify, scheduleDate);
        afterMessageSend();
    }

    public void sendMedia(MediaController.PhotoEntry photoEntry, VideoEditedInfo videoEditedInfo, boolean notify, int scheduleDate, boolean forceDocument) {
        if (photoEntry != null) {
            fillEditingMediaWithCaption(photoEntry.caption, photoEntry.entities);
            if (photoEntry.isVideo) {
                if (videoEditedInfo != null) {
                    SendMessagesHelper.prepareSendingVideo(getAccountInstance(), photoEntry.path, videoEditedInfo, this.dialog_id, this.replyingMessageObject, getThreadMessage(), photoEntry.caption, photoEntry.entities, photoEntry.ttl, this.editingMessageObject, notify, scheduleDate, forceDocument);
                } else {
                    SendMessagesHelper.prepareSendingVideo(getAccountInstance(), photoEntry.path, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), photoEntry.caption, photoEntry.entities, photoEntry.ttl, this.editingMessageObject, notify, scheduleDate, forceDocument);
                }
            } else if (photoEntry.imagePath != null) {
                SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), photoEntry.imagePath, photoEntry.thumbPath, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), photoEntry.caption, photoEntry.entities, photoEntry.stickers, null, photoEntry.ttl, this.editingMessageObject, videoEditedInfo, notify, scheduleDate, forceDocument);
            } else if (photoEntry.path != null) {
                SendMessagesHelper.prepareSendingPhoto(getAccountInstance(), photoEntry.path, photoEntry.thumbPath, null, this.dialog_id, this.replyingMessageObject, getThreadMessage(), photoEntry.caption, photoEntry.entities, photoEntry.stickers, null, photoEntry.ttl, this.editingMessageObject, videoEditedInfo, notify, scheduleDate, forceDocument);
            }
            afterMessageSend();
        }
    }

    public void showOpenGameAlert(final TLRPC.TL_game game, final MessageObject messageObject, final String urlStr, boolean ask, final long uid) {
        String name;
        TLRPC.User user = getMessagesController().getUser(Long.valueOf(uid));
        if (ask) {
            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
            if (user != null) {
                name = ContactsController.formatName(user.first_name, user.last_name);
            } else {
                name = "";
            }
            builder.setMessage(LocaleController.formatString("BotPermissionGameAlert", R.string.BotPermissionGameAlert, name));
            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda192
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i) {
                    ChatActivity.this.m1956lambda$showOpenGameAlert$219$orgtelegramuiChatActivity(game, messageObject, urlStr, uid, dialogInterface, i);
                }
            });
            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
            showDialog(builder.create());
            return;
        }
        String str = "";
        if (Build.VERSION.SDK_INT >= 21 && !AndroidUtilities.isTablet() && WebviewActivity.supportWebview()) {
            if (this.parentLayout.fragmentsStack.get(this.parentLayout.fragmentsStack.size() - 1) == this) {
                if (user != null && !TextUtils.isEmpty(user.username)) {
                    str = user.username;
                }
                presentFragment(new WebviewActivity(urlStr, str, game.title, game.short_name, messageObject));
                return;
            }
            return;
        }
        Activity parentActivity = getParentActivity();
        String str2 = game.short_name;
        if (user != null && user.username != null) {
            str = user.username;
        }
        WebviewActivity.openGameInBrowser(urlStr, messageObject, parentActivity, str2, str);
    }

    /* renamed from: lambda$showOpenGameAlert$219$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1956lambda$showOpenGameAlert$219$orgtelegramuiChatActivity(TLRPC.TL_game game, MessageObject messageObject, String urlStr, long uid, DialogInterface dialogInterface, int i) {
        showOpenGameAlert(game, messageObject, urlStr, false, uid);
        SharedPreferences.Editor edit2 = MessagesController.getNotificationsSettings(this.currentAccount).edit();
        edit2.putBoolean("askgame_" + uid, false).commit();
    }

    private void processLoadedDiscussionMessage(boolean noDiscussion, TLRPC.TL_messages_discussionMessage discussionMessage, boolean noHistory, TLRPC.messages_Messages history, final int maxReadId, MessageObject fallbackMessage, TLRPC.TL_messages_getDiscussionMessage req, TLRPC.Chat originalChat, final int highlightMsgId, MessageObject originalMessage) {
        TLRPC.messages_Messages history2;
        boolean[] chatOpened;
        Runnable openCommentsChat;
        TLRPC.messages_Messages history3 = history;
        final int thisCommentLoadingMessageId = this.commentLoadingMessageId;
        if (history3 == null) {
            history2 = history3;
        } else {
            if (maxReadId != 1 && maxReadId != 0 && maxReadId != discussionMessage.read_inbox_max_id && highlightMsgId <= 0) {
                history3 = null;
            } else if (!history3.messages.isEmpty() && discussionMessage != null && !discussionMessage.messages.isEmpty()) {
                TLRPC.Message message = history3.messages.get(0);
                int replyId = (message == null || message.reply_to == null) ? 0 : message.reply_to.reply_to_top_id != 0 ? message.reply_to.reply_to_top_id : message.reply_to.reply_to_msg_id;
                if (replyId != discussionMessage.messages.get(discussionMessage.messages.size() - 1).id) {
                    history3 = null;
                }
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("processLoadedDiscussionMessage reset history");
            }
            history2 = history3;
        }
        final ArrayList<MessageObject> arrayList = new ArrayList<>();
        if (discussionMessage != null && discussionMessage.messages != null) {
            int N = discussionMessage.messages.size();
            for (int a = 0; a < N; a++) {
                TLRPC.Message message2 = discussionMessage.messages.get(a);
                if (!(message2 instanceof TLRPC.TL_messageEmpty)) {
                    message2.isThreadMessage = true;
                    arrayList.add(new MessageObject(UserConfig.selectedAccount, message2, true, true));
                }
            }
        }
        if (arrayList.isEmpty()) {
            this.commentLoadingMessageId = 0;
            this.chatListView.invalidateViews();
            if (fallbackMessage != null) {
                openOriginalReplyChat(fallbackMessage);
                return;
            } else if (getParentActivity() != null) {
                BulletinFactory.of(this).createErrorBulletin(LocaleController.getString("ChannelPostDeleted", R.string.ChannelPostDeleted), this.themeDelegate).show();
                return;
            } else {
                return;
            }
        }
        Bundle args = new Bundle();
        final long dialogId = arrayList.get(0).getDialogId();
        args.putLong(ChatReactionsEditActivity.KEY_CHAT_ID, -dialogId);
        args.putInt(Constants.MessagePayloadKeys.MSGID_SERVER, Math.max(1, discussionMessage.read_inbox_max_id));
        args.putInt("unread_count", discussionMessage.unread_count);
        args.putBoolean("historyPreloaded", history2 != null);
        final ChatActivity chatActivity = new ChatActivity(args);
        chatActivity.setThreadMessages(arrayList, originalChat, req.msg_id, discussionMessage.read_inbox_max_id, discussionMessage.read_outbox_max_id);
        if (highlightMsgId != 0) {
            chatActivity.highlightMessageId = highlightMsgId;
        }
        if (originalMessage != null && originalMessage.messageOwner.replies != null && chatActivity.threadMessageObject.messageOwner.replies != null) {
            originalMessage.messageOwner.replies.replies = chatActivity.threadMessageObject.messageOwner.replies.replies;
        }
        if (originalMessage != null && originalMessage.messageOwner.reactions != null) {
            chatActivity.threadMessageObject.messageOwner.reactions = originalMessage.messageOwner.reactions;
        }
        final boolean[] chatOpened2 = {false};
        Runnable openCommentsChat2 = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda115
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1905xd7e83bec(chatOpened2, thisCommentLoadingMessageId, chatActivity);
            }
        };
        if (history2 != null) {
            int fnid = 0;
            if (!history2.messages.isEmpty()) {
                int a2 = history2.messages.size() - 1;
                while (true) {
                    if (a2 < 0) {
                        chatOpened = chatOpened2;
                        openCommentsChat = openCommentsChat2;
                        break;
                    }
                    chatOpened = chatOpened2;
                    TLRPC.Message message3 = history2.messages.get(a2);
                    openCommentsChat = openCommentsChat2;
                    if (message3.id > maxReadId && !message3.out) {
                        fnid = message3.id;
                        break;
                    }
                    a2--;
                    chatOpened2 = chatOpened;
                    openCommentsChat2 = openCommentsChat;
                }
            } else {
                chatOpened = chatOpened2;
                openCommentsChat = openCommentsChat2;
            }
            final TLRPC.messages_Messages historyFinal = history2;
            final int fnidFinal = fnid;
            final int commentsClassGuid = chatActivity.getClassGuid();
            NotificationCenter.NotificationCenterDelegate observer = new AnonymousClass113(commentsClassGuid, openCommentsChat, chatActivity);
            NotificationCenter.getInstance(this.currentAccount).addObserver(observer, NotificationCenter.messagesDidLoad);
            Utilities.stageQueue.postRunnable(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda104
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1906xd894e78b(historyFinal, dialogId, highlightMsgId, maxReadId, commentsClassGuid, fnidFinal, arrayList);
                }
            });
            return;
        }
        openCommentsChat2.run();
    }

    /* renamed from: lambda$processLoadedDiscussionMessage$221$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1905xd7e83bec(boolean[] chatOpened, int thisCommentLoadingMessageId, ChatActivity chatActivity) {
        if (!chatOpened[0] && thisCommentLoadingMessageId == this.commentLoadingMessageId && this.isFullyVisible && !isFinishing()) {
            chatOpened[0] = true;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda46
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.this.m1904xd73b904d();
                }
            }, 200L);
            presentFragment(chatActivity);
            if (isKeyboardVisible() && !chatActivity.hideKeyboardOnShow()) {
                chatActivity.chatActivityEnterView.getEditField().requestFocus();
            }
        }
    }

    /* renamed from: lambda$processLoadedDiscussionMessage$220$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1904xd73b904d() {
        this.commentLoadingMessageId = 0;
        this.chatListView.invalidateViews();
    }

    /* renamed from: org.telegram.ui.ChatActivity$113 */
    /* loaded from: classes4.dex */
    public class AnonymousClass113 implements NotificationCenter.NotificationCenterDelegate {
        final /* synthetic */ ChatActivity val$chatActivity;
        final /* synthetic */ int val$commentsClassGuid;
        final /* synthetic */ Runnable val$openCommentsChat;

        AnonymousClass113(int i, Runnable runnable, ChatActivity chatActivity) {
            ChatActivity.this = this$0;
            this.val$commentsClassGuid = i;
            this.val$openCommentsChat = runnable;
            this.val$chatActivity = chatActivity;
        }

        @Override // org.telegram.messenger.NotificationCenter.NotificationCenterDelegate
        public void didReceivedNotification(final int id, final int account, final Object... args) {
            if (id == NotificationCenter.messagesDidLoad && ((Integer) args[10]).intValue() == this.val$commentsClassGuid) {
                this.val$openCommentsChat.run();
                final ChatActivity chatActivity = this.val$chatActivity;
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$113$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.this.didReceivedNotification(id, account, args);
                    }
                }, 50L);
                NotificationCenter.getInstance(ChatActivity.this.currentAccount).removeObserver(this, NotificationCenter.messagesDidLoad);
            }
        }
    }

    /* renamed from: lambda$processLoadedDiscussionMessage$222$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1906xd894e78b(TLRPC.messages_Messages historyFinal, long dialogId, int highlightMsgId, int maxReadId, int commentsClassGuid, int fnidFinal, ArrayList arrayList) {
        getMessagesController().processLoadedMessages(historyFinal, historyFinal.messages.size(), dialogId, 0L, 30, highlightMsgId > 0 ? highlightMsgId : maxReadId, 0, false, commentsClassGuid, fnidFinal, 0, 0, 0, highlightMsgId > 0 ? 3 : 2, true, 0, ((MessageObject) arrayList.get(arrayList.size() - 1)).getId(), 1, false, 0, true);
    }

    public void openDiscussionMessageChat(long chatId, final MessageObject originalMessage, int messageId, final long linkedChatId, final int maxReadId, final int highlightMsgId, final MessageObject fallbackMessage) {
        final TLRPC.Chat chat = getMessagesController().getChat(Long.valueOf(chatId));
        final TLRPC.TL_messages_getDiscussionMessage req = new TLRPC.TL_messages_getDiscussionMessage();
        req.peer = MessagesController.getInputPeer(chat);
        req.msg_id = messageId;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("getDiscussionMessage chat = " + chat.id + " msg_id = " + messageId);
        }
        this.commentLoadingMessageId = 0;
        this.savedDiscussionMessage = null;
        this.savedNoDiscussion = false;
        this.savedNoHistory = false;
        this.savedHistory = null;
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            recyclerListView.invalidateViews();
        }
        if (this.commentMessagesRequestId != -1) {
            getConnectionsManager().cancelRequest(this.commentMessagesRequestId, false);
        }
        if (this.commentRequestId != -1) {
            getConnectionsManager().cancelRequest(this.commentRequestId, false);
        }
        this.commentLoadingMessageId = fallbackMessage != null ? fallbackMessage.getId() : messageId;
        RecyclerListView recyclerListView2 = this.chatListView;
        if (recyclerListView2 != null) {
            recyclerListView2.invalidateViews();
        }
        final int guid1 = this.commentLoadingGuid + 1;
        this.commentLoadingGuid = guid1;
        this.commentRequestId = getConnectionsManager().sendRequest(req, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda135
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                ChatActivity.this.m1900x4d38909d(guid1, maxReadId, linkedChatId, highlightMsgId, fallbackMessage, req, chat, originalMessage, tLObject, tL_error);
            }
        });
        getConnectionsManager().bindRequestToGuid(this.commentRequestId, this.classGuid);
    }

    /* renamed from: lambda$openDiscussionMessageChat$228$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1900x4d38909d(final int guid1, final int maxReadId, final long linkedChatId, final int highlightMsgId, final MessageObject fallbackMessage, final TLRPC.TL_messages_getDiscussionMessage req, final TLRPC.Chat chat, final MessageObject originalMessage, final TLObject response, TLRPC.TL_error error) {
        final Runnable runnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda71
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1898x4bdf395f(guid1, maxReadId, linkedChatId, response, highlightMsgId, fallbackMessage, req, chat, originalMessage);
            }
        };
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda79
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1899x4c8be4fe(runnable);
            }
        });
    }

    /* renamed from: lambda$openDiscussionMessageChat$226$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1898x4bdf395f(int guid1, final int maxReadId, long linkedChatId, TLObject response, final int highlightMsgId, final MessageObject fallbackMessage, final TLRPC.TL_messages_getDiscussionMessage req, final TLRPC.Chat chat, final MessageObject originalMessage) {
        if (guid1 == this.commentLoadingGuid) {
            this.commentRequestId = -1;
            if (response instanceof TLRPC.TL_messages_discussionMessage) {
                this.savedDiscussionMessage = (TLRPC.TL_messages_discussionMessage) response;
                getMessagesController().putUsers(this.savedDiscussionMessage.users, false);
                getMessagesController().putChats(this.savedDiscussionMessage.chats, false);
            } else {
                this.savedNoDiscussion = true;
            }
            ArrayList<TLRPC.Message> msgs = new ArrayList<>();
            TLRPC.TL_messages_discussionMessage tL_messages_discussionMessage = this.savedDiscussionMessage;
            if (tL_messages_discussionMessage != null && tL_messages_discussionMessage.messages != null) {
                for (int i = 0; i < this.savedDiscussionMessage.messages.size(); i++) {
                    TLRPC.Message message = this.savedDiscussionMessage.messages.get(i);
                    if (!(message instanceof TLRPC.TL_messageEmpty)) {
                        msgs.add(message);
                    }
                }
            }
            int i2 = msgs.size();
            if (i2 <= 0) {
                this.savedNoHistory = true;
                processLoadedDiscussionMessage(this.savedNoDiscussion, this.savedDiscussionMessage, true, this.savedHistory, maxReadId, fallbackMessage, req, chat, highlightMsgId, originalMessage);
                return;
            }
            TLRPC.Message message2 = msgs.get(0);
            TLRPC.TL_messages_getReplies getReplies = new TLRPC.TL_messages_getReplies();
            getReplies.peer = getMessagesController().getInputPeer(message2.peer_id);
            getReplies.msg_id = message2.id;
            getReplies.offset_date = 0;
            getReplies.limit = 30;
            if (highlightMsgId > 0) {
                getReplies.offset_id = highlightMsgId;
                getReplies.add_offset = (-getReplies.limit) / 2;
            } else {
                getReplies.offset_id = maxReadId == 0 ? 1 : maxReadId;
                getReplies.add_offset = (-getReplies.limit) + 10;
            }
            final int guid2 = 1 + this.commentMessagesLoadingGuid;
            this.commentMessagesLoadingGuid = guid2;
            this.commentMessagesRequestId = getConnectionsManager().sendRequest(getReplies, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda136
                @Override // org.telegram.tgnet.RequestDelegate
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    ChatActivity.this.m1897x4b328dc0(guid2, maxReadId, fallbackMessage, req, chat, highlightMsgId, originalMessage, tLObject, tL_error);
                }
            });
        }
    }

    /* renamed from: lambda$openDiscussionMessageChat$224$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1896x4a85e221(final int guid2, final TLObject response2, final TLRPC.TL_error error2, final int maxReadId1, final MessageObject fallbackMessage, final TLRPC.TL_messages_getDiscussionMessage req, final TLRPC.Chat chat, final int highlightMsgId, final MessageObject originalMessage) {
        m1899x4c8be4fe(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda74
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1895x49d93682(guid2, response2, error2, maxReadId1, fallbackMessage, req, chat, highlightMsgId, originalMessage);
            }
        });
    }

    /* renamed from: lambda$openDiscussionMessageChat$225$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1897x4b328dc0(final int guid2, final int maxReadId1, final MessageObject fallbackMessage, final TLRPC.TL_messages_getDiscussionMessage req, final TLRPC.Chat chat, final int highlightMsgId, final MessageObject originalMessage, final TLObject response2, final TLRPC.TL_error error2) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda75
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1896x4a85e221(guid2, response2, error2, maxReadId1, fallbackMessage, req, chat, highlightMsgId, originalMessage);
            }
        });
    }

    /* renamed from: lambda$openDiscussionMessageChat$223$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1895x49d93682(int guid2, TLObject response2, TLRPC.TL_error error2, int maxReadId1, MessageObject fallbackMessage, TLRPC.TL_messages_getDiscussionMessage req, TLRPC.Chat chat, int highlightMsgId, MessageObject originalMessage) {
        if (guid2 == this.commentMessagesLoadingGuid) {
            this.commentMessagesRequestId = -1;
            if (response2 != null) {
                this.savedHistory = (TLRPC.messages_Messages) response2;
            } else if (!"CHANNEL_PRIVATE".equals(error2.text)) {
                this.savedNoHistory = true;
            } else {
                if (getParentActivity() != null) {
                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                    builder.setMessage(LocaleController.getString("JoinByPeekChannelText", R.string.JoinByPeekChannelText));
                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                    showDialog(builder.create());
                }
                this.commentLoadingMessageId = 0;
                this.chatListView.invalidateViews();
                return;
            }
            processLoadedDiscussionMessage(this.savedNoDiscussion, this.savedDiscussionMessage, this.savedNoHistory, this.savedHistory, maxReadId1, fallbackMessage, req, chat, highlightMsgId, originalMessage);
        }
    }

    public void openOriginalReplyChat(MessageObject messageObject) {
        if (UserObject.isUserSelf(this.currentUser) && messageObject.messageOwner.fwd_from.saved_from_peer.user_id == this.currentUser.id) {
            scrollToMessageId(messageObject.messageOwner.fwd_from.saved_from_msg_id, messageObject.getId(), true, 0, true, 0);
            return;
        }
        Bundle args = new Bundle();
        if (messageObject.messageOwner.fwd_from.saved_from_peer.channel_id != 0) {
            args.putLong(ChatReactionsEditActivity.KEY_CHAT_ID, messageObject.messageOwner.fwd_from.saved_from_peer.channel_id);
        } else if (messageObject.messageOwner.fwd_from.saved_from_peer.chat_id != 0) {
            args.putLong(ChatReactionsEditActivity.KEY_CHAT_ID, messageObject.messageOwner.fwd_from.saved_from_peer.chat_id);
        } else if (messageObject.messageOwner.fwd_from.saved_from_peer.user_id != 0) {
            args.putLong("user_id", messageObject.messageOwner.fwd_from.saved_from_peer.user_id);
        }
        args.putInt(Constants.MessagePayloadKeys.MSGID_SERVER, messageObject.messageOwner.fwd_from.saved_from_msg_id);
        if (getMessagesController().checkCanOpenChat(args, this)) {
            presentFragment(new ChatActivity(args));
        }
    }

    /* JADX WARN: Type inference failed for: r2v1 */
    /* JADX WARN: Type inference failed for: r2v9 */
    public void showRequestUrlAlert(final TLRPC.TL_urlAuthResultRequest request, final TLRPC.TL_messages_requestUrlAuth buttonReq, final String url, final boolean ask) {
        int i;
        if (getParentActivity() == null) {
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity(), this.themeDelegate);
        builder.setTitle(LocaleController.getString("OpenUrlTitle", R.string.OpenUrlTitle));
        String format = LocaleController.getString("OpenUrlAlert2", R.string.OpenUrlAlert2);
        int index = format.indexOf("%");
        int i2 = 1;
        boolean z = false;
        SpannableStringBuilder stringBuilder = new SpannableStringBuilder(String.format(format, url));
        if (index >= 0) {
            stringBuilder.setSpan(new URLSpan(url), index, url.length() + index, 33);
        }
        builder.setMessage(stringBuilder);
        builder.setMessageTextViewClickable(false);
        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
        final CheckBoxCell[] cells = new CheckBoxCell[2];
        LinearLayout linearLayout = new LinearLayout(getParentActivity());
        linearLayout.setOrientation(1);
        TLRPC.User selfUser = getUserConfig().getCurrentUser();
        int a = 0;
        while (true) {
            if (a < (request.request_write_access ? 2 : 1)) {
                cells[a] = new CheckBoxCell(getParentActivity(), 5, this.themeDelegate);
                cells[a].setBackgroundDrawable(Theme.getSelectorDrawable(z));
                cells[a].setMultiline(i2);
                cells[a].setTag(Integer.valueOf(a));
                if (a != 0) {
                    CheckBoxCell checkBoxCell = cells[a];
                    Object[] objArr = new Object[i2];
                    objArr[0] = UserObject.getFirstName(request.bot);
                    i = 1;
                    checkBoxCell.setText(AndroidUtilities.replaceTags(LocaleController.formatString("OpenUrlOption2", R.string.OpenUrlOption2, objArr)), "", true, false);
                } else {
                    Object[] objArr2 = new Object[2];
                    String str = request.domain;
                    char c = z ? 1 : 0;
                    char c2 = z ? 1 : 0;
                    objArr2[c] = str;
                    objArr2[i2] = ContactsController.formatName(selfUser.first_name, selfUser.last_name);
                    SpannableStringBuilder stringBuilder2 = AndroidUtilities.replaceTags(LocaleController.formatString("OpenUrlOption1", R.string.OpenUrlOption1, objArr2));
                    int index2 = TextUtils.indexOf(stringBuilder2, request.domain);
                    if (index2 >= 0) {
                        stringBuilder2.setSpan(new URLSpan(""), index2, request.domain.length() + index2, 33);
                    }
                    cells[a].setText(stringBuilder2, "", i2, false);
                    i = i2;
                }
                z = false;
                cells[a].setPadding(LocaleController.isRTL ? AndroidUtilities.dp(16.0f) : AndroidUtilities.dp(8.0f), 0, LocaleController.isRTL ? AndroidUtilities.dp(8.0f) : AndroidUtilities.dp(16.0f), 0);
                linearLayout.addView(cells[a], LayoutHelper.createLinear(-1, -2));
                cells[a].setOnClickListener(new View.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda249
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ChatActivity.lambda$showRequestUrlAlert$229(cells, view);
                    }
                });
                a++;
                i2 = i;
            } else {
                builder.setCustomViewOffset(12);
                builder.setView(linearLayout);
                builder.setPositiveButton(LocaleController.getString("Open", R.string.Open), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda196
                    @Override // android.content.DialogInterface.OnClickListener
                    public final void onClick(DialogInterface dialogInterface, int i3) {
                        ChatActivity.this.m1962lambda$showRequestUrlAlert$234$orgtelegramuiChatActivity(cells, url, buttonReq, request, ask, dialogInterface, i3);
                    }
                });
                showDialog(builder.create());
                return;
            }
        }
    }

    public static /* synthetic */ void lambda$showRequestUrlAlert$229(CheckBoxCell[] cells, View v) {
        if (!v.isEnabled()) {
            return;
        }
        Integer num = (Integer) v.getTag();
        cells[num.intValue()].setChecked(!cells[num.intValue()].isChecked(), true);
        if (num.intValue() == 0 && cells[1] != null) {
            if (cells[num.intValue()].isChecked()) {
                cells[1].setEnabled(true);
                return;
            }
            cells[1].setChecked(false, true);
            cells[1].setEnabled(false);
        }
    }

    /* renamed from: lambda$showRequestUrlAlert$234$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1962lambda$showRequestUrlAlert$234$orgtelegramuiChatActivity(CheckBoxCell[] cells, final String url, final TLRPC.TL_messages_requestUrlAuth buttonReq, TLRPC.TL_urlAuthResultRequest request, final boolean ask, DialogInterface dialogInterface, int i) {
        if (!cells[0].isChecked()) {
            Browser.openUrl((Context) getParentActivity(), url, false);
            return;
        }
        final AlertDialog[] progressDialog = {new AlertDialog(getParentActivity(), 3, this.themeDelegate)};
        TLRPC.TL_messages_acceptUrlAuth req = new TLRPC.TL_messages_acceptUrlAuth();
        if (buttonReq.url != null) {
            req.url = buttonReq.url;
            req.flags |= 4;
        } else {
            req.button_id = buttonReq.button_id;
            req.msg_id = buttonReq.msg_id;
            req.peer = buttonReq.peer;
            req.flags |= 2;
        }
        if (request.request_write_access) {
            req.write_allowed = cells[1].isChecked();
        }
        try {
            progressDialog[0].dismiss();
        } catch (Throwable th) {
        }
        progressDialog[0] = null;
        final int requestId = getConnectionsManager().sendRequest(req, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda138
            @Override // org.telegram.tgnet.RequestDelegate
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                ChatActivity.this.m1959lambda$showRequestUrlAlert$231$orgtelegramuiChatActivity(url, buttonReq, ask, tLObject, tL_error);
            }
        });
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda112
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1961lambda$showRequestUrlAlert$233$orgtelegramuiChatActivity(progressDialog, requestId);
            }
        }, 500L);
    }

    /* renamed from: lambda$showRequestUrlAlert$231$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1959lambda$showRequestUrlAlert$231$orgtelegramuiChatActivity(final String url, final TLRPC.TL_messages_requestUrlAuth buttonReq, final boolean ask, final TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda96
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1958lambda$showRequestUrlAlert$230$orgtelegramuiChatActivity(response, url, buttonReq, ask);
            }
        });
    }

    /* renamed from: lambda$showRequestUrlAlert$230$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1958lambda$showRequestUrlAlert$230$orgtelegramuiChatActivity(TLObject response, String url, TLRPC.TL_messages_requestUrlAuth buttonReq, boolean ask) {
        if (response instanceof TLRPC.TL_urlAuthResultAccepted) {
            TLRPC.TL_urlAuthResultAccepted res = (TLRPC.TL_urlAuthResultAccepted) response;
            Browser.openUrl((Context) getParentActivity(), res.url, false);
        } else if (response instanceof TLRPC.TL_urlAuthResultDefault) {
            Browser.openUrl((Context) getParentActivity(), url, false);
        } else if (buttonReq.url != null) {
            AlertsCreator.showOpenUrlAlert(this, buttonReq.url, false, ask, this.themeDelegate);
        }
    }

    /* renamed from: lambda$showRequestUrlAlert$233$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1961lambda$showRequestUrlAlert$233$orgtelegramuiChatActivity(AlertDialog[] progressDialog, final int requestId) {
        if (progressDialog[0] == null) {
            return;
        }
        progressDialog[0].setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda144
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                ChatActivity.this.m1960lambda$showRequestUrlAlert$232$orgtelegramuiChatActivity(requestId, dialogInterface);
            }
        });
        showDialog(progressDialog[0]);
    }

    /* renamed from: lambda$showRequestUrlAlert$232$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1960lambda$showRequestUrlAlert$232$orgtelegramuiChatActivity(int requestId, DialogInterface dialog) {
        getConnectionsManager().cancelRequest(requestId, true);
    }

    private void removeMessageObject(MessageObject messageObject) {
        int index = this.messages.indexOf(messageObject);
        if (index == -1) {
            return;
        }
        this.messages.remove(index);
        ChatActivityAdapter chatActivityAdapter = this.chatAdapter;
        if (chatActivityAdapter == null) {
            return;
        }
        chatActivityAdapter.notifyItemRemoved(chatActivityAdapter.messagesStartRow + index);
    }

    public void openVCard(TLRPC.User user, String vcard, String first_name, String last_name) {
        Exception e;
        File f;
        BufferedWriter writer;
        try {
            File f2 = AndroidUtilities.getSharingDirectory();
            f2.mkdirs();
            f = new File(f2, "vcard.vcf");
            writer = new BufferedWriter(new FileWriter(f));
        } catch (Exception e2) {
            e = e2;
        }
        try {
            writer.write(vcard);
            writer.close();
            showDialog(new PhonebookShareAlert(this, null, user, null, f, first_name, last_name, this.themeDelegate));
        } catch (Exception e3) {
            e = e3;
            FileLog.e(e);
        }
    }

    public void setCellSelectionBackground(MessageObject message, ChatMessageCell messageCell, int idx, boolean animated) {
        MessageObject.GroupedMessages groupedMessages = getValidGroupedMessage(message);
        if (groupedMessages != null) {
            boolean hasUnselected = false;
            int a = 0;
            while (true) {
                if (a >= groupedMessages.messages.size()) {
                    break;
                } else if (this.selectedMessagesIds[idx].indexOfKey(groupedMessages.messages.get(a).getId()) >= 0) {
                    a++;
                } else {
                    hasUnselected = true;
                    break;
                }
            }
            if (!hasUnselected) {
                groupedMessages = null;
            }
        }
        boolean hasUnselected2 = false;
        messageCell.setDrawSelectionBackground(groupedMessages == null);
        if (groupedMessages == null) {
            hasUnselected2 = true;
        }
        messageCell.setChecked(true, hasUnselected2, animated);
    }

    public void openClickableLink(final CharacterStyle url, final String str, boolean longPress, final ChatMessageCell cell, final MessageObject messageObject) {
        TLRPC.User user;
        int timestamp;
        if (longPress) {
            BottomSheet.Builder builder = new BottomSheet.Builder((Context) getParentActivity(), false, (Theme.ResourcesProvider) this.themeDelegate);
            if (!str.startsWith("video?")) {
                timestamp = -1;
            } else {
                timestamp = Utilities.parseInt((CharSequence) str).intValue();
            }
            if (timestamp >= 0) {
                builder.setTitle(AndroidUtilities.formatDuration(timestamp, false));
            } else {
                String formattedUrl = str;
                try {
                    formattedUrl = URLDecoder.decode(str.replaceAll("\\+", "%2b"), "UTF-8");
                } catch (Exception e) {
                }
                builder.setTitle(formattedUrl);
                builder.setTitleMultipleLines(true);
            }
            final int finalTimestamp = timestamp;
            boolean noforwards = getMessagesController().isChatNoForwards(this.currentChat) || !(messageObject == null || messageObject.messageOwner == null || !messageObject.messageOwner.noforwards);
            builder.setItems(noforwards ? new CharSequence[]{LocaleController.getString("Open", R.string.Open)} : new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda188
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i) {
                    ChatActivity.this.m1894lambda$openClickableLink$235$orgtelegramuiChatActivity(str, url, messageObject, cell, finalTimestamp, dialogInterface, i);
                }
            });
            builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda199
                @Override // android.content.DialogInterface.OnDismissListener
                public final void onDismiss(DialogInterface dialogInterface) {
                    ChatActivity.lambda$openClickableLink$236(ChatMessageCell.this, dialogInterface);
                }
            });
            showDialog(builder.create());
        } else if (!str.startsWith("@")) {
            if (str.startsWith("#") || str.startsWith("$")) {
                if (ChatObject.isChannel(this.currentChat)) {
                    int i = this.chatMode;
                    if (i == 1 || i == 2) {
                        this.chatActivityDelegate.openSearch(str);
                        finishFragment();
                        return;
                    }
                    openSearchWithText(str);
                    return;
                }
                DialogsActivity fragment = new DialogsActivity(null);
                fragment.setSearchString(str);
                presentFragment(fragment);
                return;
            }
            processExternalUrl(0, str, false);
        } else {
            String username = str.substring(1).toLowerCase();
            TLRPC.Chat chat = this.currentChat;
            if ((chat != null && !TextUtils.isEmpty(chat.username) && username.equals(this.currentChat.username.toLowerCase())) || ((user = this.currentUser) != null && !TextUtils.isEmpty(user.username) && username.equals(this.currentUser.username.toLowerCase()))) {
                Bundle args = new Bundle();
                TLRPC.Chat chat2 = this.currentChat;
                if (chat2 != null) {
                    args.putLong(ChatReactionsEditActivity.KEY_CHAT_ID, chat2.id);
                } else {
                    TLRPC.User user2 = this.currentUser;
                    if (user2 != null) {
                        args.putLong("user_id", user2.id);
                        if (this.currentEncryptedChat != null) {
                            args.putLong("dialog_id", this.dialog_id);
                        }
                    }
                }
                ProfileActivity fragment2 = new ProfileActivity(args, this.avatarContainer.getSharedMediaPreloader());
                fragment2.setPlayProfileAnimation(1);
                fragment2.setChatInfo(this.chatInfo);
                fragment2.setUserInfo(this.userInfo);
                presentFragment(fragment2);
                return;
            }
            getMessagesController().openByUserName(username, this, 0);
        }
    }

    /* renamed from: lambda$openClickableLink$235$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1894lambda$openClickableLink$235$orgtelegramuiChatActivity(String str, CharacterStyle url, MessageObject messageObject, ChatMessageCell cell, int finalTimestamp, DialogInterface dialog, int which) {
        boolean isMedia = false;
        if (which == 0) {
            if (str.startsWith("video?")) {
                didPressMessageUrl(url, false, messageObject, cell);
            } else {
                openClickableLink(url, str, false, cell, messageObject);
            }
        } else if (which == 1) {
            if (str.startsWith("video?") && messageObject != null && !messageObject.scheduled) {
                MessageObject messageObject1 = messageObject;
                if (messageObject.isVideo() || messageObject.isRoundVideo() || messageObject.isVoice() || messageObject.isMusic()) {
                    isMedia = true;
                }
                if (!isMedia && messageObject.replyMessageObject != null) {
                    messageObject1 = messageObject.replyMessageObject;
                }
                long dialogId = messageObject1.getDialogId();
                int messageId = messageObject1.getId();
                String link = null;
                if (messageObject1.messageOwner.fwd_from != null) {
                    if (messageObject1.messageOwner.fwd_from.saved_from_peer != null) {
                        dialogId = MessageObject.getPeerId(messageObject1.messageOwner.fwd_from.saved_from_peer);
                        messageId = messageObject1.messageOwner.fwd_from.saved_from_msg_id;
                    } else if (messageObject1.messageOwner.fwd_from.from_id != null) {
                        dialogId = MessageObject.getPeerId(messageObject1.messageOwner.fwd_from.from_id);
                        messageId = messageObject1.messageOwner.fwd_from.channel_post;
                    }
                }
                if (DialogObject.isChatDialog(dialogId)) {
                    TLRPC.Chat currentChat = MessagesController.getInstance(this.currentAccount).getChat(Long.valueOf(-dialogId));
                    if (currentChat != null && currentChat.username != null) {
                        link = "https://t.me/" + currentChat.username + "/" + messageId + "?t=" + finalTimestamp;
                    }
                } else {
                    TLRPC.User user = MessagesController.getInstance(this.currentAccount).getUser(Long.valueOf(dialogId));
                    if (user != null && user.username != null) {
                        link = "https://t.me/" + user.username + "/" + messageId + "?t=" + finalTimestamp;
                    }
                }
                if (link == null) {
                    return;
                }
                AndroidUtilities.addToClipboard(link);
            } else {
                AndroidUtilities.addToClipboard(str);
            }
            if (str.startsWith("@")) {
                this.undoView.showWithAction(0L, 56, (Runnable) null);
            } else if (str.startsWith("#") || str.startsWith("$")) {
                this.undoView.showWithAction(0L, 57, (Runnable) null);
            } else {
                this.undoView.showWithAction(0L, 59, (Runnable) null);
            }
        }
    }

    public static /* synthetic */ void lambda$openClickableLink$236(ChatMessageCell cell, DialogInterface di) {
        if (cell != null) {
            cell.resetPressedLink(-1);
        }
    }

    public void processExternalUrl(int type, String url, boolean forceAlert) {
        boolean z;
        boolean z2 = false;
        boolean z3 = true;
        try {
            Uri uri = Uri.parse(url);
            String host = uri.getHost() != null ? uri.getHost().toLowerCase() : "";
            if ((this.currentEncryptedChat == null || getMessagesController().secretWebpagePreview == 1) && getMessagesController().authDomains.contains(host)) {
                SendMessagesHelper sendMessagesHelper = getSendMessagesHelper();
                if (type != 0 && type != 2) {
                    z = false;
                    sendMessagesHelper.requestUrlAuth(url, this, z);
                    return;
                }
                z = true;
                sendMessagesHelper.requestUrlAuth(url, this, z);
                return;
            }
        } catch (Exception e) {
            FileLog.e(e);
        }
        if (forceAlert || AndroidUtilities.shouldShowUrlInAlert(url)) {
            if (type == 0 || type == 2) {
                AlertsCreator.showOpenUrlAlert(this, url, true, true, true, this.themeDelegate);
            } else if (type == 1) {
                AlertsCreator.showOpenUrlAlert(this, url, true, true, false, this.themeDelegate);
            }
        } else if (type == 0) {
            Browser.openUrl(getParentActivity(), url);
        } else if (type == 1) {
            Activity parentActivity = getParentActivity();
            if (this.inlineReturn != 0) {
                z3 = false;
            }
            Browser.openUrl((Context) parentActivity, url, z3, false);
        } else if (type == 2) {
            Activity parentActivity2 = getParentActivity();
            if (this.inlineReturn == 0) {
                z2 = true;
            }
            Browser.openUrl(parentActivity2, url, z2);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r1v1 */
    /* JADX WARN: Type inference failed for: r1v27 */
    /* JADX WARN: Type inference failed for: r1v31 */
    /* JADX WARN: Type inference failed for: r1v34 */
    /* JADX WARN: Type inference failed for: r1v38 */
    /* JADX WARN: Type inference failed for: r1v48 */
    /* JADX WARN: Type inference failed for: r1v50 */
    /* JADX WARN: Type inference failed for: r1v51 */
    /* JADX WARN: Type inference failed for: r1v52 */
    /* JADX WARN: Type inference failed for: r1v53 */
    public void didPressMessageUrl(CharacterStyle url, boolean longPress, MessageObject messageObject, final ChatMessageCell cell) {
        MessageObject messageObject2;
        TLRPC.WebPage webPage;
        ChatMessageCell cell2;
        MessageObject messageObject3 = messageObject;
        if (url != null && getParentActivity() != null) {
            ?? r1 = 1;
            boolean z = true;
            ?? r12 = 1;
            int i = 0;
            boolean noforwards = getMessagesController().isChatNoForwards(this.currentChat) || !(messageObject3 == null || messageObject3.messageOwner == null || !messageObject3.messageOwner.noforwards);
            if (url instanceof URLSpanMono) {
                if (!noforwards) {
                    ((URLSpanMono) url).copyToClipboard();
                    getUndoView().showWithAction(0L, 58, (Runnable) null);
                }
                if (longPress && cell != null) {
                    cell.resetPressedLink(-1);
                }
            } else if (url instanceof URLSpanUserMention) {
                TLRPC.User user = getMessagesController().getUser(Utilities.parseLong(((URLSpanUserMention) url).getURL()));
                if (user != null) {
                    MessagesController.openChatOrProfileWith(user, null, this, 0, false);
                }
                if (longPress && cell != null) {
                    cell.resetPressedLink(-1);
                }
            } else if (!(url instanceof URLSpanNoUnderline)) {
                final String urlFinal = ((URLSpan) url).getURL();
                if (longPress) {
                    BottomSheet.Builder builder = new BottomSheet.Builder((Context) getParentActivity(), false, (Theme.ResourcesProvider) this.themeDelegate);
                    String formattedUrl = urlFinal;
                    try {
                        formattedUrl = URLDecoder.decode(urlFinal.replaceAll("\\+", "%2b"), "UTF-8");
                    } catch (Exception e) {
                    }
                    builder.setTitle(formattedUrl);
                    builder.setTitleMultipleLines(true);
                    builder.setItems(noforwards ? new CharSequence[]{LocaleController.getString("Open", R.string.Open)} : new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda187
                        @Override // android.content.DialogInterface.OnClickListener
                        public final void onClick(DialogInterface dialogInterface, int i2) {
                            ChatActivity.this.m1855lambda$didPressMessageUrl$243$orgtelegramuiChatActivity(urlFinal, dialogInterface, i2);
                        }
                    });
                    builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda198
                        @Override // android.content.DialogInterface.OnDismissListener
                        public final void onDismiss(DialogInterface dialogInterface) {
                            ChatActivity.lambda$didPressMessageUrl$244(ChatMessageCell.this, dialogInterface);
                        }
                    });
                    showDialog(builder.create());
                    return;
                }
                boolean forceAlert = url instanceof URLSpanReplacement;
                if (((url instanceof URLSpanReplacement) && (urlFinal == null || !urlFinal.startsWith(MailTo.MAILTO_SCHEME))) || AndroidUtilities.shouldShowUrlInAlert(urlFinal)) {
                    if (messageObject3 != null) {
                        i = messageObject.getId();
                    }
                    if (openLinkInternally(urlFinal, i)) {
                        return;
                    }
                    forceAlert = true;
                } else {
                    if (messageObject3 != null && (messageObject3.messageOwner.media instanceof TLRPC.TL_messageMediaWebPage) && messageObject3.messageOwner.media.webpage != null && messageObject3.messageOwner.media.webpage.cached_page != null) {
                        String lowerUrl = urlFinal.toLowerCase();
                        String lowerUrl2 = messageObject3.messageOwner.media.webpage.url.toLowerCase();
                        if ((lowerUrl.contains("telegram.org/blog") || Browser.isTelegraphUrl(lowerUrl, false) || lowerUrl.contains("t.me/iv")) && (lowerUrl.contains(lowerUrl2) || lowerUrl2.contains(lowerUrl))) {
                            ArticleViewer.getInstance().setParentActivity(getParentActivity(), this);
                            ArticleViewer.getInstance().open(messageObject3);
                            return;
                        }
                    }
                    if (messageObject3 != null) {
                        i = messageObject.getId();
                    }
                    if (openLinkInternally(urlFinal, i)) {
                        return;
                    }
                }
                if (Browser.urlMustNotHaveConfirmation(urlFinal)) {
                    forceAlert = false;
                }
                processExternalUrl(2, urlFinal, forceAlert);
            } else {
                String str = ((URLSpanNoUnderline) url).getURL();
                if (messageObject3 != null && str.startsWith("/")) {
                    if (URLSpanBotCommand.enabled) {
                        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                        TLRPC.Chat chat = this.currentChat;
                        if (chat == null || !chat.megagroup) {
                            z = false;
                        }
                        chatActivityEnterView.setCommand(messageObject3, str, longPress, z);
                        if (!longPress && this.chatActivityEnterView.getFieldText() == null) {
                            hideFieldPanel(false);
                        }
                    }
                    if (longPress && cell != null) {
                        cell.resetPressedLink(-1);
                    }
                } else if (messageObject3 != null && str.startsWith("video") && !longPress) {
                    int seekTime = Utilities.parseInt((CharSequence) str).intValue();
                    if (messageObject.isYouTubeVideo()) {
                        webPage = messageObject3.messageOwner.media.webpage;
                    } else if (messageObject3.replyMessageObject != null && messageObject3.replyMessageObject.isYouTubeVideo()) {
                        webPage = messageObject3.replyMessageObject.messageOwner.media.webpage;
                        messageObject3 = messageObject3.replyMessageObject;
                    } else {
                        webPage = null;
                    }
                    if (webPage != null) {
                        EmbedBottomSheet.show(getParentActivity(), messageObject3, this.photoViewerProvider, webPage.site_name, webPage.title, webPage.url, webPage.embed_url, webPage.embed_width, webPage.embed_height, seekTime, isKeyboardVisible());
                        return;
                    }
                    if (!messageObject3.isVideo() && messageObject3.replyMessageObject != null) {
                        SparseArray<MessageObject>[] sparseArrayArr = this.messagesDict;
                        if (messageObject3.replyMessageObject.getDialogId() == this.dialog_id) {
                            r12 = 0;
                        }
                        ?? r13 = r12 == true ? 1 : 0;
                        ?? r14 = r12 == true ? 1 : 0;
                        MessageObject obj = sparseArrayArr[r13].get(messageObject3.replyMessageObject.getId());
                        cell2 = null;
                        if (obj == null) {
                            messageObject3 = messageObject3.replyMessageObject;
                        } else {
                            messageObject3 = obj;
                        }
                    } else {
                        cell2 = cell;
                    }
                    messageObject3.forceSeekTo = seekTime / messageObject3.getDuration();
                    openPhotoViewerForMessage(cell2, messageObject3);
                } else if (messageObject3 == null || !str.startsWith("audio")) {
                    if (str.startsWith("card:")) {
                        final String number = str.substring(5);
                        final AlertDialog[] progressDialog = {new AlertDialog(getParentActivity(), 3, this.themeDelegate)};
                        TLRPC.TL_payments_getBankCardData req = new TLRPC.TL_payments_getBankCardData();
                        req.number = number;
                        final int requestId = getConnectionsManager().sendRequest(req, new RequestDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda145
                            @Override // org.telegram.tgnet.RequestDelegate
                            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                                ChatActivity.this.m1852lambda$didPressMessageUrl$240$orgtelegramuiChatActivity(progressDialog, number, cell, tLObject, tL_error);
                            }
                        }, null, null, 0, getMessagesController().webFileDatacenterId, 1, true);
                        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda113
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatActivity.this.m1854lambda$didPressMessageUrl$242$orgtelegramuiChatActivity(progressDialog, requestId, cell);
                            }
                        }, 500L);
                        return;
                    }
                    openClickableLink(url, str, longPress, cell, messageObject);
                } else {
                    int seekTime2 = Utilities.parseInt((CharSequence) str).intValue();
                    if (!messageObject.isMusic() && messageObject3.replyMessageObject != null) {
                        SparseArray<MessageObject>[] sparseArrayArr2 = this.messagesDict;
                        if (messageObject3.replyMessageObject.getDialogId() == this.dialog_id) {
                            r1 = 0;
                        }
                        ?? r15 = r1 == true ? 1 : 0;
                        ?? r16 = r1 == true ? 1 : 0;
                        messageObject2 = sparseArrayArr2[r15].get(messageObject3.replyMessageObject.getId());
                    } else {
                        messageObject2 = messageObject3;
                    }
                    float progress = seekTime2 / messageObject2.getDuration();
                    MediaController mediaController = getMediaController();
                    if (mediaController.isPlayingMessage(messageObject2)) {
                        messageObject2.audioProgress = progress;
                        mediaController.seekToProgress(messageObject2, progress);
                        if (mediaController.isMessagePaused()) {
                            mediaController.playMessage(messageObject2);
                        }
                    } else {
                        messageObject2.forceSeekTo = seekTime2 / messageObject2.getDuration();
                        mediaController.playMessage(messageObject2);
                    }
                    if (longPress && cell != null) {
                        cell.resetPressedLink(-1);
                    }
                }
            }
        }
    }

    /* renamed from: lambda$didPressMessageUrl$240$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1852lambda$didPressMessageUrl$240$orgtelegramuiChatActivity(final AlertDialog[] progressDialog, final String number, final ChatMessageCell finalCell, final TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda114
            @Override // java.lang.Runnable
            public final void run() {
                ChatActivity.this.m1851lambda$didPressMessageUrl$239$orgtelegramuiChatActivity(progressDialog, response, number, finalCell);
            }
        });
    }

    /* renamed from: lambda$didPressMessageUrl$239$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1851lambda$didPressMessageUrl$239$orgtelegramuiChatActivity(AlertDialog[] progressDialog, TLObject response, final String number, final ChatMessageCell finalCell) {
        try {
            progressDialog[0].dismiss();
        } catch (Throwable th) {
        }
        progressDialog[0] = null;
        if (response instanceof TLRPC.TL_payments_bankCardData) {
            if (getParentActivity() == null) {
                return;
            }
            final TLRPC.TL_payments_bankCardData data = (TLRPC.TL_payments_bankCardData) response;
            BottomSheet.Builder builder = new BottomSheet.Builder((Context) getParentActivity(), false, (Theme.ResourcesProvider) this.themeDelegate);
            ArrayList<CharSequence> arrayList = new ArrayList<>();
            int N = data.open_urls.size();
            for (int a = 0; a < N; a++) {
                arrayList.add(data.open_urls.get(a).name);
            }
            arrayList.add(LocaleController.getString("CopyCardNumber", R.string.CopyCardNumber));
            builder.setTitle(data.title);
            builder.setItems((CharSequence[]) arrayList.toArray(new CharSequence[0]), new DialogInterface.OnClickListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda193
                @Override // android.content.DialogInterface.OnClickListener
                public final void onClick(DialogInterface dialogInterface, int i) {
                    ChatActivity.this.m1850lambda$didPressMessageUrl$237$orgtelegramuiChatActivity(data, number, dialogInterface, i);
                }
            });
            builder.setOnPreDismissListener(new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda197
                @Override // android.content.DialogInterface.OnDismissListener
                public final void onDismiss(DialogInterface dialogInterface) {
                    ChatActivity.lambda$didPressMessageUrl$238(ChatMessageCell.this, dialogInterface);
                }
            });
            showDialog(builder.create());
        } else if (finalCell != null) {
            finalCell.resetPressedLink(-1);
        }
    }

    /* renamed from: lambda$didPressMessageUrl$237$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1850lambda$didPressMessageUrl$237$orgtelegramuiChatActivity(TLRPC.TL_payments_bankCardData data, String number, DialogInterface dialog, int which) {
        if (which < data.open_urls.size()) {
            Browser.openUrl((Context) getParentActivity(), data.open_urls.get(which).url, this.inlineReturn == 0, false);
            return;
        }
        AndroidUtilities.addToClipboard(number);
        Toast.makeText(ApplicationLoader.applicationContext, LocaleController.getString("CardNumberCopied", R.string.CardNumberCopied), 0).show();
    }

    public static /* synthetic */ void lambda$didPressMessageUrl$238(ChatMessageCell finalCell, DialogInterface di) {
        if (finalCell != null) {
            finalCell.resetPressedLink(-1);
        }
    }

    /* renamed from: lambda$didPressMessageUrl$242$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1854lambda$didPressMessageUrl$242$orgtelegramuiChatActivity(AlertDialog[] progressDialog, final int requestId, final ChatMessageCell finalCell) {
        if (progressDialog[0] == null) {
            return;
        }
        progressDialog[0].setOnCancelListener(new DialogInterface.OnCancelListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda155
            @Override // android.content.DialogInterface.OnCancelListener
            public final void onCancel(DialogInterface dialogInterface) {
                ChatActivity.this.m1853lambda$didPressMessageUrl$241$orgtelegramuiChatActivity(requestId, finalCell, dialogInterface);
            }
        });
        showDialog(progressDialog[0]);
    }

    /* renamed from: lambda$didPressMessageUrl$241$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1853lambda$didPressMessageUrl$241$orgtelegramuiChatActivity(int requestId, ChatMessageCell finalCell, DialogInterface dialog) {
        getConnectionsManager().cancelRequest(requestId, true);
        finalCell.resetPressedLink(-1);
    }

    /* renamed from: lambda$didPressMessageUrl$243$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1855lambda$didPressMessageUrl$243$orgtelegramuiChatActivity(String urlFinal, DialogInterface dialog, int which) {
        if (which == 0) {
            processExternalUrl(1, urlFinal, false);
        } else if (which == 1) {
            String url1 = urlFinal;
            boolean tel = false;
            boolean mail = false;
            if (url1.startsWith(MailTo.MAILTO_SCHEME)) {
                url1 = url1.substring(7);
                mail = true;
            } else if (url1.startsWith("tel:")) {
                url1 = url1.substring(4);
                tel = true;
            }
            AndroidUtilities.addToClipboard(url1);
            if (mail) {
                this.undoView.showWithAction(0L, 80, (Runnable) null);
            } else if (tel) {
                this.undoView.showWithAction(0L, 60, (Runnable) null);
            } else {
                this.undoView.showWithAction(0L, 59, (Runnable) null);
            }
        }
    }

    public static /* synthetic */ void lambda$didPressMessageUrl$244(ChatMessageCell finalCell, DialogInterface di) {
        if (finalCell != null) {
            finalCell.resetPressedLink(-1);
        }
    }

    void openPhotoViewerForMessage(ChatMessageCell cell, MessageObject message) {
        ChatMessageCell cell2;
        AnimatedFileDrawable animation;
        Bitmap bitmap;
        if (cell == null) {
            int count = this.chatListView.getChildCount();
            for (int a = 0; a < count; a++) {
                View child = this.chatListView.getChildAt(a);
                if (child instanceof ChatMessageCell) {
                    ChatMessageCell messageCell = (ChatMessageCell) child;
                    if (messageCell.getMessageObject().equals(message)) {
                        cell2 = messageCell;
                        break;
                    }
                }
            }
        }
        cell2 = cell;
        if (message.isVideo()) {
            sendSecretMessageRead(message, true);
        }
        PhotoViewer.getInstance().setParentActivity(getParentActivity(), this.themeDelegate);
        MessageObject playingObject = MediaController.getInstance().getPlayingMessageObject();
        if (cell2 != null && playingObject != null && playingObject.isVideo()) {
            getFileLoader().setLoadingVideoForPlayer(playingObject.getDocument(), false);
            if (playingObject.equals(message) && (animation = cell2.getPhotoImage().getAnimation()) != null && this.videoTextureView != null && this.videoPlayerContainer.getTag() != null && (bitmap = animation.getAnimatedBitmap()) != null) {
                try {
                    Bitmap src = this.videoTextureView.getBitmap(bitmap.getWidth(), bitmap.getHeight());
                    Canvas canvas = new Canvas(bitmap);
                    canvas.drawBitmap(src, 0.0f, 0.0f, (Paint) null);
                    src.recycle();
                } catch (Throwable e) {
                    FileLog.e(e);
                }
            }
            MediaController.getInstance().cleanupPlayer(true, true, false, playingObject.equals(message));
        }
        if (this.chatMode == 1 && (message.isVideo() || message.type == 1)) {
            PhotoViewer.getInstance().setParentChatActivity(this);
            ArrayList<MessageObject> arrayList = new ArrayList<>();
            int N = this.messages.size();
            for (int a2 = 0; a2 < N; a2++) {
                MessageObject m = this.messages.get(a2);
                if (m.isVideo() || m.type == 1) {
                    arrayList.add(0, m);
                }
            }
            PhotoViewer.getInstance().openPhoto(arrayList, arrayList.indexOf(message), this.dialog_id, 0L, this.photoViewerProvider);
        } else {
            PhotoViewer photoViewer = PhotoViewer.getInstance();
            long j = 0;
            long j2 = message.type != 0 ? this.dialog_id : 0L;
            if (message.type != 0) {
                j = this.mergeDialogId;
            }
            photoViewer.openPhoto(message, this, j2, j, this.photoViewerProvider);
        }
        hideHints(false);
        MediaController.getInstance().resetGoingToShowMessageObject();
    }

    public void updateMessageListAccessibilityVisibility() {
        ActionBarPopupWindow actionBarPopupWindow;
        if (this.currentEncryptedChat == null && Build.VERSION.SDK_INT >= 19) {
            RecyclerListView recyclerListView = this.chatListView;
            MentionsContainerView mentionsContainerView = this.mentionContainer;
            recyclerListView.setImportantForAccessibility(((mentionsContainerView == null || !mentionsContainerView.isOpen()) && ((actionBarPopupWindow = this.scrimPopupWindow) == null || !actionBarPopupWindow.isShowing())) ? 0 : 4);
        }
    }

    public void markSponsoredAsRead(MessageObject object) {
        if (!object.isSponsored() || object.viewsReloaded) {
            return;
        }
        object.viewsReloaded = true;
        TLRPC.TL_channels_viewSponsoredMessage req = new TLRPC.TL_channels_viewSponsoredMessage();
        req.channel = MessagesController.getInputChannel(this.currentChat);
        req.random_id = object.sponsoredId;
        getConnectionsManager().sendRequest(req, ChatActivity$$ExternalSyntheticLambda147.INSTANCE);
        getMessagesController().markSponsoredAsRead(this.dialog_id, object);
    }

    public static /* synthetic */ void lambda$markSponsoredAsRead$245(TLObject response, TLRPC.TL_error error) {
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean canBeginSlide() {
        return this.swipeBackEnabled && this.chatActivityEnterView.swipeToBackEnabled() && this.pullingDownOffset == 0.0f;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean isSwipeBackEnabled(MotionEvent event) {
        return this.swipeBackEnabled;
    }

    /* loaded from: classes4.dex */
    public class ChatActivityAdapter extends RecyclerAnimationScrollHelper.AnimatableAdapter {
        private boolean isBot;
        public boolean isFrozen;
        private Context mContext;
        private int messagesEndRow;
        private int messagesStartRow;
        private int rowCount;
        private int botInfoRow = -5;
        private int botInfoEmptyRow = -5;
        private int loadingUpRow = -5;
        private int loadingDownRow = -5;
        public ArrayList<MessageObject> frozenMessages = new ArrayList<>();

        static /* synthetic */ int access$2000(ChatActivityAdapter x0) {
            return x0.messagesStartRow;
        }

        static /* synthetic */ int access$21300(ChatActivityAdapter x0) {
            return x0.messagesEndRow;
        }

        static /* synthetic */ int access$30300(ChatActivityAdapter x0) {
            return x0.botInfoRow;
        }

        static /* synthetic */ int access$35100(ChatActivityAdapter x0) {
            return x0.loadingDownRow;
        }

        static /* synthetic */ int access$35200(ChatActivityAdapter x0) {
            return x0.loadingUpRow;
        }

        static /* synthetic */ void access$35300(ChatActivityAdapter x0) {
            x0.updateRowsInternal();
        }

        public ChatActivityAdapter(Context context) {
            ChatActivity.this = this$0;
            this.mContext = context;
            this.isBot = this$0.currentUser != null && this$0.currentUser.bot;
            setHasStableIds(true);
        }

        public void updateRowsSafe() {
            int prevRowCount = this.rowCount;
            int prevBotInfoRow = this.botInfoRow;
            int prevLoadingUpRow = this.loadingUpRow;
            int prevLoadingDownRow = this.loadingDownRow;
            int prevMessagesStartRow = this.messagesStartRow;
            int prevMessagesEndRow = this.messagesEndRow;
            updateRowsInternal();
            if (prevRowCount != this.rowCount || prevBotInfoRow != this.botInfoRow || prevLoadingUpRow != this.loadingUpRow || prevLoadingDownRow != this.loadingDownRow || prevMessagesStartRow != this.messagesStartRow || prevMessagesEndRow != this.messagesEndRow) {
                notifyDataSetChanged(false);
            }
        }

        public void updateRowsInternal() {
            this.rowCount = 0;
            ArrayList<MessageObject> messages = this.isFrozen ? this.frozenMessages : ChatActivity.this.messages;
            if (!messages.isEmpty()) {
                if ((!ChatActivity.this.forwardEndReached[0] || (ChatActivity.this.mergeDialogId != 0 && !ChatActivity.this.forwardEndReached[1])) && !ChatActivity.this.hideForwardEndReached) {
                    int i = this.rowCount;
                    this.rowCount = i + 1;
                    this.loadingDownRow = i;
                } else {
                    this.loadingDownRow = -5;
                }
                int i2 = this.rowCount;
                this.messagesStartRow = i2;
                int size = i2 + messages.size();
                this.rowCount = size;
                this.messagesEndRow = size;
                if ((UserObject.isReplyUser(ChatActivity.this.currentUser) || (ChatActivity.this.currentUser != null && ChatActivity.this.currentUser.bot && !MessagesController.isSupportUser(ChatActivity.this.currentUser) && ChatActivity.this.chatMode == 0)) && ChatActivity.this.endReached[0]) {
                    int i3 = this.rowCount;
                    this.rowCount = i3 + 1;
                    this.botInfoRow = i3;
                } else {
                    this.botInfoRow = -5;
                }
                if (!ChatActivity.this.endReached[0] || (ChatActivity.this.mergeDialogId != 0 && !ChatActivity.this.endReached[1])) {
                    int i4 = this.rowCount;
                    this.rowCount = i4 + 1;
                    this.loadingUpRow = i4;
                    return;
                }
                this.loadingUpRow = -5;
                return;
            }
            this.loadingUpRow = -5;
            this.loadingDownRow = -5;
            this.messagesStartRow = -5;
            this.messagesEndRow = -5;
            if (UserObject.isReplyUser(ChatActivity.this.currentUser) || (ChatActivity.this.currentUser != null && ChatActivity.this.currentUser.bot && !MessagesController.isSupportUser(ChatActivity.this.currentUser) && ChatActivity.this.chatMode == 0)) {
                int i5 = this.rowCount;
                this.rowCount = i5 + 1;
                this.botInfoRow = i5;
                return;
            }
            this.botInfoRow = -5;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public int getItemCount() {
            this.botInfoEmptyRow = -5;
            if (!ChatActivity.this.clearingHistory) {
                if (!ChatActivity.this.clearingHistory) {
                    return this.rowCount;
                }
                return 0;
            } else if (ChatActivity.this.currentUser == null || !ChatActivity.this.currentUser.bot || ChatActivity.this.chatMode != 0 || ((ChatActivity.this.botInfo.size() <= 0 || (((TLRPC.BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.id)).description == null && ((TLRPC.BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.id)).description_photo == null && ((TLRPC.BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.id)).description_document == null)) && !UserObject.isReplyUser(ChatActivity.this.currentUser))) {
                return 0;
            } else {
                this.botInfoEmptyRow = 0;
                return 1;
            }
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public long getItemId(int position) {
            if (!ChatActivity.this.clearingHistory || position != this.botInfoEmptyRow) {
                ArrayList<MessageObject> messages = this.isFrozen ? this.frozenMessages : ChatActivity.this.messages;
                int i = this.messagesStartRow;
                if (position >= i && position < this.messagesEndRow) {
                    return messages.get(position - i).stableId;
                }
                if (position == this.botInfoRow || position == this.botInfoEmptyRow) {
                    return 1L;
                }
                if (position == this.loadingUpRow) {
                    return 2L;
                }
                if (position == this.loadingDownRow) {
                    return 3L;
                }
                return 4L;
            }
            return 1L;
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            View view = null;
            if (viewType == 0) {
                if (!ChatActivity.this.chatMessageCellsCache.isEmpty()) {
                    view = (View) ChatActivity.this.chatMessageCellsCache.get(0);
                    ChatActivity.this.chatMessageCellsCache.remove(0);
                } else {
                    view = new ChatMessageCell(this.mContext, true, ChatActivity.this.themeDelegate);
                }
                ChatMessageCell chatMessageCell = (ChatMessageCell) view;
                chatMessageCell.setDelegate(new AnonymousClass1());
                if (ChatActivity.this.currentEncryptedChat == null) {
                    chatMessageCell.setAllowAssistant(true);
                }
            } else if (viewType == 1) {
                view = new ChatActionCell(this.mContext, true, ChatActivity.this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.2
                    @Override // org.telegram.ui.Cells.ChatActionCell, android.view.View
                    public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) {
                        super.onInitializeAccessibilityNodeInfo(info);
                        info.setVisibleToUser(true);
                    }
                };
                ((ChatActionCell) view).setInvalidateColors(true);
                ((ChatActionCell) view).setDelegate(new ChatActionCell.ChatActionCellDelegate() { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.3
                    @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
                    public /* synthetic */ void needOpenInviteLink(TLRPC.TL_chatInviteExported tL_chatInviteExported) {
                        ChatActionCell.ChatActionCellDelegate.CC.$default$needOpenInviteLink(this, tL_chatInviteExported);
                    }

                    @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
                    public void didClickImage(ChatActionCell cell) {
                        MessageObject message = cell.getMessageObject();
                        PhotoViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity(), ChatActivity.this.themeDelegate);
                        TLRPC.PhotoSize photoSize = FileLoader.getClosestPhotoSizeWithSize(message.photoThumbs, 640);
                        if (photoSize == null) {
                            PhotoViewer.getInstance().openPhoto(message, (ChatActivity) null, 0L, 0L, ChatActivity.this.photoViewerProvider);
                            return;
                        }
                        ImageLocation imageLocation = ImageLocation.getForPhoto(photoSize, message.messageOwner.action.photo);
                        PhotoViewer.getInstance().openPhoto(photoSize.location, imageLocation, ChatActivity.this.photoViewerProvider);
                    }

                    @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
                    public boolean didLongPress(ChatActionCell cell, float x, float y) {
                        return ChatActivity.this.createMenu(cell, false, false, x, y);
                    }

                    @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
                    public void needOpenUserProfile(long uid) {
                        if (uid < 0) {
                            Bundle args = new Bundle();
                            args.putLong(ChatReactionsEditActivity.KEY_CHAT_ID, -uid);
                            if (ChatActivity.this.getMessagesController().checkCanOpenChat(args, ChatActivity.this)) {
                                ChatActivity.this.presentFragment(new ChatActivity(args));
                            }
                        } else if (uid != ChatActivity.this.getUserConfig().getClientUserId()) {
                            Bundle args2 = new Bundle();
                            args2.putLong("user_id", uid);
                            if (ChatActivity.this.currentEncryptedChat != null && uid == ChatActivity.this.currentUser.id) {
                                args2.putLong("dialog_id", ChatActivity.this.dialog_id);
                            }
                            ProfileActivity fragment = new ProfileActivity(args2);
                            fragment.setPlayProfileAnimation((ChatActivity.this.currentUser == null || ChatActivity.this.currentUser.id != uid) ? 0 : 1);
                            ChatActivity.this.presentFragment(fragment);
                        }
                    }

                    @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
                    public void didPressReplyMessage(ChatActionCell cell, int id) {
                        MessageObject messageObject = cell.getMessageObject();
                        ChatActivity.this.scrollToMessageId(id, messageObject.getId(), true, messageObject.getDialogId() == ChatActivity.this.mergeDialogId ? 1 : 0, true, 0);
                    }

                    @Override // org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate
                    public void didPressBotButton(MessageObject messageObject, TLRPC.KeyboardButton button) {
                        if (ChatActivity.this.getParentActivity() != null) {
                            if (ChatActivity.this.bottomOverlayChat.getVisibility() == 0 && !(button instanceof TLRPC.TL_keyboardButtonSwitchInline) && !(button instanceof TLRPC.TL_keyboardButtonCallback) && !(button instanceof TLRPC.TL_keyboardButtonGame) && !(button instanceof TLRPC.TL_keyboardButtonUrl) && !(button instanceof TLRPC.TL_keyboardButtonBuy) && !(button instanceof TLRPC.TL_keyboardButtonUrlAuth) && !(button instanceof TLRPC.TL_keyboardButtonUserProfile)) {
                                return;
                            }
                            ChatActivity.this.chatActivityEnterView.didPressedBotButton(button, messageObject, messageObject);
                        }
                    }
                });
            } else if (viewType == 2) {
                view = new ChatUnreadCell(this.mContext, ChatActivity.this.themeDelegate);
            } else if (viewType == 3) {
                view = new BotHelpCell(this.mContext, ChatActivity.this.themeDelegate);
                ((BotHelpCell) view).setDelegate(new BotHelpCell.BotHelpCellDelegate() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$$ExternalSyntheticLambda0
                    @Override // org.telegram.ui.Cells.BotHelpCell.BotHelpCellDelegate
                    public final void didPressUrl(String str) {
                        ChatActivity.ChatActivityAdapter.this.m2016x61aaae70(str);
                    }
                });
            } else if (viewType == 4) {
                view = new ChatLoadingCell(this.mContext, ChatActivity.this.contentView, ChatActivity.this.themeDelegate);
            }
            view.setLayoutParams(new RecyclerView.LayoutParams(-1, -2));
            return new RecyclerListView.Holder(view);
        }

        /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$1 */
        /* loaded from: classes4.dex */
        public class AnonymousClass1 implements ChatMessageCell.ChatMessageCellDelegate {
            AnonymousClass1() {
                ChatActivityAdapter.this = this$1;
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressHint(ChatMessageCell cell, int type) {
                ChatMessageCell cell2;
                boolean z = true;
                if (type == 0) {
                    TLRPC.TL_messageMediaPoll media = (TLRPC.TL_messageMediaPoll) cell.getMessageObject().messageOwner.media;
                    ChatActivity.this.showPollSolution(cell.getMessageObject(), media.results);
                } else if (type == 1) {
                    MessageObject messageObject = cell.getMessageObject();
                    if (messageObject.messageOwner.fwd_from == null || TextUtils.isEmpty(messageObject.messageOwner.fwd_from.psa_type)) {
                        return;
                    }
                    CharSequence text = LocaleController.getString("PsaMessageInfo_" + messageObject.messageOwner.fwd_from.psa_type);
                    if (TextUtils.isEmpty(text)) {
                        text = LocaleController.getString("PsaMessageInfoDefault", R.string.PsaMessageInfoDefault);
                    }
                    SpannableStringBuilder stringBuilder = new SpannableStringBuilder(text);
                    MessageObject.addLinks(false, stringBuilder);
                    MessageObject.GroupedMessages group = cell.getCurrentMessagesGroup();
                    if (group != null) {
                        int a = 0;
                        int N = group.posArray.size();
                        while (true) {
                            if (a >= N) {
                                break;
                            }
                            MessageObject.GroupedMessagePosition pos = group.posArray.get(a);
                            if ((pos.flags & (z ? 1 : 0)) == 0) {
                                a++;
                                z = true;
                            } else {
                                MessageObject m = group.messages.get(a);
                                if (m != messageObject) {
                                    messageObject = m;
                                    int count = ChatActivity.this.chatListView.getChildCount();
                                    cell2 = cell;
                                    for (int b = 0; b < count; b++) {
                                        View view = ChatActivity.this.chatListView.getChildAt(b);
                                        if (view instanceof ChatMessageCell) {
                                            ChatMessageCell c = (ChatMessageCell) view;
                                            if (messageObject.equals(c.getMessageObject())) {
                                                cell2 = c;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    cell2 = cell;
                    z = true;
                    ChatActivity.this.showInfoHint(messageObject, stringBuilder, 1);
                    cell2.showHintButton(false, z, type);
                }
                cell2 = cell;
                cell2.showHintButton(false, z, type);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean shouldDrawThreadProgress(ChatMessageCell cell) {
                MessageObject message;
                MessageObject.GroupedMessages group = cell.getCurrentMessagesGroup();
                if (group != null && !group.messages.isEmpty()) {
                    message = group.messages.get(0);
                } else {
                    message = cell.getMessageObject();
                }
                return message != null && message.getId() == ChatActivity.this.commentLoadingMessageId;
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressSideButton(ChatMessageCell cell) {
                ArrayList<MessageObject> arrayList;
                MessageObject.GroupedMessages groupedMessages;
                if (ChatActivity.this.getParentActivity() == null) {
                    return;
                }
                if (ChatActivity.this.chatActivityEnterView != null) {
                    ChatActivity.this.chatActivityEnterView.closeKeyboard();
                }
                MessageObject messageObject = cell.getMessageObject();
                if (ChatActivity.this.chatMode == 2) {
                    ChatActivity.this.chatActivityDelegate.openReplyMessage(messageObject.getId());
                    ChatActivity.this.finishFragment();
                } else if ((UserObject.isReplyUser(ChatActivity.this.currentUser) || UserObject.isUserSelf(ChatActivity.this.currentUser)) && messageObject.messageOwner.fwd_from.saved_from_peer != null) {
                    if (!UserObject.isReplyUser(ChatActivity.this.currentUser) || messageObject.messageOwner.reply_to == null || messageObject.messageOwner.reply_to.reply_to_top_id == 0) {
                        ChatActivity.this.openOriginalReplyChat(messageObject);
                    } else {
                        ChatActivity.this.openDiscussionMessageChat(messageObject.messageOwner.reply_to.reply_to_peer_id.channel_id, null, messageObject.messageOwner.reply_to.reply_to_top_id, 0L, -1, messageObject.messageOwner.fwd_from.saved_from_msg_id, messageObject);
                    }
                } else {
                    ArrayList<MessageObject> arrayList2 = null;
                    if (messageObject.getGroupId() != 0 && (groupedMessages = (MessageObject.GroupedMessages) ChatActivity.this.groupedMessagesMap.get(messageObject.getGroupId())) != null) {
                        arrayList2 = groupedMessages.messages;
                    }
                    if (arrayList2 != null) {
                        arrayList = arrayList2;
                    } else {
                        ArrayList<MessageObject> arrayList3 = new ArrayList<>();
                        arrayList3.add(messageObject);
                        arrayList = arrayList3;
                    }
                    ChatActivity.this.showDialog(new ShareAlert(ChatActivityAdapter.this.mContext, ChatActivity.this, arrayList, null, null, ChatObject.isChannel(ChatActivity.this.currentChat), null, null, false, false, ChatActivity.this.themeDelegate) { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.1.1
                        @Override // org.telegram.ui.Components.ShareAlert, org.telegram.ui.ActionBar.BottomSheet
                        public void dismissInternal() {
                            super.dismissInternal();
                            AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ChatActivity.this.classGuid);
                            if (ChatActivity.this.chatActivityEnterView.getVisibility() == 0) {
                                ChatActivity.this.fragmentView.requestLayout();
                            }
                        }

                        @Override // org.telegram.ui.Components.ShareAlert
                        protected void onSend(LongSparseArray<TLRPC.Dialog> dids, int count) {
                            if (dids.size() == 1) {
                                ChatActivity.this.undoView.showWithAction(dids.valueAt(0).id, 53, Integer.valueOf(count));
                            } else {
                                ChatActivity.this.undoView.showWithAction(0L, 53, Integer.valueOf(count), Integer.valueOf(dids.size()), (Runnable) null, (Runnable) null);
                            }
                        }
                    });
                    AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ChatActivity.this.classGuid);
                    ChatActivity.this.fragmentView.requestLayout();
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean needPlayMessage(MessageObject messageObject) {
                if (messageObject.isVoice() || messageObject.isRoundVideo()) {
                    boolean result = MediaController.getInstance().playMessage(messageObject);
                    MediaController.getInstance().setVoiceMessagesPlaylist(result ? ChatActivity.this.createVoiceMessagesPlaylist(messageObject, false) : null, false);
                    return result;
                } else if (!messageObject.isMusic()) {
                    return false;
                } else {
                    return MediaController.getInstance().setPlaylist(ChatActivity.this.messages, messageObject, ChatActivity.this.mergeDialogId);
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void videoTimerReached() {
                ChatActivity.this.showNoSoundHint();
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressTime(ChatMessageCell cell) {
                ChatActivity.this.undoView.showWithAction(ChatActivity.this.dialog_id, 47, (Runnable) null);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressChannelAvatar(ChatMessageCell cell, TLRPC.Chat chat, int postId, float touchX, float touchY) {
                if (chat != null) {
                    if (ChatActivity.this.actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                        ChatActivity.this.processRowSelect(cell, true, touchX, touchY);
                    } else {
                        openChat(cell, chat, postId);
                    }
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressHiddenForward(ChatMessageCell cell) {
                if (!cell.getMessageObject().isImportedForward()) {
                    ChatActivity.this.showForwardHint(cell);
                } else {
                    didPressTime(cell);
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressOther(ChatMessageCell cell, float otherX, float otherY) {
                MessageObject messageObject = cell.getMessageObject();
                if (messageObject.type != 16) {
                    ChatActivity.this.createMenu(cell, true, false, otherX, otherY, messageObject.isMusic());
                } else if (ChatActivity.this.currentUser != null) {
                    VoIPHelper.startCall(ChatActivity.this.currentUser, messageObject.isVideoCall(), ChatActivity.this.userInfo != null && ChatActivity.this.userInfo.video_calls_available, ChatActivity.this.getParentActivity(), ChatActivity.this.getMessagesController().getUserFull(ChatActivity.this.currentUser.id), ChatActivity.this.getAccountInstance());
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressUserAvatar(ChatMessageCell cell, TLRPC.User user, float touchX, float touchY) {
                if (ChatActivity.this.actionBar.isActionModeShowed() || ChatActivity.this.reportType >= 0) {
                    ChatActivity.this.processRowSelect(cell, true, touchX, touchY);
                } else {
                    openProfile(user);
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean didLongPressUserAvatar(final ChatMessageCell cell, final TLRPC.User user, float touchX, float touchY) {
                AvatarPreviewer.Data data;
                if (isAvatarPreviewerEnabled()) {
                    boolean enableMention = ChatActivity.this.currentChat != null && (ChatActivity.this.bottomOverlayChat == null || ChatActivity.this.bottomOverlayChat.getVisibility() != 0) && (ChatActivity.this.bottomOverlay == null || ChatActivity.this.bottomOverlay.getVisibility() != 0);
                    AvatarPreviewer.MenuItem[] menuItems = new AvatarPreviewer.MenuItem[(enableMention ? 1 : 0) + 2];
                    menuItems[0] = AvatarPreviewer.MenuItem.OPEN_PROFILE;
                    menuItems[1] = AvatarPreviewer.MenuItem.SEND_MESSAGE;
                    if (enableMention) {
                        menuItems[2] = AvatarPreviewer.MenuItem.MENTION;
                    }
                    TLRPC.UserFull userFull = ChatActivity.this.getMessagesController().getUserFull(user.id);
                    if (userFull == null) {
                        data = AvatarPreviewer.Data.of(user, ChatActivity.this.classGuid, menuItems);
                    } else {
                        data = AvatarPreviewer.Data.of(userFull, menuItems);
                    }
                    if (AvatarPreviewer.canPreview(data)) {
                        AvatarPreviewer.getInstance().show((ViewGroup) ChatActivity.this.fragmentView, data, new AvatarPreviewer.Callback() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$1$$ExternalSyntheticLambda3
                            @Override // org.telegram.ui.AvatarPreviewer.Callback
                            public final void onMenuClick(AvatarPreviewer.MenuItem menuItem) {
                                ChatActivity.ChatActivityAdapter.AnonymousClass1.this.m2019x21940bbd(cell, user, menuItem);
                            }
                        });
                        return true;
                    }
                }
                return false;
            }

            /* renamed from: lambda$didLongPressUserAvatar$0$org-telegram-ui-ChatActivity$ChatActivityAdapter$1 */
            public /* synthetic */ void m2019x21940bbd(ChatMessageCell cell, TLRPC.User user, AvatarPreviewer.MenuItem item) {
                switch (AnonymousClass115.$SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[item.ordinal()]) {
                    case 1:
                        openProfile(user);
                        return;
                    case 2:
                    case 3:
                    default:
                        return;
                    case 4:
                        openDialog(cell, user);
                        return;
                    case 5:
                        appendMention(user);
                        return;
                }
            }

            private void appendMention(TLRPC.User user) {
                SpannableStringBuilder sb;
                if (ChatActivity.this.chatActivityEnterView != null) {
                    CharSequence text = ChatActivity.this.chatActivityEnterView.getFieldText();
                    if (text != null) {
                        sb = new SpannableStringBuilder(text);
                        if (text.charAt(text.length() - 1) != ' ') {
                            sb.append((CharSequence) " ");
                        }
                    } else {
                        sb = new SpannableStringBuilder();
                    }
                    if (sb.length() > 0 && sb.charAt(sb.length() - 1) != ' ') {
                        sb.append(' ');
                    }
                    if (user.username != null) {
                        sb.append((CharSequence) "@").append((CharSequence) user.username).append((CharSequence) " ");
                    } else {
                        String name = UserObject.getFirstName(user, false);
                        Spannable spannable = new SpannableString(name + " ");
                        spannable.setSpan(new URLSpanUserMention("" + user.id, 3), 0, spannable.length(), 33);
                        sb.append((CharSequence) spannable);
                    }
                    ChatActivity.this.chatActivityEnterView.setFieldText(sb);
                    AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$1$$ExternalSyntheticLambda0
                        @Override // java.lang.Runnable
                        public final void run() {
                            ChatActivity.ChatActivityAdapter.AnonymousClass1.this.m2017x32941312();
                        }
                    }, 200L);
                }
            }

            /* renamed from: lambda$appendMention$1$org-telegram-ui-ChatActivity$ChatActivityAdapter$1 */
            public /* synthetic */ void m2017x32941312() {
                ChatActivity.this.chatActivityEnterView.openKeyboard();
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean didLongPressChannelAvatar(final ChatMessageCell cell, final TLRPC.Chat chat, int postId, float touchX, float touchY) {
                AvatarPreviewer.Data data;
                if (isAvatarPreviewerEnabled()) {
                    AvatarPreviewer.MenuItem[] menuItems = {AvatarPreviewer.MenuItem.OPEN_PROFILE};
                    if (ChatActivity.this.currentChat == null || ChatActivity.this.currentChat.id != chat.id || ChatActivity.this.isThreadChat()) {
                        menuItems = (AvatarPreviewer.MenuItem[]) Arrays.copyOf(menuItems, 2);
                        menuItems[1] = chat.broadcast ? AvatarPreviewer.MenuItem.OPEN_CHANNEL : AvatarPreviewer.MenuItem.OPEN_GROUP;
                    }
                    TLRPC.ChatFull chatFull = ChatActivity.this.getMessagesController().getChatFull(chat.id);
                    if (chatFull == null) {
                        data = AvatarPreviewer.Data.of(chat, ChatActivity.this.classGuid, menuItems);
                    } else {
                        data = AvatarPreviewer.Data.of(chat, chatFull, menuItems);
                    }
                    if (AvatarPreviewer.canPreview(data)) {
                        AvatarPreviewer.getInstance().show((ViewGroup) ChatActivity.this.fragmentView, data, new AvatarPreviewer.Callback() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$1$$ExternalSyntheticLambda2
                            @Override // org.telegram.ui.AvatarPreviewer.Callback
                            public final void onMenuClick(AvatarPreviewer.MenuItem menuItem) {
                                ChatActivity.ChatActivityAdapter.AnonymousClass1.this.m2018x5750922d(chat, cell, menuItem);
                            }
                        });
                        return true;
                    }
                }
                return false;
            }

            /* renamed from: lambda$didLongPressChannelAvatar$2$org-telegram-ui-ChatActivity$ChatActivityAdapter$1 */
            public /* synthetic */ void m2018x5750922d(TLRPC.Chat chat, ChatMessageCell cell, AvatarPreviewer.MenuItem item) {
                switch (AnonymousClass115.$SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[item.ordinal()]) {
                    case 1:
                        openProfile(chat);
                        return;
                    case 2:
                    case 3:
                        openChat(cell, chat, 0);
                        return;
                    default:
                        return;
                }
            }

            private void openProfile(TLRPC.User user) {
                if (user != null && user.id != ChatActivity.this.getUserConfig().getClientUserId()) {
                    Bundle args = new Bundle();
                    args.putLong("user_id", user.id);
                    ProfileActivity fragment = new ProfileActivity(args);
                    fragment.setPlayProfileAnimation((ChatActivity.this.currentUser == null || ChatActivity.this.currentUser.id != user.id) ? 0 : 1);
                    AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ChatActivity.this.classGuid);
                    ChatActivity.this.presentFragment(fragment);
                }
            }

            private void openProfile(TLRPC.Chat chat) {
                if (chat != null) {
                    Bundle args = new Bundle();
                    args.putLong(ChatReactionsEditActivity.KEY_CHAT_ID, chat.id);
                    ChatActivity.this.presentFragment(new ProfileActivity(args));
                }
            }

            private void openDialog(ChatMessageCell cell, TLRPC.User user) {
                if (user != null) {
                    Bundle args = new Bundle();
                    args.putLong("user_id", user.id);
                    if (ChatActivity.this.getMessagesController().checkCanOpenChat(args, ChatActivity.this, cell.getMessageObject())) {
                        ChatActivity.this.presentFragment(new ChatActivity(args));
                    }
                }
            }

            private void openChat(ChatMessageCell cell, TLRPC.Chat chat, int postId) {
                if (ChatActivity.this.currentChat != null && chat.id == ChatActivity.this.currentChat.id) {
                    ChatActivity.this.scrollToMessageId(postId, cell.getMessageObject().getId(), true, 0, true, 0);
                } else if (ChatActivity.this.currentChat == null || chat.id != ChatActivity.this.currentChat.id || ChatActivity.this.isThreadChat()) {
                    Bundle args = new Bundle();
                    args.putLong(ChatReactionsEditActivity.KEY_CHAT_ID, chat.id);
                    if (postId != 0) {
                        args.putInt(Constants.MessagePayloadKeys.MSGID_SERVER, postId);
                    }
                    if (ChatActivity.this.getMessagesController().checkCanOpenChat(args, ChatActivity.this, cell.getMessageObject())) {
                        ChatActivity.this.presentFragment(new ChatActivity(args));
                    }
                }
            }

            private boolean isAvatarPreviewerEnabled() {
                return UserObject.isUserSelf(ChatActivity.this.currentUser) || (ChatActivity.this.currentChat != null && (!ChatObject.isChannel(ChatActivity.this.currentChat) || ChatActivity.this.currentChat.megagroup));
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressBotButton(ChatMessageCell cell, TLRPC.KeyboardButton button) {
                if (ChatActivity.this.getParentActivity() != null) {
                    if (ChatActivity.this.bottomOverlayChat.getVisibility() == 0 && !(button instanceof TLRPC.TL_keyboardButtonSwitchInline) && !(button instanceof TLRPC.TL_keyboardButtonCallback) && !(button instanceof TLRPC.TL_keyboardButtonGame) && !(button instanceof TLRPC.TL_keyboardButtonUrl) && !(button instanceof TLRPC.TL_keyboardButtonBuy) && !(button instanceof TLRPC.TL_keyboardButtonUrlAuth) && !(button instanceof TLRPC.TL_keyboardButtonUserProfile)) {
                        return;
                    }
                    ChatActivity.this.chatActivityEnterView.didPressedBotButton(button, cell.getMessageObject(), cell.getMessageObject());
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void needShowPremiumFeatures(String source) {
                ChatActivity.this.presentFragment(new PremiumPreviewFragment(source));
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didLongPressBotButton(ChatMessageCell cell, TLRPC.KeyboardButton button) {
                if (ChatActivity.this.getParentActivity() != null) {
                    if ((ChatActivity.this.bottomOverlayChat.getVisibility() != 0 || (button instanceof TLRPC.TL_keyboardButtonSwitchInline) || (button instanceof TLRPC.TL_keyboardButtonCallback) || (button instanceof TLRPC.TL_keyboardButtonGame) || (button instanceof TLRPC.TL_keyboardButtonUrl) || (button instanceof TLRPC.TL_keyboardButtonBuy) || (button instanceof TLRPC.TL_keyboardButtonUrlAuth) || (button instanceof TLRPC.TL_keyboardButtonUserProfile)) && (button instanceof TLRPC.TL_keyboardButtonUrl)) {
                        ChatActivity.this.openClickableLink(null, button.url, true, cell, cell.getMessageObject());
                        try {
                            cell.performHapticFeedback(0, 1);
                        } catch (Exception e) {
                        }
                    }
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressReaction(ChatMessageCell cell, TLRPC.TL_reactionCount reaction, boolean longpress) {
                int popupY;
                ReactionsLayoutInBubble.ReactionButton button;
                if (ChatActivity.this.getParentActivity() == null) {
                    return;
                }
                if (!longpress) {
                    ChatActivity.this.selectReaction(cell.getPrimaryMessageObject(), null, 0.0f, 0.0f, ChatActivity.this.getMediaDataController().getReactionsMap().get(reaction.reaction), false, false);
                } else if (!ChatObject.isChannelAndNotMegaGroup(ChatActivity.this.currentChat)) {
                    cell.performHapticFeedback(0);
                    FrameLayout scrimPopupContainerLayout = new FrameLayout(ChatActivity.this.getParentActivity()) { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.1.2
                        @Override // android.view.ViewGroup, android.view.View
                        public boolean dispatchKeyEvent(KeyEvent event) {
                            if (event.getKeyCode() == 4 && event.getRepeatCount() == 0) {
                                ChatActivity.this.closeMenu();
                            }
                            return super.dispatchKeyEvent(event);
                        }

                        @Override // android.widget.FrameLayout, android.view.View
                        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                            int h = Math.min(View.MeasureSpec.getSize(heightMeasureSpec), AndroidUtilities.dp(288.0f));
                            if (h == 0) {
                                h = AndroidUtilities.dp(288.0f);
                            }
                            super.onMeasure(widthMeasureSpec, View.MeasureSpec.makeMeasureSpec(h, Integer.MIN_VALUE));
                        }
                    };
                    scrimPopupContainerLayout.setLayoutParams(LayoutHelper.createFrame(-2, -2.0f));
                    Rect backgroundPaddings = new Rect();
                    Drawable shadowDrawable2 = ContextCompat.getDrawable(ChatActivity.this.getParentActivity(), R.drawable.popup_fixed_alert).mutate();
                    shadowDrawable2.setColorFilter(new PorterDuffColorFilter(ChatActivity.this.getThemedColor(Theme.key_actionBarDefaultSubmenuBackground), PorterDuff.Mode.MULTIPLY));
                    shadowDrawable2.getPadding(backgroundPaddings);
                    scrimPopupContainerLayout.setBackground(shadowDrawable2);
                    ReactionsLayoutInBubble.ReactionButton button2 = cell.getReactionButton(reaction.reaction);
                    if (button2 == null) {
                        return;
                    }
                    float dp = cell.reactionsLayoutInBubble.y + button2.y + AndroidUtilities.dp(28.0f);
                    float left = cell.reactionsLayoutInBubble.x + button2.x;
                    int[] loc = new int[2];
                    cell.getLocationInWindow(loc);
                    scrimPopupContainerLayout.addView(new ReactedUsersListView(ChatActivity.this.getParentActivity(), ChatActivity.this.themeDelegate, ChatActivity.this.currentAccount, cell.getPrimaryMessageObject(), reaction, false).setOnProfileSelectedListener(new ReactedUsersListView.OnProfileSelectedListener() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$1$$ExternalSyntheticLambda4
                        @Override // org.telegram.ui.Components.ReactedUsersListView.OnProfileSelectedListener
                        public final void onProfileSelected(ReactedUsersListView reactedUsersListView, long j) {
                            ChatActivity.ChatActivityAdapter.AnonymousClass1.this.m2021xe9448af9(reactedUsersListView, j);
                        }
                    }), LayoutHelper.createFrame(PsExtractor.VIDEO_STREAM_MASK, -2.0f));
                    ChatActivity.this.scrimPopupWindow = new ActionBarPopupWindow(scrimPopupContainerLayout, -2, -2) { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.1.3
                        @Override // org.telegram.ui.ActionBar.ActionBarPopupWindow, android.widget.PopupWindow
                        public void dismiss() {
                            super.dismiss();
                            if (ChatActivity.this.scrimPopupWindow != this) {
                                return;
                            }
                            ChatActivity.this.scrimPopupWindow = null;
                            ChatActivity.this.menuDeleteItem = null;
                            ChatActivity.this.scrimPopupWindowItems = null;
                            ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                            if (!ChatActivity.this.scrimPopupWindowHideDimOnDismiss) {
                                ChatActivity.this.scrimPopupWindowHideDimOnDismiss = true;
                            } else {
                                ChatActivity.this.dimBehindView(false);
                            }
                            if (ChatActivity.this.chatActivityEnterView != null) {
                                ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(true);
                            }
                        }
                    };
                    ChatActivity.this.scrimPopupWindow.setPauseNotifications(true);
                    ChatActivity.this.scrimPopupWindow.setDismissAnimationDuration(220);
                    ChatActivity.this.scrimPopupWindow.setOutsideTouchable(true);
                    ChatActivity.this.scrimPopupWindow.setClippingEnabled(true);
                    ChatActivity.this.scrimPopupWindow.setAnimationStyle(R.style.PopupContextAnimation);
                    ChatActivity.this.scrimPopupWindow.setFocusable(true);
                    scrimPopupContainerLayout.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE), View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE));
                    ChatActivity.this.scrimPopupWindow.setInputMethodMode(2);
                    ChatActivity.this.scrimPopupWindow.setSoftInputMode(0);
                    ChatActivity.this.scrimPopupWindow.getContentView().setFocusableInTouchMode(true);
                    int totalHeight = ChatActivity.this.contentView.getHeight();
                    int height = scrimPopupContainerLayout.getMeasuredHeight();
                    int keyboardHeight = ChatActivity.this.contentView.measureKeyboardHeight();
                    if (keyboardHeight > AndroidUtilities.dp(20.0f)) {
                        totalHeight += keyboardHeight;
                    }
                    int popupX = Math.max(AndroidUtilities.dp(6.0f), Math.min((ChatActivity.this.chatListView.getMeasuredWidth() - AndroidUtilities.dp(6.0f)) - scrimPopupContainerLayout.getMeasuredWidth(), (int) (left - AndroidUtilities.dp(28.0f))));
                    if (AndroidUtilities.isTablet()) {
                        int[] location = new int[2];
                        ChatActivity.this.fragmentView.getLocationInWindow(location);
                        popupX += location[0];
                    }
                    if (height >= totalHeight) {
                        popupY = ChatActivity.this.inBubbleMode ? 0 : AndroidUtilities.statusBarHeight;
                    } else {
                        if (height < totalHeight / 2.0f) {
                            button = button2;
                            if (ChatActivity.this.chatListView.getY() + cell.getY() + cell.reactionsLayoutInBubble.y + button.y > totalHeight / 2.0f) {
                                popupY = (int) ((((ChatActivity.this.chatListView.getY() + cell.getY()) + cell.reactionsLayoutInBubble.y) + button.y) - height);
                            }
                        } else {
                            button = button2;
                        }
                        popupY = (int) (ChatActivity.this.chatListView.getY() + cell.getY() + cell.reactionsLayoutInBubble.y + button.y + button.height);
                    }
                    ChatActivity.this.scrimPopupWindow.showAtLocation(ChatActivity.this.chatListView, 51, ChatActivity.this.scrimPopupX = popupX, ChatActivity.this.scrimPopupY = popupY);
                    ChatActivity.this.chatListView.stopScroll();
                    ChatActivity.this.chatLayoutManager.setCanScrollVertically(false);
                    ChatActivity.this.scrimViewReaction = reaction.reaction;
                    ChatActivity.this.dimBehindView((View) cell, true);
                    ChatActivity.this.hideHints(false);
                    if (ChatActivity.this.topUndoView != null) {
                        ChatActivity.this.topUndoView.hide(true, 1);
                    }
                    if (ChatActivity.this.undoView != null) {
                        ChatActivity.this.undoView.hide(true, 1);
                    }
                    if (ChatActivity.this.chatActivityEnterView != null) {
                        ChatActivity.this.chatActivityEnterView.getEditField().setAllowDrawCursor(false);
                    }
                }
            }

            /* renamed from: lambda$didPressReaction$3$org-telegram-ui-ChatActivity$ChatActivityAdapter$1 */
            public /* synthetic */ void m2021xe9448af9(ReactedUsersListView view1, long userId) {
                Bundle args = new Bundle();
                args.putLong("user_id", userId);
                ProfileActivity fragment = new ProfileActivity(args);
                ChatActivity.this.presentFragment(fragment);
                ChatActivity.this.closeMenu();
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressVoteButtons(ChatMessageCell cell, ArrayList<TLRPC.TL_pollAnswer> buttons, int showCount, int x, int y) {
                int y2;
                int x2;
                if (showCount < 0 && !buttons.isEmpty()) {
                    ChatActivity.this.getSendMessagesHelper().sendVote(cell.getMessageObject(), buttons, null);
                    return;
                }
                if (ChatActivity.this.getParentActivity() != null) {
                    if (ChatActivity.this.pollHintView == null) {
                        ChatActivity.this.pollHintView = new HintView(ChatActivity.this.getParentActivity(), 5, ChatActivity.this.themeDelegate);
                        ChatActivity.this.pollHintView.setAlpha(0.0f);
                        ChatActivity.this.pollHintView.setVisibility(4);
                        int index = ChatActivity.this.contentView.indexOfChild(ChatActivity.this.chatActivityEnterView);
                        if (index != -1) {
                            ChatActivity.this.contentView.addView(ChatActivity.this.pollHintView, index + 1, LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
                        } else {
                            return;
                        }
                    }
                    if (buttons.isEmpty() && showCount < 0) {
                        ArrayList<ChatMessageCell.PollButton> pollButtons = cell.getPollButtons();
                        float lastDiff = 0.0f;
                        int a = 0;
                        int N = pollButtons.size();
                        while (true) {
                            if (a >= N) {
                                x2 = x;
                                y2 = y;
                                break;
                            }
                            ChatMessageCell.PollButton button = pollButtons.get(a);
                            lastDiff = ((cell.getY() + button.y) - AndroidUtilities.dp(4.0f)) - ChatActivity.this.chatListViewPaddingTop;
                            ChatActivity.this.pollHintX = button.x + AndroidUtilities.dp(13.3f);
                            ChatActivity.this.pollHintY = (button.y - AndroidUtilities.dp(6.0f)) + y;
                            if (lastDiff <= 0.0f) {
                                a++;
                            } else {
                                lastDiff = 0.0f;
                                x2 = ChatActivity.this.pollHintX;
                                y2 = ChatActivity.this.pollHintY;
                                break;
                            }
                        }
                        if (lastDiff != 0.0f) {
                            ChatActivity.this.chatListView.smoothScrollBy(0, (int) lastDiff);
                            ChatActivity.this.pollHintCell = cell;
                            return;
                        }
                    } else {
                        x2 = x;
                        y2 = y;
                    }
                    ChatActivity.this.pollHintView.showForMessageCell(cell, Integer.valueOf(showCount), x2, y2, true);
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressCancelSendButton(ChatMessageCell cell) {
                MessageObject message = cell.getMessageObject();
                if (message.messageOwner.send_state != 0) {
                    ChatActivity.this.getSendMessagesHelper().cancelSendingMessage(message);
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didLongPress(ChatMessageCell cell, float x, float y) {
                ChatActivity.this.createMenu(cell, false, false, x, y);
                ChatActivity.this.startMultiselect(ChatActivity.this.chatListView.getChildAdapterPosition(cell));
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean canPerformActions() {
                return ChatActivity.this.actionBar != null && !ChatActivity.this.actionBar.isActionModeShowed() && ChatActivity.this.reportType < 0 && !ChatActivity.this.inPreviewMode;
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressUrl(ChatMessageCell cell, CharacterStyle url, boolean longPress) {
                ChatActivity.this.didPressMessageUrl(url, longPress, cell.getMessageObject(), cell);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void needOpenWebView(MessageObject message, String url, String title, String description, String originalUrl, int w, int h) {
                try {
                    EmbedBottomSheet.show(ChatActivity.this.getParentActivity(), message, ChatActivity.this.photoViewerProvider, title, description, originalUrl, url, w, h, ChatActivity.this.isKeyboardVisible());
                } catch (Throwable e) {
                    FileLog.e(e);
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressReplyMessage(ChatMessageCell cell, int id) {
                if (UserObject.isReplyUser(ChatActivity.this.currentUser)) {
                    didPressSideButton(cell);
                    return;
                }
                MessageObject messageObject = cell.getMessageObject();
                if (ChatActivity.this.chatMode == 2 || ChatActivity.this.chatMode == 1) {
                    ChatActivity.this.chatActivityDelegate.openReplyMessage(id);
                    ChatActivity.this.finishFragment();
                    return;
                }
                ChatActivity.this.scrollToMessageId(id, messageObject.getId(), true, messageObject.getDialogId() == ChatActivity.this.mergeDialogId ? 1 : 0, true, 0);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressViaBotNotInline(ChatMessageCell cell, long botId) {
                Bundle args = new Bundle();
                args.putLong("user_id", botId);
                if (ChatActivity.this.getMessagesController().checkCanOpenChat(args, ChatActivity.this, cell.getMessageObject())) {
                    ChatActivity.this.presentFragment(new ChatActivity(args));
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressViaBot(ChatMessageCell cell, String username) {
                if (ChatActivity.this.bottomOverlayChat == null || ChatActivity.this.bottomOverlayChat.getVisibility() != 0) {
                    if ((ChatActivity.this.bottomOverlay == null || ChatActivity.this.bottomOverlay.getVisibility() != 0) && ChatActivity.this.chatActivityEnterView != null && username != null && username.length() > 0) {
                        ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                        chatActivityEnterView.setFieldText("@" + username + " ");
                        ChatActivity.this.chatActivityEnterView.openKeyboard();
                    }
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didStartVideoStream(MessageObject message) {
                if (message.isVideo()) {
                    ChatActivity.this.sendSecretMessageRead(message, true);
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void needReloadPolls() {
                ChatActivity.this.invalidateMessagesVisiblePart();
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressImage(ChatMessageCell cell, float x, float y) {
                MessageObject message;
                MessageObject message2;
                boolean handled;
                final MessageObject message3 = cell.getMessageObject();
                message3.putInDownloadsStore = true;
                if (message3.isSendError()) {
                    ChatActivity.this.createMenu(cell, false, false, x, y);
                } else if (message3.isSending()) {
                } else {
                    if (message3.isDice()) {
                        ChatActivity.this.undoView.showWithAction(0L, (ChatActivity.this.chatActivityEnterView.getVisibility() != 0 || ChatActivity.this.bottomOverlay.getVisibility() == 0) ? 17 : 16, message3.getDiceEmoji(), null, new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatActivityAdapter$1$$ExternalSyntheticLambda1
                            @Override // java.lang.Runnable
                            public final void run() {
                                ChatActivity.ChatActivityAdapter.AnonymousClass1.this.m2020x2871a148(message3);
                            }
                        });
                        return;
                    }
                    int i = 0;
                    if (!message3.isAnimatedEmoji() && !message3.isPremiumSticker()) {
                        if (message3.needDrawBluredPreview()) {
                            Runnable action = ChatActivity.this.sendSecretMessageRead(message3, false);
                            cell.invalidate();
                            SecretMediaViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                            SecretMediaViewer.getInstance().openMedia(message3, ChatActivity.this.photoViewerProvider, action);
                            return;
                        }
                        ChatActivityEnterView chatActivityEnterView = null;
                        if (message3.getInputStickerSet() != null) {
                            Activity parentActivity = ChatActivity.this.getParentActivity();
                            ChatActivity chatActivity = ChatActivity.this;
                            TLRPC.InputStickerSet inputStickerSet = message3.getInputStickerSet();
                            if (ChatActivity.this.bottomOverlayChat.getVisibility() != 0 && (ChatActivity.this.currentChat == null || ChatObject.canSendStickers(ChatActivity.this.currentChat))) {
                                chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                            }
                            StickersAlert alert = new StickersAlert(parentActivity, chatActivity, inputStickerSet, null, chatActivityEnterView, ChatActivity.this.themeDelegate);
                            alert.setCalcMandatoryInsets(ChatActivity.this.isKeyboardVisible());
                            ChatActivity.this.showDialog(alert);
                            return;
                        }
                        if (message3.isVideo() || message3.type == 1) {
                            message = message3;
                        } else if ((message3.type != 0 || message3.isWebpageDocument()) && !message3.isGif()) {
                            if (message3.type == 3) {
                                ChatActivity.this.sendSecretMessageRead(message3, true);
                                File f = null;
                                try {
                                    if (message3.messageOwner.attachPath != null && message3.messageOwner.attachPath.length() != 0) {
                                        f = new File(message3.messageOwner.attachPath);
                                    }
                                    if (f == null || !f.exists()) {
                                        f = ChatActivity.this.getFileLoader().getPathToMessage(message3.messageOwner);
                                    }
                                    Intent intent = new Intent("android.intent.action.VIEW");
                                    if (Build.VERSION.SDK_INT >= 24) {
                                        intent.setFlags(1);
                                        intent.setDataAndType(FileProvider.getUriForFile(ChatActivity.this.getParentActivity(), "org.telegram.messenger.beta.provider", f), MimeTypes.VIDEO_MP4);
                                    } else {
                                        intent.setDataAndType(Uri.fromFile(f), MimeTypes.VIDEO_MP4);
                                    }
                                    ChatActivity.this.getParentActivity().startActivityForResult(intent, 500);
                                } catch (Exception e) {
                                    FileLog.e(e);
                                    ChatActivity.this.alertUserOpenError(message3);
                                }
                                return;
                            } else if (message3.type == 4) {
                                if (!AndroidUtilities.isGoogleMapsInstalled(ChatActivity.this)) {
                                    return;
                                }
                                if (!message3.isLiveLocation()) {
                                    if (ChatActivity.this.currentEncryptedChat == null) {
                                        i = 3;
                                    }
                                    LocationActivity fragment = new LocationActivity(i);
                                    fragment.setDelegate(ChatActivity.this);
                                    fragment.setMessageObject(message3);
                                    ChatActivity.this.presentFragment(fragment);
                                    return;
                                }
                                LocationActivity fragment2 = new LocationActivity((ChatActivity.this.currentChat == null || ChatObject.canSendMessages(ChatActivity.this.currentChat) || ChatActivity.this.currentChat.megagroup) ? 2 : 6);
                                fragment2.setDelegate(ChatActivity.this);
                                fragment2.setMessageObject(message3);
                                ChatActivity.this.presentFragment(fragment2);
                                return;
                            } else if (message3.type == 9 || message3.type == 0) {
                                if (message3.getDocumentName().toLowerCase().endsWith("attheme")) {
                                    File locFile = null;
                                    if (message3.messageOwner.attachPath != null && message3.messageOwner.attachPath.length() != 0) {
                                        File f2 = new File(message3.messageOwner.attachPath);
                                        if (f2.exists()) {
                                            locFile = f2;
                                        }
                                    }
                                    if (locFile == null) {
                                        File f3 = ChatActivity.this.getFileLoader().getPathToMessage(message3.messageOwner);
                                        if (f3.exists()) {
                                            locFile = f3;
                                        }
                                    }
                                    Theme.ThemeInfo themeInfo = Theme.applyThemeFile(locFile, message3.getDocumentName(), null, true);
                                    if (themeInfo == null) {
                                        ChatActivity.this.scrollToPositionOnRecreate = -1;
                                    } else {
                                        ChatActivity.this.presentFragment(new ThemePreviewActivity(themeInfo));
                                        return;
                                    }
                                }
                                if (message3.canPreviewDocument()) {
                                    PhotoViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity(), ChatActivity.this.themeDelegate);
                                    message2 = message3;
                                    PhotoViewer.getInstance().openPhoto(message3, ChatActivity.this, message3.type != 0 ? ChatActivity.this.dialog_id : 0L, message3.type != 0 ? ChatActivity.this.mergeDialogId : 0L, ChatActivity.this.photoViewerProvider);
                                    handled = true;
                                } else {
                                    message2 = message3;
                                    handled = false;
                                }
                                if (!handled) {
                                    try {
                                        AndroidUtilities.openForView(message2, ChatActivity.this.getParentActivity(), ChatActivity.this.themeDelegate);
                                        return;
                                    } catch (Exception e2) {
                                        FileLog.e(e2);
                                        ChatActivity.this.alertUserOpenError(message2);
                                        return;
                                    }
                                }
                                return;
                            } else {
                                return;
                            }
                        } else {
                            message = message3;
                        }
                        ChatActivity.this.openPhotoViewerForMessage(cell, message);
                        return;
                    }
                    ChatActivity.this.restartSticker(cell);
                    ChatActivity.this.emojiAnimationsOverlay.onTapItem(cell, ChatActivity.this);
                    ChatActivity.this.chatListView.cancelClickRunnables(false);
                }
            }

            /* renamed from: lambda$didPressImage$4$org-telegram-ui-ChatActivity$ChatActivityAdapter$1 */
            public /* synthetic */ void m2020x2871a148(MessageObject message) {
                ChatActivity.this.getSendMessagesHelper().sendMessage(message.getDiceEmoji(), ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, ChatActivity.this.getThreadMessage(), null, false, null, null, null, true, 0, null);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressInstantButton(ChatMessageCell cell, int type) {
                MessageObject messageObject = cell.getMessageObject();
                if (type == 8) {
                    PollVotesAlert.showForPoll(ChatActivity.this, messageObject);
                } else if (type == 0) {
                    if (messageObject.messageOwner.media != null && messageObject.messageOwner.media.webpage != null && messageObject.messageOwner.media.webpage.cached_page != null) {
                        ArticleViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity(), ChatActivity.this);
                        ArticleViewer.getInstance().open(messageObject);
                    }
                } else if (type == 5) {
                    long uid = messageObject.messageOwner.media.user_id;
                    TLRPC.User user = null;
                    if (uid != 0) {
                        user = MessagesController.getInstance(ChatActivity.this.currentAccount).getUser(Long.valueOf(uid));
                    }
                    ChatActivity.this.openVCard(user, messageObject.messageOwner.media.vcard, messageObject.messageOwner.media.first_name, messageObject.messageOwner.media.last_name);
                } else if (messageObject.isSponsored()) {
                    Bundle args = new Bundle();
                    if (messageObject.sponsoredChatInvite != null) {
                        ChatActivity.this.showDialog(new JoinGroupAlert(ChatActivityAdapter.this.mContext, messageObject.sponsoredChatInvite, messageObject.sponsoredChatInviteHash, ChatActivity.this, ChatActivity.this.themeDelegate));
                        return;
                    }
                    long peerId = MessageObject.getPeerId(messageObject.messageOwner.from_id);
                    if (peerId < 0) {
                        args.putLong(ChatReactionsEditActivity.KEY_CHAT_ID, -peerId);
                    } else {
                        args.putLong("user_id", peerId);
                    }
                    if (messageObject.sponsoredChannelPost != 0) {
                        args.putInt(Constants.MessagePayloadKeys.MSGID_SERVER, messageObject.sponsoredChannelPost);
                    }
                    if (messageObject.botStartParam != null) {
                        args.putString("inline_query", messageObject.botStartParam);
                    }
                    if (ChatActivity.this.getMessagesController().checkCanOpenChat(args, ChatActivity.this)) {
                        ChatActivity.this.presentFragment(new ChatActivity(args));
                    }
                } else if (messageObject.messageOwner.media != null && messageObject.messageOwner.media.webpage != null && !ChatActivity.this.openLinkInternally(messageObject.messageOwner.media.webpage.url, messageObject.getId())) {
                    Browser.openUrl(ChatActivity.this.getParentActivity(), messageObject.messageOwner.media.webpage.url);
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void didPressCommentButton(ChatMessageCell cell) {
                MessageObject message;
                long linkedChatId;
                int maxReadId;
                MessageObject.GroupedMessages group = cell.getCurrentMessagesGroup();
                if (group != null && !group.messages.isEmpty()) {
                    message = group.messages.get(0);
                } else {
                    message = cell.getMessageObject();
                }
                if (message.messageOwner.replies != null) {
                    int maxReadId2 = message.messageOwner.replies.read_max_id;
                    maxReadId = maxReadId2;
                    linkedChatId = message.messageOwner.replies.channel_id;
                } else {
                    maxReadId = -1;
                    linkedChatId = 0;
                }
                ChatActivity.this.openDiscussionMessageChat(ChatActivity.this.currentChat.id, message, message.getId(), linkedChatId, maxReadId, 0, null);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public String getAdminRank(long uid) {
                if (ChatObject.isChannel(ChatActivity.this.currentChat) && ChatActivity.this.currentChat.megagroup) {
                    return ChatActivity.this.getMessagesController().getAdminRank(ChatActivity.this.currentChat.id, uid);
                }
                return null;
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean shouldRepeatSticker(MessageObject message) {
                return !ChatActivity.this.alreadyPlayedStickers.containsKey(message);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void setShouldNotRepeatSticker(MessageObject message) {
                ChatActivity.this.alreadyPlayedStickers.put(message, true);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public TextSelectionHelper.ChatListTextSelectionHelper getTextSelectionHelper() {
                return ChatActivity.this.textSelectionHelper;
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean hasSelectedMessages() {
                return ChatActivity.this.selectedMessagesIds[0].size() + ChatActivity.this.selectedMessagesIds[1].size() > 0;
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void onDiceFinished() {
                if (!ChatActivity.this.fireworksOverlay.isStarted()) {
                    ChatActivity.this.fireworksOverlay.start();
                    ChatActivity.this.fireworksOverlay.performHapticFeedback(3, 2);
                }
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public PinchToZoomHelper getPinchToZoomHelper() {
                return ChatActivity.this.pinchToZoomHelper;
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean keyboardIsOpened() {
                return ChatActivity.this.contentView.getKeyboardHeight() + ChatActivity.this.chatEmojiViewPadding >= AndroidUtilities.dp(20.0f);
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean isLandscape() {
                return ChatActivity.this.contentView.getMeasuredWidth() > ChatActivity.this.contentView.getMeasuredHeight();
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public void invalidateBlur() {
                ChatActivity.this.contentView.invalidateBlur();
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean canDrawOutboundsContent() {
                return false;
            }

            @Override // org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate
            public boolean onAccessibilityAction(int action, Bundle arguments) {
                if (action == 16 || action == R.id.acc_action_small_button || action == R.id.acc_action_msg_options) {
                    if (ChatActivity.this.inPreviewMode && ChatActivity.this.allowExpandPreviewByClick) {
                        if (ChatActivity.this.parentLayout != null) {
                            ChatActivity.this.parentLayout.expandPreviewFragment();
                        }
                        return true;
                    }
                    return !canPerformActions();
                }
                return false;
            }
        }

        /* renamed from: lambda$onCreateViewHolder$0$org-telegram-ui-ChatActivity$ChatActivityAdapter */
        public /* synthetic */ void m2016x61aaae70(String url) {
            if (url.startsWith("@")) {
                ChatActivity.this.getMessagesController().openByUserName(url.substring(1), ChatActivity.this, 0);
            } else if (url.startsWith("#") || url.startsWith("$")) {
                DialogsActivity fragment = new DialogsActivity(null);
                fragment.setSearchString(url);
                ChatActivity.this.presentFragment(fragment);
            } else if (!url.startsWith("/")) {
                ChatActivity.this.processExternalUrl(0, url, false);
            } else {
                ChatActivity.this.chatActivityEnterView.setCommand(null, url, false, false);
                if (ChatActivity.this.chatActivityEnterView.getFieldText() == null) {
                    ChatActivity.this.hideFieldPanel(false);
                }
            }
        }

        /* JADX WARN: Removed duplicated region for block: B:165:0x02e6  */
        /* JADX WARN: Removed duplicated region for block: B:176:0x031d  */
        /* JADX WARN: Removed duplicated region for block: B:236:0x041e  */
        /* JADX WARN: Removed duplicated region for block: B:237:0x0421  */
        /* JADX WARN: Removed duplicated region for block: B:249:0x0451  */
        /* JADX WARN: Removed duplicated region for block: B:251:0x0454  */
        /* JADX WARN: Removed duplicated region for block: B:254:0x0464  */
        /* JADX WARN: Removed duplicated region for block: B:255:0x0466  */
        /* JADX WARN: Removed duplicated region for block: B:264:0x048f  */
        /* JADX WARN: Removed duplicated region for block: B:267:0x04a0  */
        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        public void onBindViewHolder(androidx.recyclerview.widget.RecyclerView.ViewHolder r27, int r28) {
            /*
                Method dump skipped, instructions count: 1527
                To view this dump add '--comments-level debug' option
            */
            throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.ChatActivityAdapter.onBindViewHolder(androidx.recyclerview.widget.RecyclerView$ViewHolder, int):void");
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        /* renamed from: org.telegram.ui.ChatActivity$ChatActivityAdapter$4 */
        /* loaded from: classes4.dex */
        public class AnonymousClass4 implements ViewTreeObserver.OnPreDrawListener {
            final /* synthetic */ ChatMessageCell val$messageCell;

            AnonymousClass4(ChatMessageCell chatMessageCell) {
                ChatActivityAdapter.this = this$1;
                this.val$messageCell = chatMessageCell;
            }

            @Override // android.view.ViewTreeObserver.OnPreDrawListener
            public boolean onPreDraw() {
                PipRoundVideoView pipRoundVideoView = PipRoundVideoView.getInstance();
                if (pipRoundVideoView != null) {
                    pipRoundVideoView.showTemporary(true);
                }
                this.val$messageCell.getViewTreeObserver().removeOnPreDrawListener(this);
                ImageReceiver imageReceiver = this.val$messageCell.getPhotoImage();
                float w = imageReceiver.getImageWidth();
                org.telegram.ui.Components.Rect rect = ChatActivity.this.instantCameraView.getCameraRect();
                float scale = w / rect.width;
                this.val$messageCell.getTransitionParams().ignoreAlpha = true;
                this.val$messageCell.setAlpha(0.0f);
                this.val$messageCell.setTimeAlpha(0.0f);
                this.val$messageCell.getLocationOnScreen(position);
                int[] position = {(int) (position[0] + (imageReceiver.getImageX() - this.val$messageCell.getAnimationOffsetX())), (int) (position[1] + (imageReceiver.getImageY() - this.val$messageCell.getTranslationY()))};
                final InstantCameraView.InstantViewCameraContainer cameraContainer = ChatActivity.this.instantCameraView.getCameraContainer();
                cameraContainer.setPivotX(0.0f);
                cameraContainer.setPivotY(0.0f);
                AnimatorSet animatorSet = new AnimatorSet();
                cameraContainer.setImageReceiver(imageReceiver);
                ChatActivity.this.instantCameraView.cancelBlur();
                AnimatorSet allAnimators = new AnimatorSet();
                animatorSet.playTogether(ObjectAnimator.ofFloat(cameraContainer, View.SCALE_X, scale), ObjectAnimator.ofFloat(cameraContainer, View.SCALE_Y, scale), ObjectAnimator.ofFloat(cameraContainer, View.TRANSLATION_Y, position[1] - rect.y), ObjectAnimator.ofFloat(ChatActivity.this.instantCameraView.getSwitchButtonView(), View.ALPHA, 0.0f), ObjectAnimator.ofInt(ChatActivity.this.instantCameraView.getPaint(), AnimationProperties.PAINT_ALPHA, 0), ObjectAnimator.ofFloat(ChatActivity.this.instantCameraView.getMuteImageView(), View.ALPHA, 0.0f));
                animatorSet.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
                ObjectAnimator o = ObjectAnimator.ofFloat(cameraContainer, View.TRANSLATION_X, position[0] - rect.x);
                o.setInterpolator(CubicBezierInterpolator.DEFAULT);
                allAnimators.playTogether(o, animatorSet);
                allAnimators.setStartDelay(120L);
                allAnimators.setDuration(180L);
                ChatActivity.this.instantCameraView.setIsMessageTransition(true);
                allAnimators.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.4.1
                    @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                    public void onAnimationEnd(Animator animation) {
                        AnonymousClass4.this.val$messageCell.setAlpha(1.0f);
                        AnonymousClass4.this.val$messageCell.getTransitionParams().ignoreAlpha = false;
                        Property<ChatMessageCell, Float> ALPHA = new AnimationProperties.FloatProperty<ChatMessageCell>("alpha") { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.4.1.1
                            public void setValue(ChatMessageCell object, float value) {
                                object.setTimeAlpha(value);
                            }

                            public Float get(ChatMessageCell object) {
                                return Float.valueOf(object.getTimeAlpha());
                            }
                        };
                        AnimatorSet animatorSet2 = new AnimatorSet();
                        animatorSet2.playTogether(ObjectAnimator.ofFloat(cameraContainer, View.ALPHA, 0.0f), ObjectAnimator.ofFloat(AnonymousClass4.this.val$messageCell, ALPHA, 1.0f));
                        animatorSet2.setDuration(100L);
                        animatorSet2.setInterpolator(new DecelerateInterpolator());
                        animatorSet2.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ChatActivityAdapter.4.1.2
                            @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                            public void onAnimationEnd(Animator animation2) {
                                ChatActivity.this.instantCameraView.setIsMessageTransition(false);
                                ChatActivity.this.instantCameraView.hideCamera(true);
                                ChatActivity.this.instantCameraView.setVisibility(4);
                            }
                        });
                        animatorSet2.start();
                    }
                });
                allAnimators.start();
                return true;
            }
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public int getItemViewType(int position) {
            if (!ChatActivity.this.clearingHistory || position != this.botInfoEmptyRow) {
                if (position < this.messagesStartRow || position >= this.messagesEndRow) {
                    return position == this.botInfoRow ? 3 : 4;
                }
                ArrayList<MessageObject> messages = this.isFrozen ? this.frozenMessages : ChatActivity.this.messages;
                return messages.get(position - this.messagesStartRow).contentType;
            }
            return 3;
        }

        /* JADX WARN: Removed duplicated region for block: B:72:0x0185  */
        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        public void onViewAttachedToWindow(final androidx.recyclerview.widget.RecyclerView.ViewHolder r14) {
            /*
                Method dump skipped, instructions count: 597
                To view this dump add '--comments-level debug' option
            */
            throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.ChatActivityAdapter.onViewAttachedToWindow(androidx.recyclerview.widget.RecyclerView$ViewHolder):void");
        }

        public void updateRowAtPosition(int index) {
            if (ChatActivity.this.chatLayoutManager == null || this.isFrozen) {
                return;
            }
            int lastVisibleItem = -1;
            int top = 0;
            if (!ChatActivity.this.wasManualScroll && ChatActivity.this.unreadMessageObject != null) {
                int n = ChatActivity.this.chatListView.getChildCount();
                int i = 0;
                while (true) {
                    if (i >= n) {
                        break;
                    }
                    View child = ChatActivity.this.chatListView.getChildAt(i);
                    if ((child instanceof ChatMessageCell) && ((ChatMessageCell) child).getMessageObject() == ChatActivity.this.unreadMessageObject) {
                        int unreadMessageIndex = ChatActivity.this.messages.indexOf(ChatActivity.this.unreadMessageObject);
                        if (unreadMessageIndex >= 0) {
                            lastVisibleItem = this.messagesStartRow + ChatActivity.this.messages.indexOf(ChatActivity.this.unreadMessageObject);
                            top = (ChatActivity.this.chatListView.getMeasuredHeight() - child.getBottom()) - ChatActivity.this.chatListView.getPaddingBottom();
                        }
                    } else {
                        i++;
                    }
                }
            }
            notifyItemChanged(index);
            if (lastVisibleItem != -1) {
                ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(lastVisibleItem, top);
            }
        }

        public void invalidateRowWithMessageObject(MessageObject messageObject) {
            int count = ChatActivity.this.chatListView.getChildCount();
            for (int a = 0; a < count; a++) {
                View child = ChatActivity.this.chatListView.getChildAt(a);
                if (child instanceof ChatMessageCell) {
                    ChatMessageCell cell = (ChatMessageCell) child;
                    if (cell.getMessageObject() == messageObject) {
                        cell.invalidate();
                        return;
                    }
                }
            }
        }

        public View updateRowWithMessageObject(MessageObject messageObject, boolean allowInPlace) {
            if (allowInPlace) {
                int count = ChatActivity.this.chatListView.getChildCount();
                for (int a = 0; a < count; a++) {
                    View child = ChatActivity.this.chatListView.getChildAt(a);
                    if (child instanceof ChatMessageCell) {
                        ChatMessageCell cell = (ChatMessageCell) child;
                        if (cell.getMessageObject() == messageObject && !cell.isAdminLayoutChanged()) {
                            cell.setMessageObject(messageObject, cell.getCurrentMessagesGroup(), cell.isPinnedBottom(), cell.isPinnedTop());
                            return cell;
                        }
                    }
                }
            }
            ArrayList<MessageObject> messages = this.isFrozen ? this.frozenMessages : ChatActivity.this.messages;
            int index = messages.indexOf(messageObject);
            if (index == -1) {
                return null;
            }
            updateRowAtPosition(this.messagesStartRow + index);
            return null;
        }

        public void notifyDataSetChanged(boolean animated) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify data set changed fragmentOpened=" + ChatActivity.this.fragmentOpened);
            }
            if (!animated || !ChatActivity.this.fragmentOpened) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyDataSetChanged();
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyDataSetChanged() {
            notifyDataSetChanged(false);
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemChanged(int position) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item changed " + position);
            }
            if (!ChatActivity.this.fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemChanged(position);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRangeChanged(int positionStart, int itemCount) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item range changed " + positionStart + com.microsoft.appcenter.Constants.COMMON_SCHEMA_PREFIX_SEPARATOR + itemCount);
            }
            if (!ChatActivity.this.fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemRangeChanged(positionStart, itemCount);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemInserted(int position) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item inserted " + position);
            }
            if (!ChatActivity.this.fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemInserted(position);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemMoved(int fromPosition, int toPosition) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item moved" + fromPosition + com.microsoft.appcenter.Constants.COMMON_SCHEMA_PREFIX_SEPARATOR + toPosition);
            }
            if (!ChatActivity.this.fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemMoved(fromPosition, toPosition);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRangeInserted(int positionStart, int itemCount) {
            int lastPosition;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item range inserted" + positionStart + com.microsoft.appcenter.Constants.COMMON_SCHEMA_PREFIX_SEPARATOR + itemCount);
            }
            if (!ChatActivity.this.fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            if (positionStart == 1 && itemCount > 0 && (lastPosition = positionStart + itemCount) >= this.messagesStartRow && lastPosition < this.messagesEndRow) {
                MessageObject m1 = ChatActivity.this.messages.get(lastPosition - this.messagesStartRow);
                MessageObject m2 = ChatActivity.this.messages.get((lastPosition - this.messagesStartRow) - 1);
                if ((ChatActivity.this.currentChat != null && m1.getFromChatId() == m2.getFromChatId()) || (ChatActivity.this.currentUser != null && m1.isOutOwner() == m2.isOutOwner())) {
                    notifyItemChanged(positionStart);
                }
            }
            try {
                super.notifyItemRangeInserted(positionStart, itemCount);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRemoved(int position) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item removed " + position);
            }
            if (!ChatActivity.this.fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemRemoved(position);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimatableAdapter, androidx.recyclerview.widget.RecyclerView.Adapter
        public void notifyItemRangeRemoved(int positionStart, int itemCount) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("notify item range removed" + positionStart + com.microsoft.appcenter.Constants.COMMON_SCHEMA_PREFIX_SEPARATOR + itemCount);
            }
            if (!ChatActivity.this.fragmentBeginToShow) {
                ChatActivity.this.chatListView.setItemAnimator(null);
            } else if (ChatActivity.this.chatListView.getItemAnimator() != ChatActivity.this.chatListItemAnimator) {
                ChatActivity.this.chatListView.setItemAnimator(ChatActivity.this.chatListItemAnimator);
            }
            updateRowsInternal();
            try {
                super.notifyItemRangeRemoved(positionStart, itemCount);
            } catch (Exception e) {
                FileLog.e(e);
            }
        }

        @Override // org.telegram.ui.Components.RecyclerListView.SelectionAdapter
        public boolean isEnabled(RecyclerView.ViewHolder holder) {
            return false;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: org.telegram.ui.ChatActivity$115 */
    /* loaded from: classes4.dex */
    public static /* synthetic */ class AnonymousClass115 {
        static final /* synthetic */ int[] $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem;

        static {
            int[] iArr = new int[AvatarPreviewer.MenuItem.values().length];
            $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem = iArr;
            try {
                iArr[AvatarPreviewer.MenuItem.OPEN_PROFILE.ordinal()] = 1;
            } catch (NoSuchFieldError e) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.OPEN_GROUP.ordinal()] = 2;
            } catch (NoSuchFieldError e2) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.OPEN_CHANNEL.ordinal()] = 3;
            } catch (NoSuchFieldError e3) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.SEND_MESSAGE.ordinal()] = 4;
            } catch (NoSuchFieldError e4) {
            }
            try {
                $SwitchMap$org$telegram$ui$AvatarPreviewer$MenuItem[AvatarPreviewer.MenuItem.MENTION.ordinal()] = 5;
            } catch (NoSuchFieldError e5) {
            }
        }
    }

    public boolean openLinkInternally(String urlFinal, int fromMessageId) {
        if (this.currentChat == null || urlFinal == null) {
            return false;
        }
        if (urlFinal.startsWith("tg:privatepost") || urlFinal.startsWith("tg://privatepost")) {
            String urlTmp = urlFinal.replace("tg:privatepost", "tg://telegram.org").replace("tg://privatepost", "tg://telegram.org");
            Uri data = Uri.parse(urlTmp);
            int messageId = Utilities.parseInt((CharSequence) data.getQueryParameter("post")).intValue();
            long channelId = Utilities.parseLong(data.getQueryParameter("channel")).longValue();
            int threadId = Utilities.parseInt((CharSequence) data.getQueryParameter("thread")).intValue();
            if (channelId == this.currentChat.id && messageId != 0) {
                if (threadId != 0) {
                    openDiscussionMessageChat(this.currentChat.id, null, threadId, 0L, -1, 0, null);
                } else {
                    this.showScrollToMessageError = true;
                    if (this.chatMode == 2) {
                        this.chatActivityDelegate.openReplyMessage(messageId);
                        finishFragment();
                    } else {
                        scrollToMessageId(messageId, fromMessageId, true, 0, false, 0);
                    }
                }
                return true;
            }
        } else if (this.currentChat.username != null) {
            String username = this.currentChat.username.toLowerCase();
            if (publicMsgUrlPattern == null) {
                publicMsgUrlPattern = Pattern.compile("(https://)?t.me/([0-9a-zA-Z_]+)/([0-9]+)");
                voiceChatUrlPattern = Pattern.compile("(https://)?t.me/([0-9a-zA-Z_]+)\\?(voicechat+)");
            }
            Matcher matcher = publicMsgUrlPattern.matcher(urlFinal);
            if (matcher.find(2) && matcher.find(3) && username.equals(matcher.group(2).toLowerCase())) {
                Uri data2 = Uri.parse(urlFinal);
                int threadId2 = Utilities.parseInt((CharSequence) data2.getQueryParameter("thread")).intValue();
                int commentId = Utilities.parseInt((CharSequence) data2.getQueryParameter("comment")).intValue();
                if (threadId2 != 0 || commentId != 0) {
                    return false;
                }
                int messageId2 = Integer.parseInt(matcher.group(3));
                this.showScrollToMessageError = true;
                if (this.chatMode == 2) {
                    this.chatActivityDelegate.openReplyMessage(messageId2);
                    finishFragment();
                } else {
                    int timestampFromLink = LaunchActivity.getTimestampFromLink(data2);
                    this.startFromVideoTimestamp = timestampFromLink;
                    if (timestampFromLink >= 0) {
                        this.startFromVideoMessageId = messageId2;
                    }
                    scrollToMessageId(messageId2, fromMessageId, true, 0, false, 0);
                }
                return true;
            } else if (urlFinal.startsWith("tg:resolve") || urlFinal.startsWith("tg://resolve")) {
                String urlTmp2 = urlFinal.replace("tg:resolve", "tg://telegram.org").replace("tg://resolve", "tg://telegram.org");
                Uri data3 = Uri.parse(urlTmp2);
                String usernameE = data3.getQueryParameter("domain").toLowerCase();
                int messageId3 = Utilities.parseInt((CharSequence) data3.getQueryParameter("post")).intValue();
                int threadId3 = Utilities.parseInt((CharSequence) data3.getQueryParameter("thread")).intValue();
                int commentId2 = Utilities.parseInt((CharSequence) data3.getQueryParameter("comment")).intValue();
                if (!username.equals(usernameE) || messageId3 == 0 || threadId3 != 0 || commentId2 != 0) {
                    return false;
                }
                if (this.chatMode == 2) {
                    this.chatActivityDelegate.openReplyMessage(messageId3);
                    finishFragment();
                } else {
                    scrollToMessageId(messageId3, fromMessageId, true, 0, false, 0);
                }
                return true;
            } else {
                Matcher matcher2 = voiceChatUrlPattern.matcher(urlFinal);
                try {
                    if (matcher2.find(2) && matcher2.find(3) && username.equals(matcher2.group(2).toLowerCase())) {
                        String voicechat = Uri.parse(urlFinal).getQueryParameter("voicechat");
                        if (!TextUtils.isEmpty(voicechat)) {
                            this.voiceChatHash = voicechat;
                            checkGroupCallJoin(true);
                            return true;
                        }
                    }
                } catch (Exception e) {
                    FileLog.e(e);
                }
            }
        } else {
            if (privateMsgUrlPattern == null) {
                privateMsgUrlPattern = Pattern.compile("(https://)?t.me/c/([0-9]+)/([0-9]+)");
            }
            Matcher matcher3 = privateMsgUrlPattern.matcher(urlFinal);
            if (matcher3.find(2) && matcher3.find(3)) {
                long channelId2 = Long.parseLong(matcher3.group(2));
                int messageId4 = Integer.parseInt(matcher3.group(3));
                if (channelId2 == this.currentChat.id && messageId4 != 0) {
                    Uri data4 = Uri.parse(urlFinal);
                    int threadId4 = Utilities.parseInt((CharSequence) data4.getQueryParameter("thread")).intValue();
                    int commentId3 = Utilities.parseInt((CharSequence) data4.getQueryParameter("comment")).intValue();
                    if (threadId4 != 0 || commentId3 != 0) {
                        return false;
                    }
                    this.showScrollToMessageError = true;
                    if (this.chatMode == 2) {
                        this.chatActivityDelegate.openReplyMessage(messageId4);
                        finishFragment();
                    } else {
                        scrollToMessageId(messageId4, fromMessageId, true, 0, false, 0);
                    }
                    return true;
                }
            }
        }
        return false;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public void setInMenuMode(boolean value) {
        super.setInMenuMode(value);
        if (this.actionBar != null) {
            this.actionBar.createMenu().setVisibility(this.inMenuMode ? 8 : 0);
        }
    }

    public void setPreloadedSticker(TLRPC.Document preloadedSticker, boolean historyEmpty) {
        this.preloadedGreetingsSticker = preloadedSticker;
        this.forceHistoryEmpty = historyEmpty;
    }

    /* loaded from: classes4.dex */
    public class ChatScrollCallback extends RecyclerAnimationScrollHelper.AnimationCallback {
        private boolean lastBottom;
        private int lastItemOffset;
        private int lastPadding;
        private MessageObject scrollTo;

        public ChatScrollCallback() {
            ChatActivity.this = this$0;
        }

        static /* synthetic */ MessageObject access$34002(ChatScrollCallback x0, MessageObject x1) {
            x0.scrollTo = x1;
            return x1;
        }

        static /* synthetic */ boolean access$34102(ChatScrollCallback x0, boolean x1) {
            x0.lastBottom = x1;
            return x1;
        }

        static /* synthetic */ int access$34202(ChatScrollCallback x0, int x1) {
            x0.lastItemOffset = x1;
            return x1;
        }

        static /* synthetic */ int access$34302(ChatScrollCallback x0, int x1) {
            x0.lastPadding = x1;
            return x1;
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimationCallback
        public void onStartAnimation() {
            super.onStartAnimation();
            ChatActivity chatActivity = ChatActivity.this;
            chatActivity.scrollCallbackAnimationIndex = chatActivity.getNotificationCenter().setAnimationInProgress(ChatActivity.this.scrollCallbackAnimationIndex, ChatActivity.allowedNotificationsDuringChatListAnimations);
            if (ChatActivity.this.pinchToZoomHelper.isInOverlayMode()) {
                ChatActivity.this.pinchToZoomHelper.finishZoom();
            }
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimationCallback
        public void onEndAnimation() {
            if (this.scrollTo != null) {
                ChatActivity.this.chatAdapter.updateRowsSafe();
                int lastItemPosition = ChatActivity.this.chatAdapter.messagesStartRow + ChatActivity.this.messages.indexOf(this.scrollTo);
                if (lastItemPosition >= 0) {
                    ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(lastItemPosition, (int) ((this.lastItemOffset + this.lastPadding) - ChatActivity.this.chatListViewPaddingTop), this.lastBottom);
                }
            } else {
                ChatActivity.this.chatAdapter.updateRowsSafe();
                ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(0, 0, true);
            }
            this.scrollTo = null;
            ChatActivity.this.checkTextureViewPosition = true;
            ChatActivity.this.updateVisibleRows();
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ChatScrollCallback$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.ChatScrollCallback.this.m2022x2c20c41e();
                }
            });
        }

        /* renamed from: lambda$onEndAnimation$0$org-telegram-ui-ChatActivity$ChatScrollCallback */
        public /* synthetic */ void m2022x2c20c41e() {
            ChatActivity.this.getNotificationCenter().onAnimationFinish(ChatActivity.this.scrollCallbackAnimationIndex);
        }

        @Override // org.telegram.ui.Components.RecyclerAnimationScrollHelper.AnimationCallback
        public void recycleView(View view) {
            if (view instanceof ChatMessageCell) {
                ChatActivity.this.chatMessageCellsCache.add((ChatMessageCell) view);
            }
        }
    }

    public static boolean isClickableLink(String str) {
        return str.startsWith("https://") || str.startsWith("@") || str.startsWith("#") || str.startsWith("$") || str.startsWith("video?");
    }

    public SimpleTextView getReplyNameTextView() {
        return this.replyNameTextView;
    }

    public SimpleTextView getReplyObjectTextView() {
        return this.replyObjectTextView;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public ArrayList<ThemeDescription> getThemeDescriptions() {
        if (!this.isPauseOnThemePreview) {
            ThemeDescription.ThemeDescriptionDelegate selectedBackgroundDelegate = new ThemeDescription.ThemeDescriptionDelegate() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda149
                @Override // org.telegram.ui.ActionBar.ThemeDescription.ThemeDescriptionDelegate
                public final void didSetColor() {
                    ChatActivity.this.m1862lambda$getThemeDescriptions$246$orgtelegramuiChatActivity();
                }

                @Override // org.telegram.ui.ActionBar.ThemeDescription.ThemeDescriptionDelegate
                public /* synthetic */ void onAnimationProgress(float f) {
                    ThemeDescription.ThemeDescriptionDelegate.CC.$default$onAnimationProgress(this, f);
                }
            };
            ArrayList<ThemeDescription> themeDescriptions = new ArrayList<>();
            themeDescriptions.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, Theme.key_chat_wallpaper));
            themeDescriptions.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, Theme.key_chat_wallpaper_gradient_to1));
            themeDescriptions.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, Theme.key_chat_wallpaper_gradient_to2));
            themeDescriptions.add(new ThemeDescription(this.fragmentView, 0, null, null, null, null, Theme.key_chat_wallpaper_gradient_to3));
            themeDescriptions.add(new ThemeDescription(this.messagesSearchListView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_windowBackgroundWhite));
            if (this.reportType < 0) {
                themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_actionBarDefault));
                themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, null, null, null, null, Theme.key_actionBarDefaultIcon));
                themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarDefaultSelector));
                themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_TITLECOLOR, null, null, null, null, Theme.key_actionBarDefaultTitle));
                themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBTITLECOLOR, null, null, null, null, Theme.key_actionBarDefaultSubtitle));
            } else {
                themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_actionBarActionModeDefault));
                themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultIcon));
                themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultSelector));
                themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_TITLECOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultIcon));
                themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBTITLECOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultIcon));
            }
            themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBMENUBACKGROUND, null, null, null, selectedBackgroundDelegate, Theme.key_actionBarDefaultSubmenuBackground));
            themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBMENUITEM, null, null, null, selectedBackgroundDelegate, Theme.key_actionBarDefaultSubmenuItem));
            themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBMENUITEM | ThemeDescription.FLAG_IMAGECOLOR, null, null, null, selectedBackgroundDelegate, Theme.key_actionBarDefaultSubmenuItemIcon));
            themeDescriptions.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LISTGLOWCOLOR, null, null, null, null, Theme.key_actionBarDefault));
            ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
            themeDescriptions.add(new ThemeDescription(chatAvatarContainer != null ? chatAvatarContainer.getTitleTextView() : null, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_actionBarDefaultTitle));
            ChatAvatarContainer chatAvatarContainer2 = this.avatarContainer;
            themeDescriptions.add(new ThemeDescription(chatAvatarContainer2 != null ? chatAvatarContainer2.getTitleTextView() : null, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_actionBarDefaultSubtitle));
            ChatAvatarContainer chatAvatarContainer3 = this.avatarContainer;
            themeDescriptions.add(new ThemeDescription(chatAvatarContainer3 != null ? chatAvatarContainer3.getSubtitleTextView() : null, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, (Class[]) null, new Paint[]{Theme.chat_statusPaint, Theme.chat_statusRecordPaint}, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_status, (Object) null));
            ChatAvatarContainer chatAvatarContainer4 = this.avatarContainer;
            themeDescriptions.add(new ThemeDescription(chatAvatarContainer4 != null ? chatAvatarContainer4.getSubtitleTextView() : null, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, (Class[]) null, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_actionBarDefaultSubtitle, (Object) null));
            themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarDefaultSelector));
            themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SEARCH, null, null, null, null, Theme.key_actionBarDefaultSearch));
            themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SEARCHPLACEHOLDER, null, null, null, null, Theme.key_actionBarDefaultSearchPlaceholder));
            themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SEARCHPLACEHOLDER, null, null, null, null, Theme.key_actionBarDefaultSearchPlaceholder));
            themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_AM_ITEMSCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultIcon));
            themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_AM_BACKGROUND, null, null, null, null, Theme.key_actionBarActionModeDefault));
            themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_AM_TOPBACKGROUND, null, null, null, null, Theme.key_actionBarActionModeDefaultTop));
            themeDescriptions.add(new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_AM_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultSelector));
            themeDescriptions.add(new ThemeDescription(this.selectedMessagesCountTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultIcon));
            ChatAvatarContainer chatAvatarContainer5 = this.avatarContainer;
            themeDescriptions.add(new ThemeDescription(chatAvatarContainer5 != null ? chatAvatarContainer5.getTitleTextView() : null, 0, null, null, new Drawable[]{Theme.chat_muteIconDrawable}, null, Theme.key_chat_muteIcon));
            ChatAvatarContainer chatAvatarContainer6 = this.avatarContainer;
            themeDescriptions.add(new ThemeDescription(chatAvatarContainer6 != null ? chatAvatarContainer6.getTitleTextView() : null, 0, null, null, new Drawable[]{Theme.chat_lockIconDrawable}, null, Theme.key_chat_lockIcon));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, Theme.avatarDrawables, null, Theme.key_avatar_text));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundRed));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundOrange));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundViolet));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundGreen));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundCyan));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundBlue));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundPink));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageRed));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageOrange));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageViolet));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageGreen));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageCyan));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageBlue));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessagePink));
            Theme.MessageDrawable msgInDrawable = (Theme.MessageDrawable) getThemedDrawable(Theme.key_drawable_msgIn);
            Theme.MessageDrawable msgInMediaDrawable = (Theme.MessageDrawable) getThemedDrawable(Theme.key_drawable_msgInMedia);
            Theme.MessageDrawable msgInSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable(Theme.key_drawable_msgInSelected);
            Theme.MessageDrawable msgInMediaSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable(Theme.key_drawable_msgInMediaSelected);
            Theme.MessageDrawable msgOutDrawable = (Theme.MessageDrawable) getThemedDrawable(Theme.key_drawable_msgOut);
            Theme.MessageDrawable msgOutMediaDrawable = (Theme.MessageDrawable) getThemedDrawable(Theme.key_drawable_msgOutMedia);
            Theme.MessageDrawable msgOutSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable(Theme.key_drawable_msgOutSelected);
            Theme.MessageDrawable msgOutMediaSelectedDrawable = (Theme.MessageDrawable) getThemedDrawable(Theme.key_drawable_msgOutMediaSelected);
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, BotHelpCell.class}, null, new Drawable[]{msgInDrawable, msgInMediaDrawable}, null, Theme.key_chat_inBubble));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{msgInSelectedDrawable, msgInMediaSelectedDrawable}, null, Theme.key_chat_inBubbleSelected));
            if (msgInDrawable != null) {
                themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, msgInDrawable.getShadowDrawables(), null, Theme.key_chat_inBubbleShadow));
                themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, msgInMediaDrawable.getShadowDrawables(), null, Theme.key_chat_inBubbleShadow));
                themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, msgOutDrawable.getShadowDrawables(), null, Theme.key_chat_outBubbleShadow));
                themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, msgOutMediaDrawable.getShadowDrawables(), null, Theme.key_chat_outBubbleShadow));
            }
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{msgOutDrawable, msgOutMediaDrawable}, null, Theme.key_chat_outBubble));
            if (!this.themeDelegate.isThemeChangeAvailable()) {
                themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{msgOutDrawable, msgOutMediaDrawable}, null, Theme.key_chat_outBubbleGradient1));
                themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{msgOutDrawable, msgOutMediaDrawable}, null, Theme.key_chat_outBubbleGradient2));
                themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{msgOutDrawable, msgOutMediaDrawable}, null, Theme.key_chat_outBubbleGradient3));
            }
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{msgOutSelectedDrawable, msgOutMediaSelectedDrawable}, null, Theme.key_chat_outBubbleSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{msgOutSelectedDrawable, msgOutMediaSelectedDrawable}, null, Theme.key_chat_outBubbleGradientSelectedOverlay));
            themeDescriptions.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActionCell.class}, getThemedPaint(Theme.key_paint_chatActionText), null, null, Theme.key_chat_serviceText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatActionCell.class}, getThemedPaint(Theme.key_paint_chatActionText), null, null, Theme.key_chat_serviceLink));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_botCardDrawable, getThemedDrawable(Theme.key_drawable_shareIcon), getThemedDrawable(Theme.key_drawable_replyIcon), getThemedDrawable(Theme.key_drawable_botInline), getThemedDrawable(Theme.key_drawable_botLink), getThemedDrawable(Theme.key_drawable_botInvite), getThemedDrawable(Theme.key_drawable_goIcon), getThemedDrawable(Theme.key_drawable_commentSticker)}, null, Theme.key_chat_serviceIcon));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, ChatActionCell.class}, null, null, null, Theme.key_chat_serviceBackground));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, ChatActionCell.class}, null, null, null, Theme.key_chat_serviceBackgroundSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, BotHelpCell.class}, null, null, null, Theme.key_chat_messageTextIn));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_messageTextOut));
            themeDescriptions.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatMessageCell.class, BotHelpCell.class}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messageLinkIn, (Object) null));
            themeDescriptions.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatMessageCell.class}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messageLinkOut, (Object) null));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgNoSoundDrawable}, null, Theme.key_chat_mediaTimeText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable(Theme.key_drawable_msgOutCheck)}, null, Theme.key_chat_outSentCheck));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable(Theme.key_drawable_msgOutCheckSelected)}, null, Theme.key_chat_outSentCheckSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable(Theme.key_drawable_msgOutCheckRead), getThemedDrawable(Theme.key_drawable_msgOutHalfCheck)}, null, Theme.key_chat_outSentCheckRead));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable(Theme.key_drawable_msgOutCheckReadSelected), getThemedDrawable(Theme.key_drawable_msgOutHalfCheckSelected)}, null, Theme.key_chat_outSentCheckReadSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outSentClock));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outSentClockSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inSentClock));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inSentClockSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaCheckDrawable, Theme.chat_msgMediaHalfCheckDrawable}, null, Theme.key_chat_mediaSentCheck));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable(Theme.key_drawable_msgStickerHalfCheck), getThemedDrawable(Theme.key_drawable_msgStickerCheck), getThemedDrawable(Theme.key_drawable_msgStickerClock), getThemedDrawable(Theme.key_drawable_msgStickerViews), getThemedDrawable(Theme.key_drawable_msgStickerReplies), getThemedDrawable(Theme.key_drawable_msgStickerPinned)}, null, Theme.key_chat_serviceText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_mediaSentClock));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable(Theme.key_drawable_msgOutViews), getThemedDrawable("drawableMsgOutReplies"), getThemedDrawable(Theme.key_drawable_msgOutPinned)}, null, Theme.key_chat_outViews));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable(Theme.key_drawable_msgOutViewsSelected), getThemedDrawable("drawableMsgOutReplies"), getThemedDrawable(Theme.key_drawable_msgOutPinnedSelected)}, null, Theme.key_chat_outViewsSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInViewsDrawable, Theme.chat_msgInRepliesDrawable, Theme.chat_msgInPinnedDrawable}, null, Theme.key_chat_inViews));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInViewsSelectedDrawable, Theme.chat_msgInRepliesSelectedDrawable, Theme.chat_msgInPinnedSelectedDrawable}, null, Theme.key_chat_inViewsSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaViewsDrawable, Theme.chat_msgMediaRepliesDrawable, Theme.chat_msgMediaPinnedDrawable}, null, Theme.key_chat_mediaViews));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable(Theme.key_drawable_msgOutMenu)}, null, Theme.key_chat_outMenu));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable(Theme.key_drawable_msgOutMenuSelected)}, null, Theme.key_chat_outMenuSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInMenuDrawable}, null, Theme.key_chat_inMenu));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInMenuSelectedDrawable}, null, Theme.key_chat_inMenuSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaMenuDrawable}, null, Theme.key_chat_mediaMenu));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable(Theme.key_drawable_msgOutInstant)}, null, Theme.key_chat_outInstant));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInInstantDrawable, Theme.chat_commentDrawable, Theme.chat_commentArrowDrawable}, null, Theme.key_chat_inInstant));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable(Theme.key_drawable_msgOutCallAudio), getThemedDrawable("drawableMsgOutCallVideo")}, null, Theme.key_chat_outInstant));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{getThemedDrawable(Theme.key_drawable_msgOutCallAudioSelected), getThemedDrawable("drawableMsgOutCallVideo")}, null, Theme.key_chat_outInstant));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, Theme.chat_msgInCallDrawable, null, Theme.key_chat_inInstant));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, Theme.chat_msgInCallSelectedDrawable, null, Theme.key_chat_inInstantSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgCallUpGreenDrawable}, null, Theme.key_chat_outGreenCall));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgCallDownRedDrawable}, null, Theme.key_chat_inRedCall));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgCallDownGreenDrawable}, null, Theme.key_chat_inGreenCall));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_msgErrorPaint, null, null, Theme.key_chat_sentError));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgErrorDrawable}, null, Theme.key_chat_sentErrorIcon));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, selectedBackgroundDelegate, Theme.key_chat_selectedBackground));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_durationPaint, null, null, Theme.key_chat_previewDurationText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_gamePaint, null, null, Theme.key_chat_previewGameText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPreviewInstantText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPreviewInstantText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPreviewInstantSelectedText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPreviewInstantSelectedText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_deleteProgressPaint, null, null, Theme.key_chat_secretTimeText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerNameText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, getThemedPaint(Theme.key_paint_chatBotButton), null, null, Theme.key_chat_botButtonText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_botProgressPaint, null, null, Theme.key_chat_botProgress));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, getThemedPaint(Theme.key_paint_chatTimeBackground), null, null, Theme.key_chat_mediaTimeBackground));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inForwardedNameText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outForwardedNameText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPsaNameText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPsaNameText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inViaBotNameText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outViaBotNameText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerViaBotNameText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyLine));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyLine));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerReplyLine));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyNameText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyNameText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerReplyNameText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyMessageText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyMessageText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyMediaMessageText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyMediaMessageText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyMediaMessageSelectedText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyMediaMessageSelectedText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerReplyMessageText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPreviewLine));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPreviewLine));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inSiteNameText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outSiteNameText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inContactNameText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outContactNameText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inContactPhoneText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inContactPhoneSelectedText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outContactPhoneText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outContactPhoneSelectedText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_mediaProgress));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioProgress));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioProgress));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSelectedProgress));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSelectedProgress));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_mediaTimeText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inTimeText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outTimeText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inTimeSelectedText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAdminText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAdminSelectedText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAdminText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAdminSelectedText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outTimeSelectedText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioPerformerText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioPerformerSelectedText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioPerformerText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioPerformerSelectedText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioTitleText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioTitleText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioDurationText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioDurationText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioDurationSelectedText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioDurationSelectedText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSeekbar));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSeekbar));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSeekbarSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSeekbarSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSeekbarFill));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioCacheSeekbar));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSeekbarFill));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioCacheSeekbar));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVoiceSeekbar));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVoiceSeekbar));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVoiceSeekbarSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVoiceSeekbarSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVoiceSeekbarFill));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVoiceSeekbarFill));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileProgress));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileProgress));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileProgressSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileProgressSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileNameText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileNameText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileInfoText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileInfoText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileInfoSelectedText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileInfoSelectedText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileBackground));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileBackground));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileBackgroundSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileBackgroundSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVenueInfoText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVenueInfoText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVenueInfoSelectedText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVenueInfoSelectedText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_mediaInfoText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_urlPaint, null, null, Theme.key_chat_linkSelectBackground));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_outUrlPaint, null, null, Theme.key_chat_outLinkSelectBackground));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_textSearchSelectionPaint, null, null, Theme.key_chat_textSelectBackground));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outLoader));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outMediaIcon));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outLoaderSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outMediaIconSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inLoader));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inMediaIcon));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inLoaderSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inMediaIconSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[0][0], Theme.chat_photoStatesDrawables[1][0], Theme.chat_photoStatesDrawables[2][0], Theme.chat_photoStatesDrawables[3][0]}, null, Theme.key_chat_mediaLoaderPhoto));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[0][0], Theme.chat_photoStatesDrawables[1][0], Theme.chat_photoStatesDrawables[2][0], Theme.chat_photoStatesDrawables[3][0]}, null, Theme.key_chat_mediaLoaderPhotoIcon));
            themeDescriptions.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[0][1], Theme.chat_photoStatesDrawables[1][1], Theme.chat_photoStatesDrawables[2][1], Theme.chat_photoStatesDrawables[3][1]}, null, Theme.key_chat_mediaLoaderPhotoSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[0][1], Theme.chat_photoStatesDrawables[1][1], Theme.chat_photoStatesDrawables[2][1], Theme.chat_photoStatesDrawables[3][1]}, null, Theme.key_chat_mediaLoaderPhotoIconSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[7][0], Theme.chat_photoStatesDrawables[8][0]}, null, Theme.key_chat_outLoaderPhoto));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[7][0], Theme.chat_photoStatesDrawables[8][0]}, null, Theme.key_chat_outLoaderPhotoIcon));
            themeDescriptions.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[7][1], Theme.chat_photoStatesDrawables[8][1]}, null, Theme.key_chat_outLoaderPhotoSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[7][1], Theme.chat_photoStatesDrawables[8][1]}, null, Theme.key_chat_outLoaderPhotoIconSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[10][0], Theme.chat_photoStatesDrawables[11][0]}, null, Theme.key_chat_inLoaderPhoto));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[10][0], Theme.chat_photoStatesDrawables[11][0]}, null, Theme.key_chat_inLoaderPhotoIcon));
            themeDescriptions.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[10][1], Theme.chat_photoStatesDrawables[11][1]}, null, Theme.key_chat_inLoaderPhotoSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[10][1], Theme.chat_photoStatesDrawables[11][1]}, null, Theme.key_chat_inLoaderPhotoIconSelected));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[12][0]}, null, Theme.key_chat_inFileIcon));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[12][1]}, null, Theme.key_chat_inFileSelectedIcon));
            themeDescriptions.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[0]}, null, Theme.key_chat_inContactBackground));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[0]}, null, Theme.key_chat_inContactIcon));
            themeDescriptions.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[1]}, null, Theme.key_chat_outContactBackground));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[1]}, null, Theme.key_chat_outContactIcon));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inLocationBackground));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_locationDrawable[0]}, null, Theme.key_chat_inLocationIcon));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outLocationBackground));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_locationDrawable[1]}, null, Theme.key_chat_outLocationIcon));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPollCorrectAnswer));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPollCorrectAnswer));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPollWrongAnswer));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPollWrongAnswer));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_pollHintDrawable[0]}, null, Theme.key_chat_inPreviewInstantText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_pollHintDrawable[1]}, null, Theme.key_chat_outPreviewInstantText));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_psaHelpDrawable[0]}, null, Theme.key_chat_inViews));
            themeDescriptions.add(new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_psaHelpDrawable[1]}, null, Theme.key_chat_outViews));
            if (!this.themeDelegate.isThemeChangeAvailable()) {
                themeDescriptions.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, Theme.avatarDrawables, null, Theme.key_avatar_text));
                themeDescriptions.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_countPaint, null, null, Theme.key_chats_unreadCounter));
                themeDescriptions.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, (String[]) null, new Paint[]{Theme.dialogs_namePaint[0], Theme.dialogs_namePaint[1], Theme.dialogs_searchNamePaint}, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chats_name));
                themeDescriptions.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, (String[]) null, new Paint[]{Theme.dialogs_nameEncryptedPaint[0], Theme.dialogs_nameEncryptedPaint[1], Theme.dialogs_searchNameEncryptedPaint}, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chats_secretName));
                themeDescriptions.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_lockDrawable}, null, Theme.key_chats_secretIcon));
                themeDescriptions.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_scamDrawable, Theme.dialogs_fakeDrawable}, null, Theme.key_chats_draft));
                themeDescriptions.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_messagePaint[1], null, null, Theme.key_chats_message_threeLines));
                themeDescriptions.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_messageNamePaint, null, null, Theme.key_chats_nameMessage_threeLines));
                themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chats_nameMessage));
                themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chats_attachMessage));
                themeDescriptions.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, (String[]) null, Theme.dialogs_messagePrintingPaint, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chats_actionMessage));
                themeDescriptions.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, Theme.dialogs_timePaint, null, null, Theme.key_chats_date));
                themeDescriptions.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_checkDrawable}, null, Theme.key_chats_sentCheck));
                themeDescriptions.add(new ThemeDescription(this.messagesSearchListView, 0, new Class[]{DialogCell.class}, null, new Drawable[]{Theme.dialogs_checkReadDrawable, Theme.dialogs_halfCheckDrawable}, null, Theme.key_chats_sentReadCheck));
            }
            themeDescriptions.add(new ThemeDescription(this.mentionContainer, 0, null, getThemedPaint(Theme.key_paint_chatComposeBackground), null, null, Theme.key_chat_messagePanelBackground));
            themeDescriptions.add(new ThemeDescription(this.mentionContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, Theme.key_chat_messagePanelShadow));
            themeDescriptions.add(new ThemeDescription(this.mentionContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowRoundDrawable}, null, Theme.key_chat_messagePanelBackground));
            themeDescriptions.add(new ThemeDescription(this.searchContainer, 0, null, getThemedPaint(Theme.key_paint_chatComposeBackground), null, null, Theme.key_chat_messagePanelBackground));
            themeDescriptions.add(new ThemeDescription(this.searchContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, Theme.key_chat_messagePanelShadow));
            themeDescriptions.add(new ThemeDescription(this.bottomOverlay, 0, null, getThemedPaint(Theme.key_paint_chatComposeBackground), null, null, Theme.key_chat_messagePanelBackground));
            themeDescriptions.add(new ThemeDescription(this.bottomOverlay, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, Theme.key_chat_messagePanelShadow));
            themeDescriptions.add(new ThemeDescription(this.bottomOverlayChat, 0, null, getThemedPaint(Theme.key_paint_chatComposeBackground), null, null, Theme.key_chat_messagePanelBackground));
            themeDescriptions.add(new ThemeDescription(this.bottomOverlayChat, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, Theme.key_chat_messagePanelShadow));
            themeDescriptions.add(new ThemeDescription(this.bottomMessagesActionContainer, 0, null, getThemedPaint(Theme.key_paint_chatComposeBackground), null, null, Theme.key_chat_messagePanelBackground));
            themeDescriptions.add(new ThemeDescription(this.bottomMessagesActionContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, Theme.key_chat_messagePanelShadow));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, null, getThemedPaint(Theme.key_paint_chatComposeBackground), null, null, Theme.key_chat_messagePanelBackground));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, Theme.key_chat_messagePanelShadow));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelText));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_CURSORCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelCursor));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_HINTTEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelHint));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"sendButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelSend));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"sendButton"}, null, null, 24, null, Theme.key_chat_messagePanelSend));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"botButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelIcons));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"botButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_listSelector));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"notifyButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelIcons));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR | ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatActivityEnterView.class}, new String[]{"scheduledButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelIcons));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"scheduledButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_recordedVoiceDot));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"scheduledButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_listSelector));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"attachButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelIcons));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"attachButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_listSelector));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"audioSendButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelIcons));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"videoSendButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelIcons));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"notifyButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelVideoFrame));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"notifyButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_listSelector));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"videoTimelineView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelSend));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"micDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelVoicePressed));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"cameraDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelVoicePressed));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"sendDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelVoicePressed));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, null, null, Theme.key_chat_messagePanelVoiceLock));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, null, null, null, Theme.key_chat_messagePanelVoiceLockBackground));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockShadowDrawable"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelVoiceLockShadow));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"recordDeleteImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_listSelector));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatActivityEnterView.class}, new String[]{"recordedAudioBackground"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_recordedVoiceBackground));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, null, null, Theme.key_chat_recordTime));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, null, null, Theme.key_chat_recordVoiceCancel));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordedAudioTimeTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelVoiceDuration));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, null, null, null, null, Theme.key_chat_recordVoiceCancel));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"doneButtonProgress"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_contextProgressInner1));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"doneButtonProgress"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_contextProgressOuter1));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"cancelBotButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelCancelInlineBot));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"cancelBotButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_listSelector));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"redDotPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_recordedVoiceDot));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"paint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelVoiceBackground));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"seekBarWaveform"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_recordedVoiceProgress));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"seekBarWaveform"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_recordedVoiceProgressInner));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"dotPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_emojiPanelNewTrending));
            themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, selectedBackgroundDelegate, Theme.key_chat_recordedVoicePlayPause));
            ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            themeDescriptions.add(new ThemeDescription(chatActivityEnterView != null ? chatActivityEnterView.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelBackground));
            ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
            themeDescriptions.add(new ThemeDescription(chatActivityEnterView2 != null ? chatActivityEnterView2.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelShadowLine));
            ChatActivityEnterView chatActivityEnterView3 = this.chatActivityEnterView;
            themeDescriptions.add(new ThemeDescription(chatActivityEnterView3 != null ? chatActivityEnterView3.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelEmptyText));
            ChatActivityEnterView chatActivityEnterView4 = this.chatActivityEnterView;
            themeDescriptions.add(new ThemeDescription(chatActivityEnterView4 != null ? chatActivityEnterView4.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelIcon));
            ChatActivityEnterView chatActivityEnterView5 = this.chatActivityEnterView;
            themeDescriptions.add(new ThemeDescription(chatActivityEnterView5 != null ? chatActivityEnterView5.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelIconSelected));
            ChatActivityEnterView chatActivityEnterView6 = this.chatActivityEnterView;
            themeDescriptions.add(new ThemeDescription(chatActivityEnterView6 != null ? chatActivityEnterView6.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelStickerPackSelector));
            ChatActivityEnterView chatActivityEnterView7 = this.chatActivityEnterView;
            themeDescriptions.add(new ThemeDescription(chatActivityEnterView7 != null ? chatActivityEnterView7.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelBackspace));
            ChatActivityEnterView chatActivityEnterView8 = this.chatActivityEnterView;
            themeDescriptions.add(new ThemeDescription(chatActivityEnterView8 != null ? chatActivityEnterView8.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelTrendingTitle));
            ChatActivityEnterView chatActivityEnterView9 = this.chatActivityEnterView;
            themeDescriptions.add(new ThemeDescription(chatActivityEnterView9 != null ? chatActivityEnterView9.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelTrendingDescription));
            ChatActivityEnterView chatActivityEnterView10 = this.chatActivityEnterView;
            themeDescriptions.add(new ThemeDescription(chatActivityEnterView10 != null ? chatActivityEnterView10.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelBadgeText));
            ChatActivityEnterView chatActivityEnterView11 = this.chatActivityEnterView;
            themeDescriptions.add(new ThemeDescription(chatActivityEnterView11 != null ? chatActivityEnterView11.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelBadgeBackground));
            ChatActivityEnterView chatActivityEnterView12 = this.chatActivityEnterView;
            themeDescriptions.add(new ThemeDescription(chatActivityEnterView12 != null ? chatActivityEnterView12.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, selectedBackgroundDelegate, Theme.key_chat_emojiBottomPanelIcon));
            ChatActivityEnterView chatActivityEnterView13 = this.chatActivityEnterView;
            themeDescriptions.add(new ThemeDescription(chatActivityEnterView13 != null ? chatActivityEnterView13.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, selectedBackgroundDelegate, Theme.key_chat_emojiSearchIcon));
            ChatActivityEnterView chatActivityEnterView14 = this.chatActivityEnterView;
            themeDescriptions.add(new ThemeDescription(chatActivityEnterView14 != null ? chatActivityEnterView14.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelStickerSetNameHighlight));
            ChatActivityEnterView chatActivityEnterView15 = this.chatActivityEnterView;
            themeDescriptions.add(new ThemeDescription(chatActivityEnterView15 != null ? chatActivityEnterView15.getEmojiView() : null, 0, new Class[]{EmojiView.class}, (String[]) null, (Paint[]) null, (Drawable[]) null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelStickerPackSelectorLine));
            ChatActivityEnterView chatActivityEnterView16 = this.chatActivityEnterView;
            if (chatActivityEnterView16 != null) {
                TrendingStickersAlert trendingStickersAlert = chatActivityEnterView16.getTrendingStickersAlert();
                if (trendingStickersAlert != null) {
                    themeDescriptions.addAll(trendingStickersAlert.getThemeDescriptions());
                }
                themeDescriptions.add(new ThemeDescription((View) null, 0, (Class[]) null, (String[]) null, (Paint[]) null, new Drawable[]{this.chatActivityEnterView.getStickersArrowDrawable()}, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_messagePanelIcons));
            }
            int a = 0;
            while (a < 2) {
                UndoView v = a == 0 ? this.undoView : this.topUndoView;
                themeDescriptions.add(new ThemeDescription(v, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_undo_background));
                themeDescriptions.add(new ThemeDescription(v, 0, new Class[]{UndoView.class}, new String[]{"undoImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_undo_cancelColor));
                themeDescriptions.add(new ThemeDescription(v, 0, new Class[]{UndoView.class}, new String[]{"undoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_undo_cancelColor));
                themeDescriptions.add(new ThemeDescription(v, 0, new Class[]{UndoView.class}, new String[]{"infoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_undo_infoColor));
                themeDescriptions.add(new ThemeDescription(v, 0, new Class[]{UndoView.class}, new String[]{"subinfoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_undo_infoColor));
                themeDescriptions.add(new ThemeDescription(v, ThemeDescription.FLAG_LINKCOLOR, new Class[]{UndoView.class}, new String[]{"subinfoTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_undo_cancelColor));
                themeDescriptions.add(new ThemeDescription(v, 0, new Class[]{UndoView.class}, new String[]{"textPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_undo_infoColor));
                themeDescriptions.add(new ThemeDescription(v, 0, new Class[]{UndoView.class}, new String[]{"progressPaint"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_undo_infoColor));
                themeDescriptions.add(new ThemeDescription(v, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{UndoView.class}, new String[]{"leftImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_undo_infoColor));
                a++;
            }
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_botKeyboardButtonText));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_botKeyboardButtonBackground));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_botKeyboardButtonBackgroundPressed));
            themeDescriptions.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_BACKGROUND | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"frameLayout"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_inappPlayerBackground));
            themeDescriptions.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{FragmentContextView.class}, new String[]{"playButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_inappPlayerPlayPause));
            themeDescriptions.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_inappPlayerTitle));
            themeDescriptions.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_inappPlayerPerformer));
            themeDescriptions.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_FASTSCROLL, new Class[]{FragmentContextView.class}, new String[]{"subtitleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_inappPlayerClose));
            themeDescriptions.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{FragmentContextView.class}, new String[]{"closeButton"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_inappPlayerClose));
            themeDescriptions.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_BACKGROUND | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"frameLayout"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_returnToCallBackground));
            themeDescriptions.add(new ThemeDescription(this.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_returnToCallText));
            themeDescriptions.add(new ThemeDescription(this.pinnedLineView, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_topPanelLine));
            themeDescriptions.add(new ThemeDescription(this.pinnedLineView, 0, null, null, null, selectedBackgroundDelegate, Theme.key_windowBackgroundWhite));
            themeDescriptions.add(new ThemeDescription(this.pinnedCounterTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelTitle));
            for (int a2 = 0; a2 < 2; a2++) {
                themeDescriptions.add(new ThemeDescription(this.pinnedNameTextView[a2], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelTitle));
                themeDescriptions.add(new ThemeDescription(this.pinnedMessageTextView[a2], ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelMessage));
            }
            themeDescriptions.add(new ThemeDescription(this.alertNameTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelTitle));
            themeDescriptions.add(new ThemeDescription(this.alertTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelMessage));
            themeDescriptions.add(new ThemeDescription(this.closePinned, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_topPanelClose));
            themeDescriptions.add(new ThemeDescription(this.pinnedListButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_topPanelClose));
            themeDescriptions.add(new ThemeDescription(this.closeReportSpam, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_topPanelClose));
            themeDescriptions.add(new ThemeDescription(this.topChatPanelView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_topPanelBackground));
            themeDescriptions.add(new ThemeDescription(this.alertView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_topPanelBackground));
            themeDescriptions.add(new ThemeDescription(this.pinnedMessageView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_topPanelBackground));
            themeDescriptions.add(new ThemeDescription(this.addToContactsButton, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_addContact));
            themeDescriptions.add(new ThemeDescription(this.reportSpamButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, null, null, null, null, Theme.key_chat_reportSpam));
            themeDescriptions.add(new ThemeDescription(this.reportSpamButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, null, null, null, null, Theme.key_chat_addContact));
            themeDescriptions.add(new ThemeDescription(this.replyLineView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_chat_replyPanelLine));
            themeDescriptions.add(new ThemeDescription(this.replyNameTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_replyPanelName));
            themeDescriptions.add(new ThemeDescription(this.replyObjectTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_windowBackgroundWhiteGrayText));
            themeDescriptions.add(new ThemeDescription(this.replyObjectHintTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_windowBackgroundWhiteGrayText));
            themeDescriptions.add(new ThemeDescription(this.replyIconImageView, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_replyPanelIcons));
            themeDescriptions.add(new ThemeDescription(this.replyCloseImageView, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_replyPanelClose));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_replyPanelName));
            themeDescriptions.add(new ThemeDescription(this.searchUpButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_searchPanelIcons));
            themeDescriptions.add(new ThemeDescription(this.searchUpButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_actionBarActionModeDefaultSelector));
            themeDescriptions.add(new ThemeDescription(this.searchDownButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_searchPanelIcons));
            themeDescriptions.add(new ThemeDescription(this.searchDownButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_actionBarActionModeDefaultSelector));
            themeDescriptions.add(new ThemeDescription(this.searchCalendarButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_searchPanelIcons));
            themeDescriptions.add(new ThemeDescription(this.searchCalendarButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_actionBarActionModeDefaultSelector));
            themeDescriptions.add(new ThemeDescription(this.searchUserButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_searchPanelIcons));
            themeDescriptions.add(new ThemeDescription(this.searchUserButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_actionBarActionModeDefaultSelector));
            themeDescriptions.add(new ThemeDescription(this.searchCountText, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_searchPanelText));
            themeDescriptions.add(new ThemeDescription(this.searchAsListTogglerView, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_actionBarActionModeDefaultSelector));
            themeDescriptions.add(new ThemeDescription(this.replyButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultIcon));
            themeDescriptions.add(new ThemeDescription(this.replyButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_actionBarActionModeDefaultSelector));
            themeDescriptions.add(new ThemeDescription(this.forwardButton, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultIcon));
            themeDescriptions.add(new ThemeDescription(this.forwardButton, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_actionBarActionModeDefaultSelector));
            themeDescriptions.add(new ThemeDescription(this.bottomOverlayText, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_secretChatStatusText));
            themeDescriptions.add(new ThemeDescription(this.bottomOverlayChatText, 0, null, null, null, null, Theme.key_chat_fieldOverlayText));
            themeDescriptions.add(new ThemeDescription(this.bottomOverlayChatText, 0, null, null, null, null, Theme.key_chat_goDownButtonCounterBackground));
            themeDescriptions.add(new ThemeDescription(this.bottomOverlayChatText, 0, null, null, null, null, Theme.key_chat_messagePanelBackground));
            themeDescriptions.add(new ThemeDescription(this.bottomOverlayProgress, 0, null, null, null, null, Theme.key_chat_fieldOverlayText));
            themeDescriptions.add(new ThemeDescription(this.bottomOverlayImage, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_fieldOverlayText));
            themeDescriptions.add(new ThemeDescription(this.bigEmptyView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_serviceText));
            themeDescriptions.add(new ThemeDescription(this.emptyView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_serviceText));
            themeDescriptions.add(new ThemeDescription(this.progressBar, ThemeDescription.FLAG_PROGRESSBAR, null, null, null, null, Theme.key_chat_serviceText));
            themeDescriptions.add(new ThemeDescription(this.stickersPanelArrow, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_stickersHintPanel));
            themeDescriptions.add(new ThemeDescription(this.stickersListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{StickerCell.class}, null, null, null, Theme.key_chat_stickersHintPanel));
            themeDescriptions.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE, new Class[]{ChatUnreadCell.class}, new String[]{"backgroundLayout"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_unreadMessagesStartBackground));
            themeDescriptions.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatUnreadCell.class}, new String[]{"imageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_unreadMessagesStartArrowIcon));
            themeDescriptions.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatUnreadCell.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_unreadMessagesStartText));
            themeDescriptions.add(new ThemeDescription(this.progressView2, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, Theme.key_chat_serviceBackground));
            themeDescriptions.add(new ThemeDescription(this.emptyView, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, Theme.key_chat_serviceBackground));
            themeDescriptions.add(new ThemeDescription(this.bigEmptyView, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, Theme.key_chat_serviceBackground));
            themeDescriptions.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_SERVICEBACKGROUND, new Class[]{ChatLoadingCell.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_serviceBackground));
            themeDescriptions.add(new ThemeDescription(this.chatListView, ThemeDescription.FLAG_PROGRESSBAR, new Class[]{ChatLoadingCell.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_serviceText));
            themeDescriptions.add(new ThemeDescription(this.mentionContainer.getListView(), ThemeDescription.FLAG_TEXTCOLOR, new Class[]{BotSwitchCell.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_botSwitchToInlineText));
            themeDescriptions.add(new ThemeDescription(this.mentionContainer.getListView(), ThemeDescription.FLAG_TEXTCOLOR, new Class[]{MentionCell.class}, new String[]{"nameTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_windowBackgroundWhiteBlackText));
            themeDescriptions.add(new ThemeDescription(this.mentionContainer.getListView(), ThemeDescription.FLAG_TEXTCOLOR, new Class[]{MentionCell.class}, new String[]{"usernameTextView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_windowBackgroundWhiteGrayText3));
            themeDescriptions.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, new Drawable[]{Theme.chat_inlineResultFile, Theme.chat_inlineResultAudio, Theme.chat_inlineResultLocation}, null, Theme.key_chat_inlineResultIcon));
            themeDescriptions.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_windowBackgroundWhiteGrayText2));
            themeDescriptions.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_windowBackgroundWhiteLinkText));
            themeDescriptions.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_windowBackgroundWhiteBlackText));
            themeDescriptions.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_chat_inAudioProgress));
            themeDescriptions.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_chat_inAudioSelectedProgress));
            themeDescriptions.add(new ThemeDescription(this.mentionContainer.getListView(), 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_divider));
            themeDescriptions.add(new ThemeDescription(this.gifHintTextView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_gifSaveHintBackground));
            themeDescriptions.add(new ThemeDescription(this.gifHintTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_gifSaveHintText));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachMediaBanBackground));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachMediaBanText));
            themeDescriptions.add(new ThemeDescription(this.noSoundHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_gifSaveHintText));
            themeDescriptions.add(new ThemeDescription(this.noSoundHintView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{HintView.class}, new String[]{"imageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_gifSaveHintText));
            themeDescriptions.add(new ThemeDescription(this.noSoundHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"arrowImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_gifSaveHintBackground));
            themeDescriptions.add(new ThemeDescription(this.forwardHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"textView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_gifSaveHintText));
            themeDescriptions.add(new ThemeDescription(this.forwardHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"arrowImageView"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_chat_gifSaveHintBackground));
            themeDescriptions.add(new ThemeDescription(this.pagedownButtonCounter, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_goDownButtonCounterBackground));
            themeDescriptions.add(new ThemeDescription(this.pagedownButtonCounter, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_goDownButtonCounter));
            themeDescriptions.add(new ThemeDescription(this.pagedownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_goDownButton));
            themeDescriptions.add(new ThemeDescription(this.pagedownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_chat_goDownButtonShadow));
            themeDescriptions.add(new ThemeDescription(this.pagedownButtonImage, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_goDownButtonIcon));
            themeDescriptions.add(new ThemeDescription(this.mentiondownButtonCounter, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_goDownButtonCounterBackground));
            themeDescriptions.add(new ThemeDescription(this.mentiondownButtonCounter, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_goDownButtonCounter));
            themeDescriptions.add(new ThemeDescription(this.mentiondownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_goDownButton));
            themeDescriptions.add(new ThemeDescription(this.mentiondownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_chat_goDownButtonShadow));
            themeDescriptions.add(new ThemeDescription(this.mentiondownButtonImage, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_goDownButtonIcon));
            ChatAvatarContainer chatAvatarContainer7 = this.avatarContainer;
            themeDescriptions.add(new ThemeDescription(chatAvatarContainer7 != null ? chatAvatarContainer7.getTimeItem() : null, 0, null, null, null, null, Theme.key_chat_secretTimerBackground));
            ChatAvatarContainer chatAvatarContainer8 = this.avatarContainer;
            themeDescriptions.add(new ThemeDescription(chatAvatarContainer8 != null ? chatAvatarContainer8.getTimeItem() : null, 0, null, null, null, null, Theme.key_chat_secretTimerText));
            themeDescriptions.add(new ThemeDescription(this.floatingDateView, 0, null, null, null, null, Theme.key_chat_serviceText));
            themeDescriptions.add(new ThemeDescription(this.floatingDateView, 0, null, null, null, null, Theme.key_chat_serviceBackground));
            themeDescriptions.add(new ThemeDescription(this.infoTopView, 0, null, null, null, null, Theme.key_chat_serviceText));
            themeDescriptions.add(new ThemeDescription(this.infoTopView, 0, null, null, null, null, Theme.key_chat_serviceBackground));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachGalleryIcon));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachGalleryBackground));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachGalleryText));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachAudioIcon));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachAudioBackground));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachAudioText));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachFileIcon));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachFileBackground));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachFileText));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachContactIcon));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachContactBackground));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachContactText));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachLocationIcon));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachLocationBackground));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachLocationText));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachPollIcon));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachPollBackground));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachPollText));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, new Drawable[]{Theme.chat_attachEmptyDrawable}, null, Theme.key_chat_attachEmptyImage));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_attachPhotoBackground));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_dialogBackground));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_dialogBackgroundGray));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_dialogTextGray2));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_dialogScrollGlow));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_dialogGrayLine));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_dialogCameraIcon));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_dialogButtonSelector));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_windowBackgroundWhiteLinkSelection));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_windowBackgroundWhiteInputField));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_outTextSelectionHighlight));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_inTextSelectionHighlight));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_TextSelectionCursor));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayGreen1));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayGreen2));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayBlue1));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayBlue2));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelGreen1));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelGreen2));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelBlue1));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelBlue2));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_topPanelGray));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertGradientMuted));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertGradientMuted2));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertGradientUnmuted));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertGradientUnmuted2));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_mutedByAdminGradient));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_mutedByAdminGradient2));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_mutedByAdminGradient3));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertMutedByAdmin));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_voipgroup_overlayAlertMutedByAdmin2));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_windowBackgroundGray));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_outReactionButtonBackground));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_inReactionButtonBackground));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_inReactionButtonText));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_outReactionButtonText));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_inReactionButtonTextSelected));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_inReactionButtonTextSelected));
            themeDescriptions.add(new ThemeDescription(null, 0, null, null, null, selectedBackgroundDelegate, Theme.key_chat_BlurAlpha));
            if (this.chatActivityEnterView != null) {
                themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView.botCommandsMenuContainer.listView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{BotCommandsMenuView.BotCommandView.class}, new String[]{"description"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_windowBackgroundWhiteBlackText));
                themeDescriptions.add(new ThemeDescription(this.chatActivityEnterView.botCommandsMenuContainer.listView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{BotCommandsMenuView.BotCommandView.class}, new String[]{"command"}, (Paint[]) null, (Drawable[]) null, (ThemeDescription.ThemeDescriptionDelegate) null, Theme.key_windowBackgroundWhiteGrayText));
            }
            ChatActivityMemberRequestsDelegate chatActivityMemberRequestsDelegate = this.pendingRequestsDelegate;
            if (chatActivityMemberRequestsDelegate != null) {
                chatActivityMemberRequestsDelegate.fillThemeDescriptions(themeDescriptions);
            }
            Iterator<ThemeDescription> it = themeDescriptions.iterator();
            while (it.hasNext()) {
                ThemeDescription description = it.next();
                description.resourcesProvider = this.themeDelegate;
            }
            return themeDescriptions;
        }
        this.isPauseOnThemePreview = false;
        return null;
    }

    /* renamed from: lambda$getThemeDescriptions$246$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1862lambda$getThemeDescriptions$246$orgtelegramuiChatActivity() {
        ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.updateColors();
        }
        Theme.refreshAttachButtonsColors();
        ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.checkColors();
        }
        RecyclerListView recyclerListView = this.chatListView;
        if (recyclerListView != null) {
            int count = recyclerListView.getChildCount();
            for (int a = 0; a < count; a++) {
                View child = this.chatListView.getChildAt(a);
                if (child instanceof ChatMessageCell) {
                    ((ChatMessageCell) child).createSelectorDrawable(0);
                } else if (child instanceof ChatActionCell) {
                    ((ChatActionCell) child).setInvalidateColors(true);
                }
            }
        }
        RecyclerListView recyclerListView2 = this.messagesSearchListView;
        if (recyclerListView2 != null) {
            int count2 = recyclerListView2.getChildCount();
            for (int a2 = 0; a2 < count2; a2++) {
                View child2 = this.messagesSearchListView.getChildAt(a2);
                if (child2 instanceof DialogCell) {
                    ((DialogCell) child2).update(0);
                }
            }
        }
        if (this.scrimPopupWindowItems != null) {
            int a3 = 0;
            while (true) {
                ActionBarMenuSubItem[] actionBarMenuSubItemArr = this.scrimPopupWindowItems;
                if (a3 >= actionBarMenuSubItemArr.length) {
                    break;
                }
                actionBarMenuSubItemArr[a3].setColors(getThemedColor(Theme.key_actionBarDefaultSubmenuItem), getThemedColor(Theme.key_actionBarDefaultSubmenuItemIcon));
                this.scrimPopupWindowItems[a3].setSelectorColor(getThemedColor(Theme.key_dialogButtonSelector));
                a3++;
            }
        }
        ActionBarPopupWindow actionBarPopupWindow = this.scrimPopupWindow;
        if (actionBarPopupWindow != null) {
            View contentView = actionBarPopupWindow.getContentView();
            contentView.setBackgroundColor(getThemedColor(Theme.key_actionBarDefaultSubmenuBackground));
            contentView.invalidate();
        }
        InstantCameraView instantCameraView = this.instantCameraView;
        if (instantCameraView != null) {
            instantCameraView.invalidateBlur();
        }
        PinnedLineView pinnedLineView = this.pinnedLineView;
        if (pinnedLineView != null) {
            pinnedLineView.updateColors();
        }
        ChatActivityEnterTopView chatActivityEnterTopView = this.chatActivityEnterTopView;
        if (chatActivityEnterTopView != null && chatActivityEnterTopView.getEditView() != null) {
            this.chatActivityEnterTopView.getEditView().updateColors();
        }
        ActionBarMenuItem actionBarMenuItem = this.headerItem;
        if (actionBarMenuItem != null) {
            actionBarMenuItem.updateColor();
        }
        setNavigationBarColor(getThemedColor(Theme.key_windowBackgroundGray));
        FragmentContextView fragmentContextView = this.fragmentContextView;
        if (fragmentContextView != null) {
            fragmentContextView.updateColors();
        }
        ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
        if (chatAvatarContainer != null) {
            chatAvatarContainer.updateColors();
        }
        BlurredFrameLayout blurredFrameLayout = this.pinnedMessageView;
        if (blurredFrameLayout != null) {
            blurredFrameLayout.backgroundColor = getThemedColor(Theme.key_chat_topPanelBackground);
        }
        BlurredFrameLayout blurredFrameLayout2 = this.topChatPanelView;
        if (blurredFrameLayout2 != null) {
            blurredFrameLayout2.backgroundColor = getThemedColor(Theme.key_chat_topPanelBackground);
        }
        SizeNotifierFrameLayout sizeNotifierFrameLayout = this.contentView;
        if (sizeNotifierFrameLayout != null) {
            sizeNotifierFrameLayout.invalidateBlurredViews();
        }
        if (this.parentLayout != null && this.parentLayout.getDrawerLayoutContainer() != null) {
            this.parentLayout.getDrawerLayoutContainer().setBehindKeyboardColor(getThemedColor(Theme.key_windowBackgroundWhite));
        }
    }

    public ChatAvatarContainer getAvatarContainer() {
        return this.avatarContainer;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public AnimatorSet onCustomTransitionAnimation(boolean isOpen, Runnable callback) {
        if (isOpen && this.fromPullingDownTransition && getParentLayout().fragmentsStack.size() > 1) {
            BaseFragment previousFragment = getParentLayout().fragmentsStack.get(getParentLayout().fragmentsStack.size() - 2);
            if (previousFragment instanceof ChatActivity) {
                this.wasManualScroll = true;
                final ChatActivity previousChat = (ChatActivity) previousFragment;
                previousChat.setTransitionToChatActivity(this);
                this.fragmentView.setAlpha(0.0f);
                this.contentView.setSkipBackgroundDrawing(true);
                this.avatarContainer.setTranslationY(AndroidUtilities.dp(8.0f));
                this.avatarContainer.getAvatarImageView().setAlpha(0.0f);
                this.avatarContainer.getAvatarImageView().setTranslationY(-AndroidUtilities.dp(8.0f));
                this.toPullingDownTransition = true;
                ValueAnimator valueAnimator = ValueAnimator.ofFloat(0.0f, 1.0f);
                ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                if (chatActivityEnterView != null) {
                    chatActivityEnterView.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x, C.BUFFER_FLAG_ENCRYPTED), View.MeasureSpec.makeMeasureSpec(999999, Integer.MIN_VALUE));
                }
                FrameLayout frameLayout = this.bottomOverlay;
                if (frameLayout != null) {
                    frameLayout.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x, C.BUFFER_FLAG_ENCRYPTED), View.MeasureSpec.makeMeasureSpec(999999, Integer.MIN_VALUE));
                }
                ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                int measuredHeight = chatActivityEnterView2 == null ? 0 : chatActivityEnterView2.getMeasuredHeight();
                FrameLayout frameLayout2 = this.bottomOverlay;
                int currentBottom = Math.max(measuredHeight, frameLayout2 == null ? 0 : frameLayout2.getMeasuredHeight());
                ChatActivityEnterView chatActivityEnterView3 = previousChat.chatActivityEnterView;
                int measuredHeight2 = chatActivityEnterView3 == null ? 0 : chatActivityEnterView3.getMeasuredHeight();
                FrameLayout frameLayout3 = this.bottomOverlay;
                int prevBottom = Math.max(measuredHeight2, frameLayout3 == null ? 0 : frameLayout3.getMeasuredHeight());
                this.pullingBottomOffset = -(prevBottom - currentBottom);
                final boolean useAlphaForContextView = previousChat.fragmentContextView.getMeasuredHeight() != this.fragmentContextView.getMeasuredHeight();
                valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda88
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                        ChatActivity.this.m1873xf5f0c5ae(previousChat, useAlphaForContextView, valueAnimator2);
                    }
                });
                updateChatListViewTopPadding();
                AnimatorSet animatorSet = new AnimatorSet();
                this.fragmentTransition = animatorSet;
                animatorSet.addListener(new AnonymousClass114(previousChat, callback));
                this.fragmentTransition.setDuration(300L);
                this.fragmentTransition.setInterpolator(CubicBezierInterpolator.DEFAULT);
                this.fragmentTransition.playTogether(valueAnimator);
                AndroidUtilities.runOnUIThread(this.fragmentTransitionRunnable, 200L);
                return this.fragmentTransition;
            }
            return null;
        }
        return null;
    }

    /* renamed from: lambda$onCustomTransitionAnimation$247$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1873xf5f0c5ae(ChatActivity previousChat, boolean useAlphaForContextView, ValueAnimator valueAnimator1) {
        float progress = ((Float) valueAnimator1.getAnimatedValue()).floatValue();
        previousChat.setTransitionToChatProgress(progress);
        float y = AndroidUtilities.dp(8.0f) * (1.0f - progress);
        this.avatarContainer.setTranslationY(y);
        this.avatarContainer.getAvatarImageView().setTranslationY(-y);
        float y2 = (-AndroidUtilities.dp(8.0f)) * progress;
        previousChat.avatarContainer.setTranslationY(y2);
        previousChat.avatarContainer.getAvatarImageView().setTranslationY(-y2);
        this.avatarContainer.getAvatarImageView().setScaleX((progress * 0.2f) + 0.8f);
        this.avatarContainer.getAvatarImageView().setScaleY((progress * 0.2f) + 0.8f);
        this.avatarContainer.getAvatarImageView().setAlpha(progress);
        previousChat.avatarContainer.getAvatarImageView().setScaleX(((1.0f - progress) * 0.2f) + 0.8f);
        previousChat.avatarContainer.getAvatarImageView().setScaleY(((1.0f - progress) * 0.2f) + 0.8f);
        previousChat.avatarContainer.getAvatarImageView().setAlpha(1.0f - progress);
        ChatActivityEnterView chatActivityEnterView = previousChat.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.setTranslationY((-this.pullingBottomOffset) * progress);
        }
        FrameLayout frameLayout = previousChat.bottomOverlay;
        if (frameLayout != null) {
            frameLayout.setTranslationY((-this.pullingBottomOffset) * progress);
        }
        if (useAlphaForContextView) {
            previousChat.fragmentContextView.setAlpha(1.0f - progress);
        }
        previousChat.pinnedMessageView.setAlpha(1.0f - progress);
        previousChat.topChatPanelView.setAlpha(1.0f - progress);
    }

    /* renamed from: org.telegram.ui.ChatActivity$114 */
    /* loaded from: classes4.dex */
    public class AnonymousClass114 extends AnimatorListenerAdapter {
        int index;
        final /* synthetic */ Runnable val$callback;
        final /* synthetic */ ChatActivity val$previousChat;

        AnonymousClass114(ChatActivity chatActivity, Runnable runnable) {
            ChatActivity.this = this$0;
            this.val$previousChat = chatActivity;
            this.val$callback = runnable;
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationStart(Animator animation) {
            super.onAnimationStart(animation);
            this.index = NotificationCenter.getInstance(ChatActivity.this.currentAccount).setAnimationInProgress(this.index, null);
        }

        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
        public void onAnimationEnd(Animator animation) {
            ChatActivity.this.fragmentOpened = true;
            ChatActivity.this.fragmentBeginToShow = true;
            ChatActivity.this.fragmentTransition = null;
            AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$114$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.AnonymousClass114.this.m1993lambda$onAnimationEnd$0$orgtelegramuiChatActivity$114();
                }
            }, 32L);
            super.onAnimationEnd(animation);
            ChatActivity.this.contentView.invalidate();
            ChatActivity.this.contentView.setSkipBackgroundDrawing(false);
            ChatActivity.this.toPullingDownTransition = false;
            this.val$previousChat.setTransitionToChatProgress(0.0f);
            this.val$previousChat.setTransitionToChatActivity(null);
            ChatActivity.this.fragmentView.setAlpha(1.0f);
            this.val$callback.run();
            ChatActivity.this.avatarContainer.setTranslationY(0.0f);
            this.val$previousChat.avatarContainer.setTranslationY(0.0f);
            this.val$previousChat.avatarContainer.getAvatarImageView().setTranslationY(0.0f);
            ChatActivity.this.avatarContainer.getAvatarImageView().setScaleX(1.0f);
            ChatActivity.this.avatarContainer.getAvatarImageView().setScaleY(1.0f);
            ChatActivity.this.avatarContainer.getAvatarImageView().setAlpha(1.0f);
            this.val$previousChat.avatarContainer.getAvatarImageView().setScaleX(1.0f);
            this.val$previousChat.avatarContainer.getAvatarImageView().setScaleY(1.0f);
            this.val$previousChat.avatarContainer.getAvatarImageView().setAlpha(1.0f);
            this.val$previousChat.pinnedMessageView.setAlpha(1.0f);
            this.val$previousChat.topChatPanelView.setAlpha(1.0f);
        }

        /* renamed from: lambda$onAnimationEnd$0$org-telegram-ui-ChatActivity$114 */
        public /* synthetic */ void m1993lambda$onAnimationEnd$0$orgtelegramuiChatActivity$114() {
            NotificationCenter.getInstance(ChatActivity.this.currentAccount).onAnimationFinish(this.index);
        }
    }

    public void setTransitionToChatActivity(ChatActivity chatActivity) {
        this.pullingDownAnimateToActivity = chatActivity;
    }

    public void setTransitionToChatProgress(float p) {
        this.pullingDownAnimateProgress = p;
        this.fragmentView.invalidate();
        this.chatListView.invalidate();
    }

    public void showChatThemeBottomSheet() {
        this.chatThemeBottomSheet = new ChatThemeBottomSheet(this, this.themeDelegate);
        this.chatListView.setOnInterceptTouchListener(ChatActivity$$ExternalSyntheticLambda162.INSTANCE);
        setChildrenEnabled(this.contentView, false);
        showDialog(this.chatThemeBottomSheet, new DialogInterface.OnDismissListener() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda207
            @Override // android.content.DialogInterface.OnDismissListener
            public final void onDismiss(DialogInterface dialogInterface) {
                ChatActivity.this.m1947lambda$showChatThemeBottomSheet$249$orgtelegramuiChatActivity(dialogInterface);
            }
        });
    }

    public static /* synthetic */ boolean lambda$showChatThemeBottomSheet$248(MotionEvent event) {
        return true;
    }

    /* renamed from: lambda$showChatThemeBottomSheet$249$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1947lambda$showChatThemeBottomSheet$249$orgtelegramuiChatActivity(DialogInterface dialogInterface) {
        this.chatThemeBottomSheet = null;
        this.chatListView.setOnInterceptTouchListener(null);
        setChildrenEnabled(this.contentView, true);
        ChatThemeController.clearWallpaperThumbImages();
    }

    private void setChildrenEnabled(View view, boolean isEnabled) {
        if (view instanceof ViewGroup) {
            ViewGroup viewGroup = (ViewGroup) view;
            for (int i = 0; i < viewGroup.getChildCount(); i++) {
                setChildrenEnabled(viewGroup.getChildAt(i), isEnabled);
            }
        }
        if (view != this.chatListView && view != this.contentView) {
            view.setEnabled(isEnabled);
        }
    }

    private void checkThemeEmoticon() {
        TLRPC.ChatFull chatFull;
        if (!this.fragmentOpened) {
            return;
        }
        String emoticon = null;
        TLRPC.UserFull userFull = this.userInfo;
        if (userFull != null) {
            emoticon = userFull.theme_emoticon;
        }
        if (emoticon == null && (chatFull = this.chatInfo) != null) {
            emoticon = chatFull.theme_emoticon;
        }
        setChatThemeEmoticon(emoticon);
    }

    private void setChatThemeEmoticon(String emoticon) {
        boolean z = false;
        ChatThemeController.getInstance(this.currentAccount).setDialogTheme(this.dialog_id, emoticon, false);
        if (!TextUtils.isEmpty(emoticon)) {
            ChatThemeController.requestChatTheme(emoticon, new ResultCallback() { // from class: org.telegram.ui.ChatActivity$$ExternalSyntheticLambda148
                @Override // org.telegram.tgnet.ResultCallback
                public final void onComplete(Object obj) {
                    ChatActivity.this.m1943lambda$setChatThemeEmoticon$250$orgtelegramuiChatActivity((EmojiThemes) obj);
                }

                @Override // org.telegram.tgnet.ResultCallback
                public /* synthetic */ void onError(Throwable th) {
                    ResultCallback.CC.$default$onError(this, th);
                }

                @Override // org.telegram.tgnet.ResultCallback
                public /* synthetic */ void onError(TLRPC.TL_error tL_error) {
                    ResultCallback.CC.$default$onError(this, tL_error);
                }
            });
            return;
        }
        ThemeDelegate themeDelegate = this.themeDelegate;
        if (this.openAnimationStartTime != 0) {
            z = true;
        }
        themeDelegate.setCurrentTheme(null, z, null);
    }

    /* renamed from: lambda$setChatThemeEmoticon$250$org-telegram-ui-ChatActivity */
    public /* synthetic */ void m1943lambda$setChatThemeEmoticon$250$orgtelegramuiChatActivity(EmojiThemes result) {
        this.themeDelegate.setCurrentTheme(result, this.openAnimationStartTime != 0, null);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public int getNavigationBarColor() {
        return getThemedColor(Theme.key_windowBackgroundGray);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public int getThemedColor(String key) {
        ThemeDelegate themeDelegate = this.themeDelegate;
        Integer color = themeDelegate != null ? themeDelegate.getColor(key) : null;
        return color != null ? color.intValue() : super.getThemedColor(key);
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public Drawable getThemedDrawable(String drawableKey) {
        Drawable drawable = this.themeDelegate.getDrawable(drawableKey);
        return drawable != null ? drawable : super.getThemedDrawable(drawableKey);
    }

    public Paint getThemedPaint(String paintKey) {
        Paint paint = this.themeDelegate.getPaint(paintKey);
        return paint != null ? paint : Theme.getThemePaint(paintKey);
    }

    public float getChatListViewPadding() {
        return this.chatListViewPaddingTop;
    }

    public FragmentContextView getFragmentContextView() {
        return this.fragmentContextView;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public Theme.ResourcesProvider getResourceProvider() {
        return this.themeDelegate;
    }

    /* loaded from: classes4.dex */
    public class ThemeDelegate implements Theme.ResourcesProvider, ChatActionCell.ThemeDelegate, ForwardingPreviewView.ResourcesDelegate {
        private HashMap<String, Integer> animatingColors;
        Theme.MessageDrawable animatingMessageDrawable;
        Theme.MessageDrawable animatingMessageMediaDrawable;
        private Drawable backgroundDrawable;
        private List<EmojiThemes> cachedThemes;
        private EmojiThemes chatTheme;
        private int currentColor;
        int currentServiceColor;
        boolean drawSelectedGradient;
        boolean drawServiceGradient;
        private AnimatorSet patternAlphaAnimator;
        private ValueAnimator patternIntensityAnimator;
        private Bitmap serviceBitmap;
        private Bitmap serviceBitmapSource;
        private Canvas serviceCanvas;
        private BitmapShader serviceShader;
        private BitmapShader serviceShaderSource;
        int startSelectedBackgroundColor;
        Bitmap startServiceBitmap;
        int startServiceButtonColor;
        int startServiceColor;
        int startServiceIconColor;
        int startServiceLinkColor;
        int startServiceTextColor;
        private boolean useSourceShader;
        private final HashMap<String, Drawable> currentDrawables = new HashMap<>();
        private final HashMap<String, Paint> currentPaints = new HashMap<>();
        private final Matrix actionMatrix = new Matrix();
        private HashMap<String, Integer> currentColors = new HashMap<>();
        private Paint paint = new Paint();
        private boolean isDark = Theme.getActiveTheme().isDark();

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public /* synthetic */ int getColorOrDefault(String str) {
            return getColor(str);
        }

        static /* synthetic */ EmojiThemes access$35400(ThemeDelegate x0) {
            return x0.chatTheme;
        }

        ThemeDelegate() {
            ChatActivity.this = this$0;
            boolean setup = false;
            if (isThemeChangeAvailable()) {
                EmojiThemes dialogTheme = ChatThemeController.getInstance(this$0.currentAccount).getDialogTheme(this$0.dialog_id);
                this.chatTheme = dialogTheme;
                if (dialogTheme != null) {
                    setup = true;
                    setupChatTheme(dialogTheme, false, true);
                }
            }
            if (!setup && ThemeEditorView.getInstance() == null) {
                Theme.refreshThemeColors(true, true);
            } else {
                AndroidUtilities.runOnUIThread(new Runnable() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda3
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ThemeDelegate.this.m2024lambda$new$0$orgtelegramuiChatActivity$ThemeDelegate();
                    }
                });
            }
        }

        /* renamed from: lambda$new$0$org-telegram-ui-ChatActivity$ThemeDelegate */
        public /* synthetic */ void m2024lambda$new$0$orgtelegramuiChatActivity$ThemeDelegate() {
            NotificationCenter globalInstance = NotificationCenter.getGlobalInstance();
            int i = NotificationCenter.didSetNewTheme;
            Object[] objArr = new Object[3];
            boolean z = false;
            objArr[0] = false;
            objArr[1] = true;
            if (ChatActivity.this.parentLayout != null && !ChatActivity.this.parentLayout.isTransitionAnimationInProgress()) {
                z = true;
            }
            objArr[2] = Boolean.valueOf(z);
            globalInstance.postNotificationName(i, objArr);
        }

        public List<EmojiThemes> getCachedThemes() {
            return this.cachedThemes;
        }

        public void setCachedThemes(List<EmojiThemes> cachedThemes) {
            this.cachedThemes = cachedThemes;
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public Integer getColor(String key) {
            String fallbackKey;
            Integer color;
            if (this.chatTheme == null) {
                return Integer.valueOf(Theme.getColor(key));
            }
            HashMap<String, Integer> hashMap = this.animatingColors;
            if (hashMap != null && (color = hashMap.get(key)) != null) {
                return color;
            }
            Integer color2 = this.currentColors.get(key);
            if (color2 == null) {
                if (Theme.key_chat_outBubbleGradient1.equals(key) || Theme.key_chat_outBubbleGradient2.equals(key) || Theme.key_chat_outBubbleGradient3.equals(key)) {
                    color2 = this.currentColors.get(Theme.key_chat_outBubble);
                    if (color2 == null) {
                        color2 = Theme.getColorOrNull(key);
                    }
                    if (color2 == null) {
                        color2 = Integer.valueOf(Theme.getColor(Theme.key_chat_outBubble));
                    }
                }
                if (color2 == null && (fallbackKey = Theme.getFallbackKey(key)) != null) {
                    color2 = this.currentColors.get(fallbackKey);
                }
            }
            if (color2 == null && this.chatTheme != null) {
                return Integer.valueOf(Theme.getDefaultColor(key));
            }
            return color2;
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public Integer getCurrentColor(String key) {
            return getCurrentColor(key, false);
        }

        public Integer getCurrentColor(String key, boolean ignoreAnimation) {
            HashMap<String, Integer> hashMap;
            if (this.chatTheme == null) {
                return Theme.getColorOrNull(key);
            }
            Integer color = null;
            if (!ignoreAnimation && (hashMap = this.animatingColors) != null) {
                color = hashMap.get(key);
            }
            if (color == null) {
                return this.currentColors.get(key);
            }
            return color;
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public void setAnimatedColor(String key, int color) {
            HashMap<String, Integer> hashMap = this.animatingColors;
            if (hashMap != null) {
                hashMap.put(key, Integer.valueOf(color));
            }
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public void applyServiceShaderMatrix(int w, int h, float translationX, float translationY) {
            Bitmap bitmap;
            BitmapShader bitmapShader;
            if (this.chatTheme == null || (bitmap = this.serviceBitmap) == null || (bitmapShader = this.serviceShader) == null) {
                Theme.applyServiceShaderMatrix(w, h, translationX, translationY);
            } else if (this.useSourceShader) {
                Theme.applyServiceShaderMatrix(this.serviceBitmapSource, this.serviceShaderSource, this.actionMatrix, w, h, translationX, translationY);
            } else {
                Theme.applyServiceShaderMatrix(bitmap, bitmapShader, this.actionMatrix, w, h, translationX, translationY);
            }
        }

        @Override // org.telegram.ui.Cells.ChatActionCell.ThemeDelegate
        public int getCurrentColor() {
            return this.chatTheme != null ? this.currentColor : Theme.currentColor;
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public boolean hasGradientService() {
            return this.chatTheme != null ? this.serviceShader != null : Theme.hasGradientService();
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public Drawable getDrawable(String drawableKey) {
            if (!this.currentDrawables.isEmpty()) {
                return this.currentDrawables.get(drawableKey);
            }
            return null;
        }

        @Override // org.telegram.ui.ActionBar.Theme.ResourcesProvider
        public Paint getPaint(String paintKey) {
            if (this.chatTheme != null) {
                return this.currentPaints.get(paintKey);
            }
            return null;
        }

        public boolean isThemeChangeAvailable() {
            return ChatActivity.this.currentChat == null && ChatActivity.this.currentEncryptedChat == null && !ChatActivity.this.currentUser.bot && ChatActivity.this.dialog_id >= 0;
        }

        public EmojiThemes getCurrentTheme() {
            return this.chatTheme;
        }

        @Override // org.telegram.ui.Components.ForwardingPreviewView.ResourcesDelegate
        public Drawable getWallpaperDrawable() {
            Drawable drawable = this.backgroundDrawable;
            return drawable != null ? drawable : Theme.getCachedWallpaperNonBlocking();
        }

        @Override // org.telegram.ui.Components.ForwardingPreviewView.ResourcesDelegate
        public boolean isWallpaperMotion() {
            if (this.chatTheme != null) {
                return false;
            }
            return Theme.isWallpaperMotion();
        }

        public void setCurrentTheme(final EmojiThemes chatTheme, final boolean animated, Boolean forceDark) {
            if (ChatActivity.this.parentLayout == null) {
                return;
            }
            EmojiThemes emojiThemes = this.chatTheme;
            boolean newIsDark = forceDark != null ? forceDark.booleanValue() : Theme.getActiveTheme().isDark();
            String oldEmoticon = null;
            String newEmoticon = chatTheme != null ? chatTheme.getEmoticon() : null;
            EmojiThemes emojiThemes2 = this.chatTheme;
            if (emojiThemes2 != null) {
                oldEmoticon = emojiThemes2.getEmoticon();
            }
            if (!isThemeChangeAvailable()) {
                return;
            }
            if (TextUtils.equals(oldEmoticon, newEmoticon) && this.isDark == newIsDark) {
                return;
            }
            this.isDark = newIsDark;
            Theme.ThemeInfo currentTheme = newIsDark ? Theme.getCurrentNightTheme() : Theme.getCurrentTheme();
            ActionBarLayout.ThemeAnimationSettings animationSettings = new ActionBarLayout.ThemeAnimationSettings(currentTheme, currentTheme.currentAccentId, currentTheme.isDark(), !animated);
            int i = -1;
            if (this.chatTheme == null) {
                Drawable background = Theme.getCachedWallpaperNonBlocking();
                this.drawServiceGradient = background instanceof MotionBackgroundDrawable;
                initServiceMessageColors(background);
                this.startServiceTextColor = this.drawServiceGradient ? -1 : Theme.getColor(Theme.key_chat_serviceText);
                this.startServiceLinkColor = this.drawServiceGradient ? -1 : Theme.getColor(Theme.key_chat_serviceLink);
                this.startServiceButtonColor = this.drawServiceGradient ? -1 : Theme.getColor(Theme.key_chat_serviceLink);
                this.startServiceIconColor = this.drawServiceGradient ? -1 : Theme.getColor(Theme.key_chat_serviceIcon);
            } else if (this.drawServiceGradient) {
                this.startServiceBitmap = ((MotionBackgroundDrawable) this.backgroundDrawable).getBitmap();
            }
            this.startServiceColor = this.currentServiceColor;
            this.startServiceTextColor = this.drawServiceGradient ? -1 : getCurrentColorOrDefault(Theme.key_chat_serviceText, true);
            this.startServiceLinkColor = this.drawServiceGradient ? -1 : getCurrentColorOrDefault(Theme.key_chat_serviceLink, true);
            this.startServiceButtonColor = this.drawServiceGradient ? -1 : getCurrentColorOrDefault(Theme.key_chat_serviceLink, true);
            if (!this.drawServiceGradient) {
                i = getCurrentColorOrDefault(Theme.key_chat_serviceIcon, true);
            }
            this.startServiceIconColor = i;
            if (chatTheme != null) {
                int[] colors = AndroidUtilities.calcDrawableColor(this.backgroundDrawable);
                this.currentColor = colors[0];
                initDrawables();
                initPaints();
            }
            animationSettings.applyTheme = false;
            animationSettings.afterStartDescriptionsAddedRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda6
                @Override // java.lang.Runnable
                public final void run() {
                    ChatActivity.ThemeDelegate.this.m2025x3b4bd149(chatTheme, animated);
                }
            };
            if (animated) {
                animationSettings.animationProgress = new ActionBarLayout.ThemeAnimationSettings.onAnimationProgress() { // from class: org.telegram.ui.ChatActivity.ThemeDelegate.1
                    @Override // org.telegram.ui.ActionBar.ActionBarLayout.ThemeAnimationSettings.onAnimationProgress
                    public void setProgress(float p) {
                        ChatActivity.this.chatListView.invalidate();
                        ThemeDelegate.this.animatingMessageDrawable.crossfadeProgress = p;
                        ThemeDelegate.this.animatingMessageMediaDrawable.crossfadeProgress = p;
                        ThemeDelegate.this.updateServiceMessageColor(p);
                    }
                };
                animationSettings.beforeAnimationRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda4
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ThemeDelegate.this.m2026xfe383aa8();
                    }
                };
                animationSettings.afterAnimationRunnable = new Runnable() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda5
                    @Override // java.lang.Runnable
                    public final void run() {
                        ChatActivity.ThemeDelegate.this.m2027xc124a407();
                    }
                };
            } else if (ChatActivity.this.contentView != null) {
                ChatActivity.this.contentView.setBackgroundImage(Theme.getCachedWallpaper(), Theme.isWallpaperMotion());
            }
            animationSettings.onlyTopFragment = true;
            animationSettings.resourcesProvider = this;
            animationSettings.duration = 250L;
            ChatActivity.this.parentLayout.animateThemedValues(animationSettings);
            if (ChatActivity.this.onThemeChange != null) {
                ChatActivity.this.onThemeChange.run();
            }
        }

        /* renamed from: lambda$setCurrentTheme$1$org-telegram-ui-ChatActivity$ThemeDelegate */
        public /* synthetic */ void m2025x3b4bd149(EmojiThemes chatTheme, boolean animated) {
            setupChatTheme(chatTheme, animated, false);
            initServiceMessageColors(this.backgroundDrawable);
        }

        /* renamed from: lambda$setCurrentTheme$2$org-telegram-ui-ChatActivity$ThemeDelegate */
        public /* synthetic */ void m2026xfe383aa8() {
            this.animatingColors = new HashMap<>();
            Theme.MessageDrawable messageDrawable = (Theme.MessageDrawable) ChatActivity.this.getThemedDrawable(Theme.key_drawable_msgOut);
            this.animatingMessageDrawable = messageDrawable;
            messageDrawable.crossfadeFromDrawable = ChatActivity.this.parentLayout.messageDrawableOutStart;
            Theme.MessageDrawable messageDrawable2 = (Theme.MessageDrawable) ChatActivity.this.getThemedDrawable(Theme.key_drawable_msgOutMedia);
            this.animatingMessageMediaDrawable = messageDrawable2;
            messageDrawable2.crossfadeFromDrawable = ChatActivity.this.parentLayout.messageDrawableOutMediaStart;
            this.animatingMessageDrawable.crossfadeProgress = 0.0f;
            this.animatingMessageMediaDrawable.crossfadeProgress = 0.0f;
            ChatActivity.this.updateMessagesVisiblePart(false);
            updateServiceMessageColor(0.0f);
        }

        /* renamed from: lambda$setCurrentTheme$3$org-telegram-ui-ChatActivity$ThemeDelegate */
        public /* synthetic */ void m2027xc124a407() {
            this.animatingMessageDrawable.crossfadeFromDrawable = null;
            this.animatingMessageMediaDrawable.crossfadeFromDrawable = null;
            this.animatingColors = null;
            updateServiceMessageColor(1.0f);
        }

        private void setupChatTheme(EmojiThemes chatTheme, boolean withAnimation, boolean createNewResources) {
            Theme.ThemeInfo activeTheme;
            this.chatTheme = chatTheme;
            Drawable prevDrawable = null;
            if (ChatActivity.this.fragmentView != null) {
                prevDrawable = ((SizeNotifierFrameLayout) ChatActivity.this.fragmentView).getBackgroundImage();
            }
            final MotionBackgroundDrawable prevMotionDrawable = prevDrawable instanceof MotionBackgroundDrawable ? (MotionBackgroundDrawable) prevDrawable : null;
            int prevPhase = prevMotionDrawable != null ? prevMotionDrawable.getPhase() : 0;
            if (chatTheme == null || chatTheme.showAsDefaultStub) {
                this.currentColor = Theme.getServiceMessageColor();
            }
            if (chatTheme == null) {
                this.currentColors = new HashMap<>();
                this.currentPaints.clear();
                this.currentDrawables.clear();
                Drawable wallpaper = Theme.getCachedWallpaperNonBlocking();
                if (wallpaper instanceof MotionBackgroundDrawable) {
                    ((MotionBackgroundDrawable) wallpaper).setPhase(prevPhase);
                }
                this.backgroundDrawable = null;
                if (Theme.getActiveTheme().isDark() != this.isDark) {
                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("themeconfig", 0);
                    String dayThemeName = preferences.getString("lastDayTheme", "Blue");
                    if (Theme.getTheme(dayThemeName) == null || Theme.getTheme(dayThemeName).isDark()) {
                        dayThemeName = "Blue";
                    }
                    String nightThemeName = preferences.getString("lastDarkTheme", "Dark Blue");
                    if (Theme.getTheme(nightThemeName) == null || !Theme.getTheme(nightThemeName).isDark()) {
                        nightThemeName = "Dark Blue";
                    }
                    activeTheme = this.isDark ? Theme.getTheme(nightThemeName) : Theme.getTheme(dayThemeName);
                } else {
                    activeTheme = Theme.getActiveTheme();
                }
                Theme.applyTheme(activeTheme, false, this.isDark);
                return;
            }
            if (ApplicationLoader.applicationContext != null) {
                Theme.createChatResources(ApplicationLoader.applicationContext, false);
            }
            this.currentColors = chatTheme.createColors(ChatActivity.this.currentAccount, this.isDark ? 1 : 0);
            this.backgroundDrawable = getBackgroundDrawableFromTheme(chatTheme, prevPhase);
            AnimatorSet animatorSet = this.patternAlphaAnimator;
            if (animatorSet != null) {
                animatorSet.cancel();
            }
            if (withAnimation) {
                this.patternAlphaAnimator = new AnimatorSet();
                if (prevMotionDrawable != null) {
                    ValueAnimator valueAnimator = ValueAnimator.ofFloat(1.0f, 0.0f);
                    valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda1
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                            MotionBackgroundDrawable.this.setPatternAlpha(((Float) valueAnimator2.getAnimatedValue()).floatValue());
                        }
                    });
                    valueAnimator.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ThemeDelegate.2
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animation) {
                            super.onAnimationEnd(animation);
                            prevMotionDrawable.setPatternAlpha(1.0f);
                        }
                    });
                    valueAnimator.setDuration(200L);
                    this.patternAlphaAnimator.playTogether(valueAnimator);
                }
                Drawable drawable = this.backgroundDrawable;
                if (drawable instanceof MotionBackgroundDrawable) {
                    final MotionBackgroundDrawable currentBackgroundDrawable = (MotionBackgroundDrawable) drawable;
                    currentBackgroundDrawable.setPatternAlpha(0.0f);
                    ValueAnimator valueAnimator2 = ValueAnimator.ofFloat(0.0f, 1.0f);
                    valueAnimator2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda2
                        @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                        public final void onAnimationUpdate(ValueAnimator valueAnimator3) {
                            MotionBackgroundDrawable.this.setPatternAlpha(((Float) valueAnimator3.getAnimatedValue()).floatValue());
                        }
                    });
                    valueAnimator2.addListener(new AnimatorListenerAdapter() { // from class: org.telegram.ui.ChatActivity.ThemeDelegate.3
                        @Override // android.animation.AnimatorListenerAdapter, android.animation.Animator.AnimatorListener
                        public void onAnimationEnd(Animator animation) {
                            super.onAnimationEnd(animation);
                            currentBackgroundDrawable.setPatternAlpha(1.0f);
                        }
                    });
                    valueAnimator2.setDuration(250L);
                    this.patternAlphaAnimator.playTogether(valueAnimator2);
                }
                this.patternAlphaAnimator.start();
            }
            if (createNewResources) {
                int[] colors = AndroidUtilities.calcDrawableColor(this.backgroundDrawable);
                this.currentColor = colors[0];
                initDrawables();
                initPaints();
                initServiceMessageColors(this.backgroundDrawable);
                updateServiceMessageColor(1.0f);
            }
        }

        private void initDrawables() {
            Drawable drawable;
            String colorKey;
            Map<String, Drawable> chatDrawablesMap = Theme.getThemeDrawablesMap();
            for (Map.Entry<String, Drawable> entry : chatDrawablesMap.entrySet()) {
                String key = entry.getKey();
                char c = 65535;
                switch (key.hashCode()) {
                    case -2061232504:
                        if (key.equals(Theme.key_drawable_msgIn)) {
                            c = 0;
                            break;
                        }
                        break;
                    case -2005320132:
                        if (key.equals(Theme.key_drawable_msgInMedia)) {
                            c = 2;
                            break;
                        }
                        break;
                    case -1656383241:
                        if (key.equals(Theme.key_drawable_msgInMediaSelected)) {
                            c = 3;
                            break;
                        }
                        break;
                    case -1451465639:
                        if (key.equals(Theme.key_drawable_msgOutMedia)) {
                            c = 6;
                            break;
                        }
                        break;
                    case -1084641786:
                        if (key.equals(Theme.key_drawable_msgOutSelected)) {
                            c = 5;
                            break;
                        }
                        break;
                    case -8170988:
                        if (key.equals(Theme.key_drawable_msgOutMediaSelected)) {
                            c = 7;
                            break;
                        }
                        break;
                    case 300508483:
                        if (key.equals(Theme.key_drawable_msgInSelected)) {
                            c = 1;
                            break;
                        }
                        break;
                    case 526307915:
                        if (key.equals(Theme.key_drawable_msgOut)) {
                            c = 4;
                            break;
                        }
                        break;
                }
                switch (c) {
                    case 0:
                        drawable = new Theme.MessageDrawable(0, false, false, this);
                        break;
                    case 1:
                        drawable = new Theme.MessageDrawable(0, false, true, this);
                        break;
                    case 2:
                        drawable = new Theme.MessageDrawable(1, false, false, this);
                        break;
                    case 3:
                        drawable = new Theme.MessageDrawable(1, false, true, this);
                        break;
                    case 4:
                        drawable = new Theme.MessageDrawable(0, true, false, this);
                        break;
                    case 5:
                        drawable = new Theme.MessageDrawable(0, true, true, this);
                        break;
                    case 6:
                        drawable = new Theme.MessageDrawable(1, true, false, this);
                        break;
                    case 7:
                        drawable = new Theme.MessageDrawable(1, true, true, this);
                        break;
                    default:
                        Drawable.ConstantState constantState = entry.getValue().getConstantState();
                        if (constantState != null) {
                            drawable = constantState.newDrawable().mutate();
                        } else {
                            drawable = null;
                        }
                        if (drawable != null && (colorKey = Theme.getThemeDrawableColorKey(entry.getKey())) != null) {
                            Integer color = getColor(colorKey);
                            if (color == null) {
                                color = Integer.valueOf(Theme.getColor(colorKey));
                            }
                            Theme.setDrawableColor(drawable, color.intValue());
                            break;
                        }
                        break;
                }
                if (drawable != null) {
                    this.currentDrawables.put(entry.getKey(), drawable);
                }
            }
        }

        private void initPaints() {
            Paint newPaint;
            Map<String, Paint> chatPaintsMap = Theme.getThemePaintsMap();
            for (Map.Entry<String, Paint> entry : chatPaintsMap.entrySet()) {
                Paint oldPaint = entry.getValue();
                if (oldPaint instanceof TextPaint) {
                    newPaint = new TextPaint();
                    newPaint.setTextSize(oldPaint.getTextSize());
                    newPaint.setTypeface(oldPaint.getTypeface());
                } else {
                    newPaint = new Paint();
                }
                if ((oldPaint.getFlags() & 1) != 0) {
                    newPaint.setFlags(1);
                }
                String colorKey = Theme.getThemePaintColorKey(entry.getKey());
                if (colorKey != null) {
                    Integer color = getColor(colorKey);
                    if (color == null) {
                        color = Integer.valueOf(Theme.getColor(colorKey));
                    }
                    newPaint.setColor(color.intValue());
                }
                this.currentPaints.put(entry.getKey(), newPaint);
            }
        }

        private void initServiceMessageColors(Drawable backgroundDrawable) {
            int[] result = AndroidUtilities.calcDrawableColor(backgroundDrawable);
            boolean z = false;
            int currentServiceMessageColor = result[0];
            Integer serviceColor = getCurrentColor(Theme.key_chat_serviceBackground);
            Integer selectedBackgroundColor = getCurrentColor(Theme.key_chat_selectedBackground);
            if (serviceColor == null) {
                serviceColor = Integer.valueOf(currentServiceMessageColor);
            }
            this.currentServiceColor = serviceColor.intValue();
            if ((backgroundDrawable instanceof MotionBackgroundDrawable) && SharedConfig.getDevicePerformanceClass() != 0) {
                z = true;
            }
            this.drawServiceGradient = z;
            this.drawSelectedGradient = z;
            if (z) {
                this.serviceBitmap = Bitmap.createBitmap(60, 80, Bitmap.Config.ARGB_8888);
                this.serviceBitmapSource = ((MotionBackgroundDrawable) backgroundDrawable).getBitmap();
                Canvas canvas = new Canvas(this.serviceBitmap);
                this.serviceCanvas = canvas;
                canvas.drawBitmap(this.serviceBitmapSource, 0.0f, 0.0f, (Paint) null);
                this.serviceShader = new BitmapShader(this.serviceBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
                this.serviceShaderSource = new BitmapShader(this.serviceBitmapSource, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
                this.useSourceShader = true;
            } else {
                this.serviceBitmap = null;
                this.serviceShader = null;
            }
            Paint actionBackgroundPaint = getPaint(Theme.key_paint_chatActionBackground);
            Paint actionBackgroundSelectedPaint = getPaint(Theme.key_paint_chatActionBackgroundSelected);
            Paint msgBackgroundSelectedPaint = getPaint(Theme.key_paint_chatMessageBackgroundSelected);
            if (actionBackgroundPaint != null) {
                if (this.drawServiceGradient) {
                    ColorMatrix colorMatrix = new ColorMatrix();
                    colorMatrix.setSaturation(((MotionBackgroundDrawable) backgroundDrawable).getIntensity() >= 0 ? 1.8f : 0.5f);
                    actionBackgroundPaint.setAlpha(127);
                    actionBackgroundPaint.setColorFilter(new ColorMatrixColorFilter(colorMatrix));
                    actionBackgroundPaint.setShader(this.serviceShaderSource);
                    actionBackgroundSelectedPaint.setAlpha(127);
                    actionBackgroundSelectedPaint.setColorFilter(new ColorMatrixColorFilter(colorMatrix));
                    actionBackgroundSelectedPaint.setShader(this.serviceShaderSource);
                } else {
                    actionBackgroundPaint.setColorFilter(null);
                    actionBackgroundPaint.setShader(null);
                    actionBackgroundSelectedPaint.setColorFilter(null);
                    actionBackgroundSelectedPaint.setShader(null);
                }
            }
            if (msgBackgroundSelectedPaint == null) {
                msgBackgroundSelectedPaint = new Paint(1);
                this.currentPaints.put(Theme.key_paint_chatMessageBackgroundSelected, msgBackgroundSelectedPaint);
            }
            if (this.drawSelectedGradient) {
                ColorMatrix colorMatrix2 = new ColorMatrix();
                AndroidUtilities.adjustSaturationColorMatrix(colorMatrix2, 2.5f);
                AndroidUtilities.multiplyBrightnessColorMatrix(colorMatrix2, 0.75f);
                msgBackgroundSelectedPaint.setAlpha(64);
                msgBackgroundSelectedPaint.setColorFilter(new ColorMatrixColorFilter(colorMatrix2));
                msgBackgroundSelectedPaint.setShader(this.serviceShaderSource);
                return;
            }
            if (selectedBackgroundColor == null) {
                selectedBackgroundColor = getColor(Theme.key_chat_selectedBackground);
            }
            msgBackgroundSelectedPaint.setColor(selectedBackgroundColor.intValue());
            msgBackgroundSelectedPaint.setColorFilter(null);
            msgBackgroundSelectedPaint.setShader(null);
        }

        public void updateServiceMessageColor(float progress) {
            Bitmap bitmap;
            Bitmap bitmap2;
            if (!this.currentPaints.isEmpty()) {
                Paint actionBackgroundPaint = getPaint(Theme.key_paint_chatActionBackground);
                Paint actionBackgroundSelectedPaint = getPaint(Theme.key_paint_chatActionBackgroundSelected);
                Paint msgBackgroundSelectedPaint = getPaint(Theme.key_paint_chatMessageBackgroundSelected);
                int serviceColor = this.currentServiceColor;
                int serviceIconColor = -1;
                int serviceTextColor = this.drawServiceGradient ? -1 : getCurrentColorOrDefault(Theme.key_chat_serviceText, true);
                int serviceLinkColor = this.drawServiceGradient ? -1 : getCurrentColorOrDefault(Theme.key_chat_serviceLink, true);
                int serviceButtonColor = this.drawServiceGradient ? -1 : getCurrentColorOrDefault(Theme.key_chat_serviceLink, true);
                if (!this.drawServiceGradient) {
                    serviceIconColor = getCurrentColorOrDefault(Theme.key_chat_serviceIcon, true);
                }
                if (progress != 1.0f) {
                    serviceColor = ColorUtils.blendARGB(this.startServiceColor, serviceColor, progress);
                    serviceTextColor = ColorUtils.blendARGB(this.startServiceTextColor, serviceTextColor, progress);
                    serviceLinkColor = ColorUtils.blendARGB(this.startServiceLinkColor, serviceLinkColor, progress);
                    serviceButtonColor = ColorUtils.blendARGB(this.startServiceButtonColor, serviceButtonColor, progress);
                    serviceIconColor = ColorUtils.blendARGB(this.startServiceIconColor, serviceIconColor, progress);
                }
                if (actionBackgroundPaint != null && !this.drawServiceGradient) {
                    actionBackgroundPaint.setColor(serviceColor);
                    actionBackgroundSelectedPaint.setColor(serviceColor);
                }
                this.currentColor = serviceColor;
                Paint linkPaint = getPaint(Theme.key_paint_chatActionText);
                if (linkPaint != null) {
                    ((TextPaint) linkPaint).linkColor = serviceLinkColor;
                    getPaint(Theme.key_paint_chatActionText).setColor(serviceTextColor);
                    getPaint(Theme.key_paint_chatBotButton).setColor(serviceButtonColor);
                }
                Theme.setDrawableColor(getDrawable(Theme.key_drawable_msgStickerCheck), serviceTextColor);
                Theme.setDrawableColor(getDrawable(Theme.key_drawable_msgStickerClock), serviceTextColor);
                Theme.setDrawableColor(getDrawable(Theme.key_drawable_msgStickerHalfCheck), serviceTextColor);
                Theme.setDrawableColor(getDrawable(Theme.key_drawable_msgStickerPinned), serviceTextColor);
                Theme.setDrawableColor(getDrawable(Theme.key_drawable_msgStickerReplies), serviceTextColor);
                Theme.setDrawableColor(getDrawable(Theme.key_drawable_msgStickerViews), serviceTextColor);
                Theme.setDrawableColor(getDrawable(Theme.key_drawable_botInline), serviceIconColor);
                Theme.setDrawableColor(getDrawable(Theme.key_drawable_botLink), serviceIconColor);
                Theme.setDrawableColor(getDrawable(Theme.key_drawable_botInvite), serviceIconColor);
                Theme.setDrawableColor(getDrawable(Theme.key_drawable_commentSticker), serviceIconColor);
                Theme.setDrawableColor(getDrawable(Theme.key_drawable_goIcon), serviceIconColor);
                Theme.setDrawableColor(getDrawable(Theme.key_drawable_replyIcon), serviceIconColor);
                Theme.setDrawableColor(getDrawable(Theme.key_drawable_shareIcon), serviceIconColor);
                Canvas canvas = this.serviceCanvas;
                if (canvas != null && (bitmap = this.serviceBitmapSource) != null) {
                    if (progress == 1.0f || (bitmap2 = this.startServiceBitmap) == null) {
                        this.useSourceShader = true;
                        canvas.drawBitmap(bitmap, 0.0f, 0.0f, (Paint) null);
                        if (actionBackgroundPaint != null) {
                            actionBackgroundPaint.setShader(this.serviceShaderSource);
                            actionBackgroundSelectedPaint.setShader(this.serviceShaderSource);
                        }
                        if (msgBackgroundSelectedPaint != null) {
                            msgBackgroundSelectedPaint.setShader(this.serviceShaderSource);
                            return;
                        }
                        return;
                    }
                    this.useSourceShader = false;
                    canvas.drawBitmap(bitmap2, 0.0f, 0.0f, (Paint) null);
                    this.paint.setAlpha((int) (255.0f * progress));
                    this.serviceCanvas.drawBitmap(this.serviceBitmapSource, 0.0f, 0.0f, this.paint);
                    if (actionBackgroundPaint != null) {
                        actionBackgroundPaint.setShader(this.serviceShader);
                        actionBackgroundSelectedPaint.setShader(this.serviceShader);
                    }
                    if (msgBackgroundSelectedPaint != null) {
                        msgBackgroundSelectedPaint.setShader(this.serviceShader);
                    }
                }
            }
        }

        private Drawable getBackgroundDrawableFromTheme(final EmojiThemes chatTheme, int prevPhase) {
            Integer gradientColor3;
            if (!chatTheme.showAsDefaultStub) {
                Integer backgroundColor = getColor(Theme.key_chat_wallpaper);
                Integer gradientColor1 = getColor(Theme.key_chat_wallpaper_gradient_to1);
                Integer gradientColor2 = getColor(Theme.key_chat_wallpaper_gradient_to2);
                Integer gradientColor32 = getColor(Theme.key_chat_wallpaper_gradient_to3);
                if (gradientColor32 != null) {
                    gradientColor3 = gradientColor32;
                } else {
                    gradientColor3 = 0;
                }
                final MotionBackgroundDrawable motionDrawable = new MotionBackgroundDrawable();
                motionDrawable.setPatternBitmap(chatTheme.getWallpaper(this.isDark ? 1 : 0).settings.intensity);
                motionDrawable.setColors(backgroundColor.intValue(), gradientColor1.intValue(), gradientColor2.intValue(), gradientColor3.intValue(), 0, true);
                motionDrawable.setPhase(prevPhase);
                final int patternColor = motionDrawable.getPatternColor();
                final boolean isDarkTheme = this.isDark;
                chatTheme.loadWallpaper(this.isDark ? 1 : 0, new ResultCallback() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda7
                    @Override // org.telegram.tgnet.ResultCallback
                    public final void onComplete(Object obj) {
                        ChatActivity.ThemeDelegate.this.m2023x18503b1e(chatTheme, isDarkTheme, motionDrawable, patternColor, (Pair) obj);
                    }

                    @Override // org.telegram.tgnet.ResultCallback
                    public /* synthetic */ void onError(Throwable th) {
                        ResultCallback.CC.$default$onError(this, th);
                    }

                    @Override // org.telegram.tgnet.ResultCallback
                    public /* synthetic */ void onError(TLRPC.TL_error tL_error) {
                        ResultCallback.CC.$default$onError(this, tL_error);
                    }
                });
                return motionDrawable;
            }
            Theme.ThemeInfo themeInfo = EmojiThemes.getDefaultThemeInfo(this.isDark);
            HashMap<String, Integer> currentColors = chatTheme.getPreviewColors(ChatActivity.this.currentAccount, this.isDark ? 1 : 0);
            String wallpaperLink = chatTheme.getWallpaperLink(this.isDark ? 1 : 0);
            Theme.BackgroundDrawableSettings settings = Theme.createBackgroundDrawable(themeInfo, currentColors, wallpaperLink, prevPhase);
            Drawable drawable = settings.wallpaper;
            return drawable;
        }

        /* renamed from: lambda$getBackgroundDrawableFromTheme$7$org-telegram-ui-ChatActivity$ThemeDelegate */
        public /* synthetic */ void m2023x18503b1e(EmojiThemes chatTheme, boolean isDarkTheme, final MotionBackgroundDrawable motionDrawable, int patternColor, Pair pair) {
            if (pair == null) {
                return;
            }
            long themeId = ((Long) pair.first).longValue();
            Bitmap bitmap = (Bitmap) pair.second;
            EmojiThemes emojiThemes = this.chatTheme;
            if (emojiThemes != null && themeId == emojiThemes.getTlTheme(this.isDark ? 1 : 0).id && bitmap != null) {
                ValueAnimator valueAnimator = this.patternIntensityAnimator;
                if (valueAnimator != null) {
                    valueAnimator.cancel();
                }
                int intensity = chatTheme.getWallpaper(isDarkTheme ? 1 : 0).settings.intensity;
                motionDrawable.setPatternBitmap(intensity, bitmap);
                motionDrawable.setPatternColorFilter(patternColor);
                ValueAnimator ofFloat = ValueAnimator.ofFloat(0.0f, 1.0f);
                this.patternIntensityAnimator = ofFloat;
                ofFloat.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: org.telegram.ui.ChatActivity$ThemeDelegate$$ExternalSyntheticLambda0
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator2) {
                        ChatActivity.ThemeDelegate.lambda$getBackgroundDrawableFromTheme$6(MotionBackgroundDrawable.this, valueAnimator2);
                    }
                });
                this.patternIntensityAnimator.setDuration(250L);
                this.patternIntensityAnimator.start();
            }
        }

        public static /* synthetic */ void lambda$getBackgroundDrawableFromTheme$6(MotionBackgroundDrawable motionDrawable, ValueAnimator animator) {
            float value = ((Float) animator.getAnimatedValue()).floatValue();
            motionDrawable.setPatternAlpha(value);
        }

        private int getCurrentColorOrDefault(String key, boolean ignoreAnimation) {
            Integer color = getCurrentColor(key, ignoreAnimation);
            if (color == null) {
                color = Integer.valueOf(Theme.getColor(key, null, ignoreAnimation));
            }
            return color.intValue();
        }
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    protected boolean allowPresentFragment() {
        return !this.inPreviewMode;
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean hideKeyboardOnShow() {
        MessageObject messageObject = this.threadMessageObject;
        if (messageObject != null && messageObject.getRepliesCount() == 0 && ChatObject.canSendMessages(this.currentChat)) {
            return false;
        }
        return super.hideKeyboardOnShow();
    }

    @Override // org.telegram.ui.ActionBar.BaseFragment
    public boolean isLightStatusBar() {
        int color;
        if (this.reportType >= 0) {
            Theme.ResourcesProvider resourcesProvider = getResourceProvider();
            if (resourcesProvider == null) {
                color = Theme.getColor(Theme.key_actionBarActionModeDefault, null, true);
            } else {
                color = resourcesProvider.getColorOrDefault(Theme.key_actionBarActionModeDefault);
            }
            return ColorUtils.calculateLuminance(color) > 0.699999988079071d;
        }
        return super.isLightStatusBar();
    }

    public MessageObject.GroupedMessages getGroup(long id) {
        return this.groupedMessagesMap.get(id);
    }
}
